"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["7983"],{1408:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(2676),t=s(453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",pre:"pre",code:"code",h3:"h3"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"requests",children:["Requests",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#requests",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"1简介",children:["1、简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1简介",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Requests 是 Python 最久负盛名的 HTTP 库，没有之一；K 神（Kenneth Reitz）的 for humans 系列中最有名的一个；"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/spider/k.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"做爬虫、数据分析、接口自动化会经常用到它，非常多有名的 Python 库依赖于 Requests 提供基础能力，比如：httpx（支持异步的 HTTP 库）、locust（性能[负载]测试框架）、HttpRunner（接口自动化框架）等等，都是基于 Requests 构建起来的。"}),"\n",(0,r.jsx)(n.p,{children:"有人甚至建议将 Requests 库合入 Python 标准库发布。只要你想做 HTTP 请求，你肯定会想到 Requests。"}),"\n",(0,r.jsx)(n.p,{children:"Requests 特点：简单、简洁、优雅。"}),"\n",(0,r.jsxs)(n.h2,{id:"2安装",children:["2、安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2安装",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"系统环境：deepin"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"pip3 install requests\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3请求",children:["3、请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3请求",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"31导入",children:["3.1、导入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31导入",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests\n"})}),"\n",(0,r.jsx)(n.p,{children:"所有的功能都在 requests 这个名称空间下。"}),"\n",(0,r.jsxs)(n.h3,{id:"32get-请求",children:["3.2、GET 请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32get-请求",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'r = requests.get("https://www.baidu.com")\nprint(r.status_code)\nprint(r.text)\n'})}),"\n",(0,r.jsx)(n.p,{children:"终端打印："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"200\n<!DOCTYPE html>\n\x3c!--STATUS OK--\x3e<html> <head><meta http-equ ...... # 省略\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"33post-请求",children:["3.3、POST 请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33post-请求",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"https://httpbin.org"})," 是 K 神的一个简单的 HTTP 服务，主要用于试用 requests 里面的一些功能，方便理解；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r = requests.post('https://httpbin.org/post', data={'key': 'value'})\nprint(r.status_code)\nprint(r.text)\n"})}),"\n",(0,r.jsx)(n.p,{children:"终端打印："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'200\n{\n  "args": {}, \n  "data": "", \n  "files": {}, \n  "form": {\n    "key": "value"\n  }, \n  "headers": {\n    "Accept": "*/*", \n    "Accept-Encoding": "gzip, deflate", \n    "Content-Length": "9", \n    "Content-Type": "application/x-www-form-urlencoded", \n    "Host": "httpbin.org", \n    "User-Agent": "python-requests/2.28.1", \n    "X-Amzn-Trace-Id": "Root=1-642aa9b9-259b189c1acb1e114a5d6bc7"\n  }, \n  "json": null, \n  "origin": "110.191.179.216", \n  "url": "https://httpbin.org/post"\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"34其他请求",children:["3.4、其他请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34其他请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"其他请求方式不常用，如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r = requests.put('https://httpbin.org/put', data={'key': 'value'})\nr = requests.delete('https://httpbin.org/delete')\nr = requests.head('https://httpbin.org/get')\nr = requests.options('https://httpbin.org/get')\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"35请求头headers",children:["3.5、请求头（headers）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35请求头headers",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"请求头通常会加 UA（user agent），这个主要是模仿浏览器的行为，比如模仿使用 Firefox 浏览器："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'headers = {\n    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0"\n}\n\nrequests.get(url, headers=headers)\nrequests.post(url, headers=headers)\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"36参数",children:["3.6、参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"(1) get 请求参数"}),"\n",(0,r.jsxs)(n.p,{children:["get 请求的参数可以直接在url后面加参数，",(0,r.jsx)(n.code,{children:"url?key1=value1&key2=value2"}),"，即 url 后面加问号，然后紧接着多个参数的键和值，多个键值之间用 & 符号链接；"]}),"\n",(0,r.jsx)(n.p,{children:"这种方式简单是简单，但是参数多了之后，url 会变得很长，看起来胀眼睛，为了更好的可读性，requests 支持这样传递 get 请求的参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"params = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get('https://httpbin.org/get', params=params)\n"})}),"\n",(0,r.jsx)(n.p,{children:"通过打印 r.url 你会发现，实际上也是给你转换成了前面那种 & 连接的方式；"}),"\n",(0,r.jsx)(n.p,{children:"（2）post 请求参数"}),"\n",(0,r.jsx)(n.p,{children:"post 请求参数一般是通过data参数传递，通常 data 是一个字典形式："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"data = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post('https://httpbin.org/post', data=data)\nprint(r.text)\n"})}),"\n",(0,r.jsx)(n.p,{children:"执行后终端输出："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'{\n  "args": {}, \n  "data": "", \n  "files": {}, \n  "form": {\n    "key1": "value1", \n    "key2": "value2"\n  }, \n  "headers": {\n    "Accept": "*/*", \n    "Accept-Encoding": "gzip, deflate", \n    "Content-Length": "23", \n    "Content-Type": "application/x-www-form-urlencoded", \n    "Host": "httpbin.org", \n    "User-Agent": "python-requests/2.28.1", \n    "X-Amzn-Trace-Id": "Root=1-642e7884-7f20428d523e7fda1da61f1a"\n  }, \n  "json": null, \n  "origin": "110.191.179.216", \n  "url": "https://httpbin.org/post"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果你拿到的参数，是一个 json 格式，可以直接传递给 json 参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'jsons = \'{"key1": "value1", "key2": "value2"}\'\nr = requests.post(\'https://httpbin.org/post\', json=jsons)\nprint(r.text)\n'})}),"\n",(0,r.jsx)(n.p,{children:"执行后终端输出："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'{\n  "args": {}, \n  "data": "\\"{\\\\\\"key1\\\\\\": \\\\\\"value1\\\\\\", \\\\\\"key2\\\\\\": \\\\\\"value2\\\\\\"}\\"", \n  "files": {}, \n  "form": {}, \n  "headers": {\n    "Accept": "*/*", \n    "Accept-Encoding": "gzip, deflate", \n    "Content-Length": "46", \n    "Content-Type": "application/json", \n    "Host": "httpbin.org", \n    "User-Agent": "python-requests/2.28.1", \n    "X-Amzn-Trace-Id": "Root=1-642e79d4-1f0aeb1370ea94cf2c858f9d"\n  }, \n  "json": "{\\"key1\\": \\"value1\\", \\"key2\\": \\"value2\\"}", \n  "origin": "110.191.179.216", \n  "url": "https://httpbin.org/post"\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"4响应",children:["4、响应",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4响应",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"其实前面的例子已经有体现一点响应了；"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r = requests.post('https://httpbin.org/post', data={'key': 'value'})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["r 为返回值的对象（Response），通常在项目中我一般用 ",(0,r.jsx)(n.code,{children:"rsp"})," 来表示（后面的 ",(0,r.jsx)(n.code,{children:"rsp"})," 和 r 是一个意思，都是表示返回值的对象）；"]}),"\n",(0,r.jsx)(n.p,{children:"rsp 既然是对象，那来看下对象的方法和属性，咱们 Debug 跑一下就很清楚："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/spider/rsp.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"接下来讲几个比较常用的属性和方法；"}),"\n",(0,r.jsxs)(n.h3,{id:"41响应内容",children:["4.1、响应内容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41响应内容",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r.text\n"})}),"\n",(0,r.jsx)(n.p,{children:"前面例子已经打印过，这里就不打印了；"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"text"})," 的解码是自动的，大多数情况下都能正常解码；"]}),"\n",(0,r.jsxs)(n.p,{children:["可以通过 ",(0,r.jsx)(n.code,{children:"encoding"})," 来查看或修改编码方式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"print(r.encoding)\nr.encoding = 'ISO-8859-1'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["修改编码方式之后，再使用 ",(0,r.jsx)(n.code,{children:"r.text"})," 就会以新的编码方式解码。"]}),"\n",(0,r.jsx)(n.p,{children:"如果你发现返回的内容编码不对，你可以尝试修改不同的编码，这是个经验积累的过程。"}),"\n",(0,r.jsxs)(n.h3,{id:"42二进制响应内容",children:["4.2、二进制响应内容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42二进制响应内容",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["非文本类请求，一般返回的是二进制内容，此时我们应该使用 ",(0,r.jsx)(n.code,{children:"content"})," 方法："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r.content\n"})}),"\n",(0,r.jsx)(n.p,{children:"将二进制文件保存下来，比如请求返回一个 mp3 文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'with open("my.mp3", "wb") as f：\n    f.write(r.content)\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"43json响应内容",children:["4.3、JSON响应内容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43json响应内容",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一些 RESTful API 返回通常是 json 内容，我们可以直接使用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r.json()\n"})}),"\n",(0,r.jsx)(n.p,{children:"获取的类型为 Python 的字典类型；"}),"\n",(0,r.jsxs)(n.p,{children:["如果响应包含无效JSON，会抛 ",(0,r.jsx)(n.code,{children:"requests.exceptions.JSONDecodeError"})," 异常。"]}),"\n",(0,r.jsxs)(n.h2,{id:"5高阶用法",children:["5、高阶用法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5高阶用法",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"51session",children:["5.1、Session",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51session",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Session 对象可以在一次会话中可以有效的处理 cookie 持久化的问题；"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"s = requests.Session()\n# 设置一个cookie为123456789\ns.get('https://httpbin.org/cookies/set/sessioncookie/123456789')\n# 请求一下\nr = s.get('https://httpbin.org/cookies')\nprint(r.text)\n"})}),"\n",(0,r.jsx)(n.p,{children:"执行后终端输出："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'{\n  "cookies": {\n    "sessioncookie": "123456789"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"52request",children:["5.2、Request",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52request",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"无论是前面讲到的 GET 、 POST 等请求方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"requests.get()\nrequests.post()\n"})}),"\n",(0,r.jsx)(n.p,{children:"其底层都是通过调用 Request 这个类来实现的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Request():\n    def __init__(\n        self,\n        method=None,\n        url=None,\n        headers=None,\n        files=None,\n        data=None,\n        params=None,\n        auth=None,\n        cookies=None,\n        hooks=None,\n        json=None,\n    ):\n        pass\n"})}),"\n",(0,r.jsx)(n.p,{children:"因此我们当然可以直接跨过这一步，不让中间商赚差价，直接用 Request："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'frome requests import Request\nr = Request("GET", url, headers=headers)\nr = Request("POST", url, headers=headers)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["还没完，记得调用一下 ",(0,r.jsx)(n.code,{children:"prepare()"})," 方法，然后使用 Session 里面的 send 方法："]}),"\n",(0,r.jsx)(n.p,{children:"举例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from  requests import Session, Request\ns = Session()\nr = Request(\"GET\", 'https://httpbin.org/get')\nprepped = r.prepare()\nresp = s.send(prepped)\nprint(resp.text)\n"})}),"\n",(0,r.jsx)(n.p,{children:"执行终端输出："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'{\n  "args": {}, \n  "headers": {\n    "Accept-Encoding": "identity", \n    "Host": "httpbin.org", \n    "User-Agent": "python-urllib3/1.26.13", \n    "X-Amzn-Trace-Id": "Root=1-642e84e2-1328a0210e2252741f20c648"\n  }, \n  "origin": "110.191.179.216", \n  "url": "https://httpbin.org/get"\n}\n'})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%2FRequests.md"]={toc:[{text:"1、简介",id:"1简介",depth:2},{text:"2、安装",id:"2安装",depth:2},{text:"3、请求",id:"3请求",depth:2},{text:"3.1、导入",id:"31导入",depth:3},{text:"3.2、GET 请求",id:"32get-请求",depth:3},{text:"3.3、POST 请求",id:"33post-请求",depth:3},{text:"3.4、其他请求",id:"34其他请求",depth:3},{text:"3.5、请求头（headers）",id:"35请求头headers",depth:3},{text:"3.6、参数",id:"36参数",depth:3},{text:"4、响应",id:"4响应",depth:2},{text:"4.1、响应内容",id:"41响应内容",depth:3},{text:"4.2、二进制响应内容",id:"42二进制响应内容",depth:3},{text:"4.3、JSON响应内容",id:"43json响应内容",depth:3},{text:"5、高阶用法",id:"5高阶用法",depth:2},{text:"5.1、Session",id:"51session",depth:3},{text:"5.2、Request",id:"52request",depth:3}],title:"Requests",headingTitle:"Requests",frontmatter:{Author:"mikigo"}}}}]);