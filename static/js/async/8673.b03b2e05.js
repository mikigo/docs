"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8673"],{9697:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(2676),d=s(453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",pre:"pre",code:"code",div:"div",hr:"hr"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"deb安装包制作",children:["deb安装包制作",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deb安装包制作",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"自己编写的 Python 脚本代码，自己运行还好，让别人用的时候，不方便传输，也不方便运行，制作成 deb 包后完美解决，网上搜索了很多文章，都没有一次打包成功过，故总结这样一份文档教程。"}),"\n",(0,r.jsx)(n.p,{children:"我当前使用的系统：\nuos专业版"}),"\n",(0,r.jsxs)(n.h2,{id:"打包需要的库",children:["打包需要的库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包需要的库",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install build-essential\nsudo apt-get install debmake\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"制作-debian-配置文件目录",children:["制作 debian 配置文件目录",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#制作-debian-配置文件目录",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"源码目录下，创建 debian 的配置文件目录。在程序源代码目录下有一个叫做 debian 的新的子目录。这个目录中存放着许多文件，我们将要修改这些文件来定制软件包行为。其中最重要的文件当属 control, changelog, copyright, 以及 rules, 所有的软件包都必须有这几个文件。"}),"\n",(0,r.jsx)(n.p,{children:"执行命令快速创建配置文件目录"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'debmake -e myemail@foxmail.com -p rekols-monitor -u 1.0.0 -f "my"  -n -x1\n\n# -e: 邮件地址\n# -p: 软件包名\n# -u: 软件版本号\n# -f: 作者全名\n# -n:  这个参数是核心，直接从源码生成配置文件\n# -x1: 这个参数的默认值就是 x1 ，这里是说明这个参数的作用，deb包的构建过程有很多钩子方法，x1只是包含一些项目信息和构建信息的版本，x0就只有构建信息，但是x0参数已经被弃用，x2、x3、x4你会发现生成文件很多，一般没有特殊情况，最简即可，即使用默认参数x1即可\n\n\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"deb包目录",children:["deb包目录",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deb包目录",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"MYDEB/\n├── debian\n│   ├── changelog\n│   ├── compat\n│   ├── control\n│   ├── copyright\n│   ├── README.Debian\n│   ├── rules\n│   ├── source\n│   │   ├── format\n│   │   └── local-options\n│   └── watch\n├── script\n├── script1.py\n├── script2.py\n├── script3.py\n└── script4.py\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"修改-control-文件",children:["修改 control 文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改-control-文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"原始文件内容如下，第 1 – 7 行是源代码包的控制信息。第 9 – 13 行是二进制包的控制信息。\n按照自己的需求可以修改描述信息、支持架构等等信息"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"Source: mydeb\nSection: unknown\nPriority: optional\nMaintainer: my <mydeb@foxmail.com>\nBuild-Depends: debhelper (>=11~)\nStandards-Version: 4.1.4\nHomepage: <insert the upstream URL, if relevant>\n\nPackage: mydeb\nArchitecture: any\nMulti-Arch: foreign\nDepends: ${misc:Depends}, ${shlibs:Depends}\nDescription: auto-generated package by debmake This Debian binary package was auto-generated by the debmake(1) command provided by the debmake package.\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"提示"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,r.jsx)(n.p,{children:"详细的设置可以查看文末官方文档（4.1，control部分）"}),"\n"]})]}),"\n",(0,r.jsxs)(n.h2,{id:"创建-install-文件",children:["创建 install 文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-install-文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"install文件的目的是，安装deb包的时候，能把对应的脚本文件和share文件安装到指定的目录\n例如，假设某个二进制文件 src/bar没有被默认安装，则应让 install 呈现成这样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"script /usr/lib/mydeb\nscript1.py /usr/lib/mydeb\nscript2.py /usr/lib/mydeb\nscript3.py /usr/lib/mydeb\nscript4.py /usr/lib/mydeb\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"创建-links-文件",children:["创建 links 文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-links-文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"links 文件的目的，对需要直接执行的脚本文件创建链接"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"/usr/lib/mydeb/script /usr/bin/mydeb\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"进行打包",children:["进行打包",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#进行打包",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"debian 目录下还有很多文件可以按照自己的需求进行定制，不过这里用不上，暂时不做修改示列，比如最重要的 rules 文件，直接决定打包的成功与否"}),"\n",(0,r.jsx)(n.p,{children:"打包可以直接执行以下命令进行打包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"sudo dpkg-buildpackage\n"})}),"\n",(0,r.jsx)(n.p,{children:"完成后，会在上级目录生成 mydeb_1.0.0_amd64.deb，自此，打包结束。"}),"\n",(0,r.jsxs)(n.h2,{id:"debian-目录下文件说明",children:["debian 目录下文件说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#debian-目录下文件说明",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"changelog"}),"：此文件用于记录软件包的版本和更新历史。每次对软件包进行更改时，都应更新此文件以包含新的版本号、日期、作者和更改描述。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"compat"}),"：此文件指定了软件包的兼容性级别。它定义了软件包与 Debian 操作系统版本之间的兼容性要求。该文件中的数字表示 Debian 版本号，例如 9 表示Debian 9 或更高版本。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"control"}),"：此文件是软件包的控制文件，包含了软件包的元数据和依赖关系。它定义了软件包的名称、描述、维护者、依赖关系和其他相关信息。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"copyright"}),"：此文件包含软件包的版权信息和许可证条款。它指定了软件包的版权所有者、许可证类型和许可证文本。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"docs"}),"：此目录用于存放软件包的文档文件。这些文件可以是用户手册、安装指南、示例配置文件等。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"install"}),"：此文件用于指定软件包的安装规则。它告诉 dpkg 工具在安装软件包时应该将哪些文件复制到系统的哪些位置。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rules"}),"：此文件包含了构建软件包的规则和指令。它指定了如何编译、打包和安装软件包。"]}),"\n",(0,r.jsx)(n.p,{children:"links文件用于创建符号链接（symbolic links）。符号链接是一种特殊类型的文件，它指向另一个文件或目录。通过创建符号链接，可以在文件系统中引用其他位置的文件或目录，而不需要复制或移动它们。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"source"}),"：此目录包含软件包的源代码。如果软件包是通过源代码构建的，那么源代码文件应该放在这个目录下。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"preinst"}),":（pre-installation script）文件是 Debian 软件包中的一个脚本文件，用于在软件包安装之前执行一些预安装操作。"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.debian.org/doc/manuals/maint-guide/start.zh-cn.html",target:"_blank",rel:"noopener noreferrer",children:"官方制作deb的方法"})}),"\n",(0,r.jsx)(n.hr,{})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["program%2FLinux%2Fdeb%E5%AE%89%E8%A3%85%E5%8C%85%E5%88%B6%E4%BD%9C.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"打包需要的库",id:"打包需要的库",depth:2},{text:"制作 debian 配置文件目录",id:"制作-debian-配置文件目录",depth:2},{text:"deb包目录",id:"deb包目录",depth:2},{text:"修改 control 文件",id:"修改-control-文件",depth:2},{text:"创建 install 文件",id:"创建-install-文件",depth:2},{text:"创建 links 文件",id:"创建-links-文件",depth:2},{text:"进行打包",id:"进行打包",depth:2},{text:"debian 目录下文件说明",id:"debian-目录下文件说明",depth:2}],title:"deb安装包制作",headingTitle:"deb安装包制作",frontmatter:{Author:"禄烨"}}}}]);