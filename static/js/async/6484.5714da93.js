"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6484"],{5057:function(e,n,d){d.r(n),d.d(n,{default:()=>h});var r=d(2676),s=d(453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",pre:"pre",img:"img",div:"div",h4:"h4",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"avocado和youqu对比调研报告",children:["Avocado和YouQu对比调研报告",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado和youqu对比调研报告",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 是一个基于 Linux 的自动化测试框架，使用 Python 语言编写构建，具有许多特色功能；YouQu 也是基于 Linux 的自动化测试框架，同样也是使用 Python 语言编写构建。"}),"\n",(0,r.jsx)(n.p,{children:"本文主要探寻 Avocado 引以为傲的特色功能，与 YouQu 框架进行对比，看看哪个框架更加适合现代化的自动化测试。"}),"\n",(0,r.jsx)(n.p,{children:"以下将从几个方面分别对各功能进行对比："}),"\n",(0,r.jsxs)(n.h2,{id:"驱动方式",children:["驱动方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#驱动方式",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Avocado 使用命令行方式驱动，使用子命令 ",(0,r.jsx)(n.code,{children:"run"})," 执行用例；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"avocado run \n"})}),"\n",(0,r.jsx)(n.p,{children:"远程执行也有插件支持。"}),"\n",(0,r.jsxs)(n.h3,{id:"youqu",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这点和 YouQu 不谋而合，YouQu 也是命令行方式驱动，本机运行的子命令也是 ",(0,r.jsx)(n.code,{children:"run"})," ；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"youqu manage.py run\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里申明，YouQu 在设计时绝对没有参考 Avocado ，纯属巧合，只能说英雄所见略同。"}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 除了 ",(0,r.jsx)(n.code,{children:"run"})," 子命令，还支持其他的子命令，如： ",(0,r.jsx)(n.code,{children:"remote, pmsctl, csvctl, startapp"})," ；"]}),"\n",(0,r.jsxs)(n.p,{children:["详细用法情况查看：",(0,r.jsx)(n.a,{href:"http://youqu.uniontech.com/%E6%A1%86%E6%9E%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/%E6%89%A7%E8%A1%8C%E7%AE%A1%E7%90%86%E5%99%A8/",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.a,{href:"http://youqu.uniontech.com/%E6%A1%86%E6%9E%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/%E6%89%A7%E8%A1%8C%E7%AE%A1%E7%90%86%E5%99%A8/",target:"_blank",rel:"noopener noreferrer",children:"http://youqu.uniontech.com/框架功能介绍/执行管理器/"})})]}),"\n",(0,r.jsxs)(n.h3,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"驱动方式都采用了类似的功能设计，都支持自定义扩展驱动功能。"}),"\n",(0,r.jsxs)(n.h2,{id:"多种格式的测试报告",children:["多种格式的测试报告",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#多种格式的测试报告",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado-1",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado-1",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Avocado 默认支持 XML、JSON 格式的测试报告，至于 HTML 格式的测试报告需要安装插件 ",(0,r.jsx)(n.code,{children:"avocado-framework-plugin-result-html"}),"；"]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 的 HTML 报告是这样的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/avocado_assets/3.png",alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"youqu-1",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"YouQu 默认支持 XML、JSON、HTML格式的测试报告。"}),"\n",(0,r.jsx)(n.p,{children:"YouQu 的 HTML 报告是这样的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/avocado_assets/1.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/avocado_assets/2.png",alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"小结-1",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 官方是这样评价它的 HTML 报告的："}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"截图自官网"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/avocado_assets/4.png",alt:""})}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"。。\uD83D\uDE05"}),"\n",(0,r.jsx)(n.p,{children:"我只能说 Avocado 这个报告还有很大的进步空间，尊重并祝福。"}),"\n",(0,r.jsx)(n.p,{children:"YouQu 的测试报告除了 UI 界面好看、信息展示全，还加入了用例失败录屏、失败截图、用例执行日志等等，建议 Avocado 尽快使用 YouQu 的测试报告插件。"}),"\n",(0,r.jsxs)(n.h2,{id:"收集系统数据",children:["收集系统数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#收集系统数据",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 自带一个 sysinfo 插件，能自动收集一些系统运行数据，如：cpuinfo、meminfo等；"}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 自带一个 ",(0,r.jsx)(n.code,{children:"--top"})," 参数，可以自动收集系统运行时的 top 命令的数据；"]}),"\n",(0,r.jsx)(n.p,{children:"这个功能可以辅助做测试用例失败分析，但是个人认为自动化框架收集系统数据还是有局限，而使用 Prometheus、Zabbix、Grafana 等专业的监控工具更好。"}),"\n",(0,r.jsx)(n.p,{children:"所以，此功能我个人认为，聊胜于无吧，就不做展开分析了。"}),"\n",(0,r.jsxs)(n.h2,{id:"批量运行用例",children:["批量运行用例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#批量运行用例",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado-2",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado-2",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 提供了通过标签筛选测试用例执行的功能；"}),"\n",(0,r.jsxs)(n.h4,{id:"用例标签",children:["用例标签",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用例标签",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["用例标签的标注方式是在用例代码中",(0,r.jsx)(n.code,{children:"用例类说明"}),"或",(0,r.jsx)(n.code,{children:"用例函数说明"})," 里面来标注，必须使用 ",(0,r.jsx)(n.code,{children:":avocado: tags="})," 这样的范式写标签。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class FastTest(Test):\n    """\n    :avocado: tags=fast\n    """\n\n    def test_fast(self):\n        """\n        :avocado: tags=net\n        """\n\n    def test_fast_other(self):\n        """\n        :avocado: tags=net\n        """\n\n\nclass SlowTest(Test):\n    """\n    :avocado: tags=slow,disk\n    """\n\n    def test_slow(self):\n        time.sleep(1)\n        \n        \nclass SlowUnsafeTest(Test):\n    """\n    :avocado: tags=slow,disk,unsafe\n    """\n\n    def test_slow_unsafe(self):\n        time.sleep(1)\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"筛选用例执行",children:["筛选用例执行",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#筛选用例执行",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"--filter-by-tags"})," 参数指定标签的名称，支持多种逻辑组合；"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["执行包含某一个标签的用例： ",(0,r.jsx)(n.code,{children:"--filter-by-tags=net"})]}),"\n",(0,r.jsxs)(n.li,{children:["执行包含不某一个标签的用例：",(0,r.jsx)(n.code,{children:"--filter-by-tags=-net"})]}),"\n",(0,r.jsxs)(n.li,{children:["执行同时包含多个标签的用例：",(0,r.jsx)(n.code,{children:"--filter-by-tags=disk,slow,unsafe"})]}),"\n",(0,r.jsxs)(n.li,{children:["执行包含 disk 标签或包含 net 标签的用例：",(0,r.jsx)(n.code,{children:"--filter-by-tags=disk --filter-by-tags=net"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"youqu-2",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu-2",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"用例标签-1",children:["用例标签",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用例标签-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"YouQu的用例标签是在一个 CSV 文件里面去写，方便维护者使用 Excel 打开进行编辑："}),"\n",(0,r.jsx)(n.p,{children:"CSV 文件标签示例："}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{align:"center",children:"脚本ID"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"PMS用例ID"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"用例级别"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"用例类型"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"设备类型"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"一二级bug自动化"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"上线对象"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"跳过原因"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"确认修复"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"废弃用例"}),"\n",(0,r.jsx)(n.th,{align:"left",children:"..."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"679537"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"679537"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"L1"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"FUNC"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"PPL"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"BUG"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"CICD"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"skip-XXX"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n",(0,r.jsx)(n.td,{align:"left"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"标签支持无限扩展，标签支持自动生成和自动维护，维护起来非常方便，不需要到茫茫多的 py 用例脚本中去改标签，使用 Excel 打开就能快速的维护标签 。"}),"\n",(0,r.jsxs)(n.h4,{id:"筛选用例执行-1",children:["筛选用例执行",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#筛选用例执行-1",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过参数 ",(0,r.jsx)(n.code,{children:"-t 或 --tags"})," 指定不同的标签进行用例筛选执行，而且标签支持使用 ",(0,r.jsx)(n.code,{children:"and/or/not"})," 逻辑进行组合，比如：",(0,r.jsx)(n.code,{children:"-t 'L1 and FUNC'"})," 表示执行带有 L1 且 带有 FUNC 标签的用例，使用非常符合语义对吧。"]}),"\n",(0,r.jsxs)(n.p,{children:["而且还支持通过指定关键词进行用例筛选，使用参数 ",(0,r.jsx)(n.code,{children:"-k 或 --keywords"})," 指定关键词，关键词也支持使用 ",(0,r.jsx)(n.code,{children:"and/or/not"})," 逻辑组合，关键词有很多，比如：py 文件的名称、用例类名称、用例函数名称、名称中的部分字符等等都是关键词。"]}),"\n",(0,r.jsx)(n.p,{children:"而且的而且，标签和关键词两个参数可以同时使用，可以组合出任意的用例集合，只有想不到没有办不到。"}),"\n",(0,r.jsxs)(n.h3,{id:"小结-2",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结-2",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 这样的标签管理方式是非常难以维护的，因为标签分布在各个脚本的注释中，如果后期要进行批量的修改，维护者将会非常痛苦而且非常耗时，你可以想象一下，在几千各 py 文件中，挨个打开修改一个注释，人都麻了。我只能说非常的 Old school。"}),"\n",(0,r.jsx)(n.p,{children:"而 Avocado 的用例筛选执行方式，官方文档用了大量的篇幅和示例来介绍其用法，基本能满足业务使用要求，但是使用比较麻烦，参数传递不够优雅。"}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 的用例标签化管理是独有的专利方案，所有的标签在一个 ",(0,r.jsx)(n.code,{children:"CSV"})," 文件里面去维护，可维护性非常高，而且标签支持自动生成自动维护；"]}),"\n",(0,r.jsxs)(n.p,{children:["基于此标签化管理方案，YouQu  支持灵活的用例组织方式，而且标签参数支持使用 ",(0,r.jsx)(n.code,{children:"and/or/not"})," 逻辑组合，非常符合语义，根本不需要对使用方法做大量文档说明，使用者就能立马 get 到它的用法。"]}),"\n",(0,r.jsxs)(n.h2,{id:"高级日志记录功能",children:["高级日志记录功能",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级日志记录功能",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado-3",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado-3",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"特点是能记录所有的日志，生成日志文件。"}),"\n",(0,r.jsxs)(n.h3,{id:"youqu-3",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu-3",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["全自动日志系统，只需要一个装饰器，自动输出全部日志，并保存到日志文件。",(0,r.jsx)(n.a,{href:"http://youqu.uniontech.com/%E6%A1%86%E6%9E%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/",target:"_blank",rel:"noopener noreferrer",children:"《YouQu 日志系统》"})]}),"\n",(0,r.jsxs)(n.h3,{id:"小结-3",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结-3",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 的日志模块看似平平无奇，实则司空见惯，而 YouQu 的日志系统，全自动输出日志系统。"}),"\n",(0,r.jsxs)(n.h2,{id:"配置",children:["配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado-4",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado-4",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 存在多个配置文件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/etc/avocado/avocado.conf"})," 这是一个系统级别的配置文件，对所有用户生效；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/etc/avocado/conf.d/*.conf"})," 这个目录下也可以放配置文件，也是一个系统级别的配置文件；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/.config/avocado/avocado.conf"})," 用户级别的配置文件；"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"用户配置文件的配置项可以覆盖系统级别的配置文件的配置项。"}),"\n",(0,r.jsx)(n.p,{children:"测试执行时配置项的优先顺序："}),"\n",(0,r.jsx)(n.p,{children:"命令行参数 > 用户配置文件 > 系统配置文件；"}),"\n",(0,r.jsxs)(n.h3,{id:"youqu-4",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu-4",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 的配置文件只有一个，",(0,r.jsx)(n.code,{children:"setting/globalconfig.ini"})," ，提供一个全局配置对象 ",(0,r.jsx)(n.code,{children:"conf"}),"，使用此对象可以访问全局配置里面的所有配置；"]}),"\n",(0,r.jsx)(n.p,{children:"比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setting import conf\n\nconf.ROOT_DIR\n"})}),"\n",(0,r.jsxs)(n.p,{children:["基于 YouQu 的子项目里面会有一个局部配置文件 ",(0,r.jsx)(n.code,{children:"config.ini"}),"，提供一个配置对象 ",(0,r.jsx)(n.code,{children:"config"}),"，使用此对象可以访问 ",(0,r.jsx)(n.code,{children:"局部配置 + 全局配置"})," 的所有配置；"]}),"\n",(0,r.jsx)(n.p,{children:"比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from apps.autotest_dde_file_manager.config import config\n\nconfig.ROOT_DIR\n"})}),"\n",(0,r.jsx)(n.p,{children:"局部配置的值可以覆盖全局配置值；"}),"\n",(0,r.jsx)(n.p,{children:"测试执行时配置项的优先顺序："}),"\n",(0,r.jsx)(n.p,{children:"命令行参数 > 局部配置 > 全局配置；"}),"\n",(0,r.jsxs)(n.h3,{id:"小结-4",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结-4",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"两个框架的配置体系整体设计思想是类似的。"}),"\n",(0,r.jsx)(n.p,{children:"Avocado 的系统配置可能存在多个，看似可配置项很多，实际不好管理，YouQu 的配置理念是 All in One，简洁优雅永不过时。"}),"\n",(0,r.jsxs)(n.h2,{id:"自定义依赖项",children:["自定义依赖项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义依赖项",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"avocado-5",children:["Avocado",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#avocado-5",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 的依赖的概念实际上是用例前置条件（setup）的概念，简单讲就是这条用例执行之前可能需要处理以下依赖环境，比如装一些个三方包或者获取测试资源等等。"}),"\n",(0,r.jsx)(n.p,{children:"依赖项定义方式是在用例类说明里面写注释："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from avocado import Test\n\n\nclass PassTest(Test):\n\n    """\n    Example test that passes.\n\n    :avocado: dependency={"type": "package", "name": "hello"}\n    """\n'})}),"\n",(0,r.jsxs)(n.p,{children:["固定格式 ",(0,r.jsx)(n.code,{children:":avocado: dependency="})," ，和标签管理那里一样，维护性太差。"]}),"\n",(0,r.jsxs)(n.h3,{id:"youqu-5",children:["YouQu",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu-5",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 的前置条件处理支持了非常灵活的写法，参考 ",(0,r.jsx)(n.a,{href:"http://youqu.uniontech.com/docs/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%80%E6%9C%AF/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/Pytest%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%B5%B7%E9%A3%9E.html#%E5%9B%9B%E3%80%81fixture",target:"_blank",rel:"noopener noreferrer",children:"Pytest Fixture"})," 写法，除了生孩子，你可以在前置条件里面做任何想做的事情；"]}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，尽管 YouQu 致力于将用例需要的所有依赖项在环境部署阶段都初始化好，但 YouQu 仍然支持子项目对测试环境部署进行",(0,r.jsx)(n.a,{href:"http://youqu.uniontech.com/%E6%A1%86%E6%9E%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#2",target:"_blank",rel:"noopener noreferrer",children:"定制依赖项"})," 。"]}),"\n",(0,r.jsxs)(n.h3,{id:"小结-5",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结-5",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 对于依赖项的处理是用字符串硬编码，分布在各个用例脚本里面，而 YouQu 的环境依赖处理，在灵活性和易维护性上无可比拟；"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"对比功能点"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"Avocado "}),"\n",(0,r.jsx)(n.th,{align:"center",children:"YouQu "}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"驱动方式"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"测试报告"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✗"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✓ 略胜三筹"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"收集系统数据"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"批量运行用例"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✗"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✓ 略胜三筹"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"高级日志记录功能"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✗"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✓ 略胜三筹"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"配置"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"\uD83D\uDE04"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"自定义依赖"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✗"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✓ 略胜三筹"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"插件"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✗"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"✓ 略胜三筹"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 基于 unitttest 来管理和驱动用例执行，YouQu 基于 Pytest 来管理和驱动用例执行，Pytest 比 unittest 本身具有技术优势，从技术上讲 YouQu 是天然兼容 Avocado 的用例的，反之则不然，再加上 YouQu 在此之上加入了许多自研功能，比如：用例标签化管理方案、全自动日志系统、用例失败录屏，在整体技术架构上不能说是更胜一筹，只能说是属于两个时代的产品。"}),"\n",(0,r.jsxs)(n.p,{children:["Avocado 还支持一些内置插件和三方插件，但插件这块且不提 YouQu 有自己的生态插件，咱就说 Pytest 社区就有海量的",(0,r.jsx)(n.a,{href:"https://github.com/mikigo/pytest-plugins",target:"_blank",rel:"noopener noreferrer",children:"插件"}),"，Avocado 可以说完全不再一个级别，相当于是地球人遇到三体人。"]}),"\n",(0,r.jsx)(n.p,{children:"Avocado 主打 Linux CLI 测试这块，底层方法模块在 Linux 内核、命令这块确有独到之处，底层方法基于 Python 与 Linux 进行交互，易于移植，但框架技术架构上没有任何优势；"}),"\n",(0,r.jsxs)(n.p,{children:["YouQu 主打在 Linux 操作系统桌面应用 UI、接口自动化这块，添加一些 Linux CLI 相关底层功能很容易，在框架技术架构、 以及各功能方面几乎是",(0,r.jsx)(n.strong,{children:"全面碾压 Avocado"}),"。"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["tech_doc%2F%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%2F%E3%80%8AAvocado%E5%92%8CYouQu%E5%AF%B9%E6%AF%94%E3%80%8B%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A.md"]={toc:[{text:"驱动方式",id:"驱动方式",depth:2},{text:"Avocado",id:"avocado",depth:3},{text:"YouQu",id:"youqu",depth:3},{text:"小结",id:"小结",depth:3},{text:"多种格式的测试报告",id:"多种格式的测试报告",depth:2},{text:"Avocado",id:"avocado-1",depth:3},{text:"YouQu",id:"youqu-1",depth:3},{text:"小结",id:"小结-1",depth:3},{text:"收集系统数据",id:"收集系统数据",depth:2},{text:"批量运行用例",id:"批量运行用例",depth:2},{text:"Avocado",id:"avocado-2",depth:3},{text:"用例标签",id:"用例标签",depth:4},{text:"筛选用例执行",id:"筛选用例执行",depth:4},{text:"YouQu",id:"youqu-2",depth:3},{text:"用例标签",id:"用例标签-1",depth:4},{text:"筛选用例执行",id:"筛选用例执行-1",depth:4},{text:"小结",id:"小结-2",depth:3},{text:"高级日志记录功能",id:"高级日志记录功能",depth:2},{text:"Avocado",id:"avocado-3",depth:3},{text:"YouQu",id:"youqu-3",depth:3},{text:"小结",id:"小结-3",depth:3},{text:"配置",id:"配置",depth:2},{text:"Avocado",id:"avocado-4",depth:3},{text:"YouQu",id:"youqu-4",depth:3},{text:"小结",id:"小结-4",depth:3},{text:"自定义依赖项",id:"自定义依赖项",depth:2},{text:"Avocado",id:"avocado-5",depth:3},{text:"YouQu",id:"youqu-5",depth:3},{text:"小结",id:"小结-5",depth:3},{text:"总结",id:"总结",depth:2}],title:"Avocado和YouQu对比调研报告",headingTitle:"Avocado和YouQu对比调研报告",frontmatter:{Author:"mikigo"}}}}]);