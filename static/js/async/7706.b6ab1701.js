"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["7706"],{8967:function(n,e,s){s.r(e),s.d(e,{default:()=>c});var i=s(2676),d=s(453);function l(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",ul:"ul",code:"code",pre:"pre",h3:"h3",img:"img"},(0,d.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"vue基础",children:["Vue基础",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#vue基础",children:"#"})]}),"\n",(0,i.jsxs)(e.h2,{id:"vue简介",children:["Vue简介",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#vue简介",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Vue.js（通常简称为 Vue）是一个用于构建用户界面的渐进式 JavaScript 框架。它被设计为易于上手的同时，也能在需要时支持高级功能和复杂的应用架构。"}),"\n",(0,i.jsx)(e.p,{children:"核心特点"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"声明式渲染"}),"：Vue 使用声明式语法，使得开发者只需描述应用的状态，Vue 会自动渲染视图。这简化了 DOM 操作的复杂性。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"组件系统"}),"：Vue 允许开发者通过小型、独立的可复用组件构建大型应用。组件可以独立编写，然后组合在一起。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"响应式原理"}),"：Vue 的数据模型是响应式的，当数据变化时，视图会自动更新。这种数据绑定大大减少了 DOM 操作的代码量。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"虚拟 DOM"}),"：Vue 使用虚拟 DOM 来提高渲染性能。在数据变化时，Vue 会先在虚拟 DOM 上进行操作，然后通过对比算法找出实际 DOM 需要变更的最小部分。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"过渡效果"}),"：Vue 提供了过渡效果的封装，使得在插入、更新或移除 DOM 元素时，可以轻松实现动画效果。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"插件和生态系统"}),"：Vue 拥有一个丰富的插件生态系统，包括路由器（Vue Router）和状态管理库（Vuex），以及其他工具和服务。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"单文件组件"}),"：使用 Vue 的单文件组件（.vue 文件），可以将模板、脚本和样式封装在一个文件中，使得组件更加模块化。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"使用vue的三种方式",children:["使用Vue的三种方式",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用vue的三种方式",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["官方文档：",(0,i.jsx)(e.a,{href:"https://cn.vuejs.org",target:"_blank",rel:"noopener noreferrer",children:"https://cn.vuejs.org"})]}),"\n",(0,i.jsx)(e.p,{children:"使用vue的三中方式："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["直接下载并用",(0,i.jsx)(e.code,{children:"<script>"}),"标签导入"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["CDN方式引入：",(0,i.jsx)(e.code,{children:'<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"><\/script>'})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:"npm install vue"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"CDN方式"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'// 对于制作原型或学习，你可以这样使用最新版本：\n<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"><\/script>\n\n//对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：\n<script src="https://cdn.jsdelivr.net/npm/vue@2.6.11"><\/script>\n'})}),"\n",(0,i.jsx)(e.p,{children:"npm 安装的方式"}),"\n",(0,i.jsxs)(e.p,{children:["要使用vue需要先下载安装nodejs，下载地址：",(0,i.jsx)(e.code,{children:"https://nodejs.org/en/"}),"，其自带包管理器：npm。"]}),"\n",(0,i.jsxs)(e.p,{children:["新建一个项目目录，在该项目目录下安装",(0,i.jsx)(e.code,{children:"vue"}),": ",(0,i.jsx)(e.code,{children:"npm install vue --save"})]}),"\n",(0,i.jsxs)(e.h2,{id:"基本语法",children:["基本语法",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本语法",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。"}),"\n",(0,i.jsx)(e.p,{children:"在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。"}),"\n",(0,i.jsxs)(e.h3,{id:"创建vue对象",children:["创建Vue对象",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建vue对象",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["使用 ",(0,i.jsx)(e.code,{children:"new Vue()"})," 创建一个 Vue 实例是使用 Vue.js 框架构建应用的第一步"]}),"\n",(0,i.jsx)(e.p,{children:"当你创建一个新的 Vue 实例时，基本的语法结构如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"var vm = new Vue({\n  // 选项对象\n  el: '#app', // 绑定元素\n  data: { // 数据对象\n    // 数据属性\n  },\n});\n"})}),"\n",(0,i.jsx)(e.p,{children:"el"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是 DOM 元素本身。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"el: '#app' // CSS 选择器\n// 或者\nel: document.getElementById('app') // DOM 元素\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"data"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Vue 实例的数据对象"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"data: {\n  message: 'Hello Vue!',\n  user: {\n    name: 'Alice'\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"html插值",children:["HTML插值",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#html插值",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"格式：{{XXX}}\n功能：用于解析标签体内容。\n写法：xxx是js表达式，且可以直接读取到data中的所有属性。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n</head>\n<body>\n<div id="app">\n	\x3c!-- 模板语法主要作用是插入值， {{ data中的数据属性 }}， 将数据属性渲染到页面 --\x3e\n	<h3>{{ msg }}</h3>\n	<h3>{{ name }}</h3>\n	<h3>{{ 1+1 }}</h3>\n	<h3>{{ 1==1 ? "真的" : "假的" }}</h3>\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n    // 创建Vue\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {   // 可以是函数，也可以是对象\n			// 数据属性\n			// 数据驱动视图，数据更改，视图进行更改\n			msg:"hello vue",\n			name:"123"\n		}\n	});\n\n	app.name = "xx";\n	console.log(app)\n<\/script>\n</body>\n</html>\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025101349157.png",alt:"image-20241025101349157"})}),"\n",(0,i.jsxs)(e.h2,{id:"指令系统",children:["指令系统",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#指令系统",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在vue中提供了一套为(数据驱动视图)更方便的操作，这些操作称为指令系统，以v-xxx表示。"}),"\n",(0,i.jsxs)(e.h3,{id:"v-text和v-html",children:["v-text和v-html",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-text和v-html",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"v-text等价于{{}}插值，内部实现原理 innerText\nv-html内部实现原理 innerHTML"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n</head>\n<body>\n<div id="app">\n	<h3>{{ msg }}</h3>\n	ss\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			msg2:"<a href=\'#\'>跳转</a>",\n		},\n\n		template: ` \n			<div>\n				<h3>{{msg}}</h3>\n				<h2 v-text=\'msg2\'></h2>\n				<p v-html=\'msg2\'></p>\n			</div>\n		`\n		// template的优先级高于el,即出现了template就不会渲染el指定目的地的内容。会渲染到body下\n	});\n<\/script>\n</body>\n</html>\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025101734411.png",alt:"image-20241025101734411"})}),"\n",(0,i.jsxs)(e.h3,{id:"v-if-和-v-else",children:["v-if 和 v-else",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-if-和-v-else",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["根据表达式的布尔值(true/false)进行判断是否",(0,i.jsx)(e.strong,{children:"渲染"}),"/",(0,i.jsx)(e.strong,{children:"显示"}),"该元素"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"v-if"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"v-else"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"v-else-if"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'\x3c!-- 模板部分 --\x3e\n<div v-if="score >= 90">\n  优秀\n</div>\n<div v-else-if="score >= 80 && score < 90">\n  良好\n</div>\n<div v-else-if="score >= 70 && score < 80">\n  一般\n</div>\n<div v-else>\n  不及格\n</div>\n\x3c!-- v-show --\x3e\n<div v-show=\'flag\'>测试v-show</div>\n\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',\n		data: {\n            score: 88,\n            flag:false\n		},\n	});\n<\/script>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"v-if和v-show",children:["v-if和v-show",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-if和v-show",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"两者都可以用来对当前DOM显示或者隐藏，当isShow是true时显示，是false时隐藏。"}),"\n",(0,i.jsx)(e.p,{children:"不过两者隐藏的方式不一致。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"v-if"})," 是一个条件渲染指令，它确保在切换过程中条件块内的事件监听器和子组件被适当地销毁和重建。当条件为假时，元素不会被渲染到 DOM 中；当条件为真时，元素会被渲染到 DOM 中。换句话说，",(0,i.jsx)(e.code,{children:"v-if"})," 是 “真正” 的条件渲染，因为它会根据条件动态地添加或移除 DOM 元素。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"v-show"})," 则简单得多，不管初始条件是什么，元素总是会被渲染到 DOM 中，并且仅仅通过切换 CSS 的 ",(0,i.jsx)(e.code,{children:"display"})," 属性来控制显示和隐藏。当条件为真时，元素的 ",(0,i.jsx)(e.code,{children:"display"})," 属性设置为默认值（通常是 ",(0,i.jsx)(e.code,{children:"display: block"}),"），当条件为假时，",(0,i.jsx)(e.code,{children:"display"})," 属性被设置为 ",(0,i.jsx)(e.code,{children:"display: none"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"性能影响的区别"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"v-if"})," 有更高的切换开销，因为每次切换时它都必须进行 DOM 的添加或删除操作，以及事件监听器和子组件的销毁和重建。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"v-show"})," 有更高的初始渲染开销，因为无论条件如何，元素都会被渲染到 DOM 中。但是，由于它只是简单地切换 CSS 属性，所以在条件频繁变化时，",(0,i.jsx)(e.code,{children:"v-show"})," 的性能通常比 ",(0,i.jsx)(e.code,{children:"v-if"})," 更好。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n		.box{\n            width:300px;\n            height:300px;\n            background-color:red;\n        }\n	</style>\n</head>\n<body>\n<div id="app">\n	<h3>{{ msg }}</h3>\n	ss\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			msg2:"<a href=\'#\'>跳转</a>",\n			isShow:false\n		},\n\n		template: ` \n			<div>\n				<h3>{{msg}}</h3>\n				<h2 v-text=\'msg2\'></h2>\n				<p v-html=\'msg2\'></p>\n				<div class="box" v-if=\'isShow\'></div>\n				<div class="box" v-show=\'isShow\'></div>\n			</div>\n		`\n	});\n<\/script>\n</body>\n</html>\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025102333880.png",alt:"image-20241025102333880"})}),"\n",(0,i.jsx)(e.p,{children:"v-if不仅可以插入数据属性，也可以做运算判断来判断是否显示"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<div id="app">\n	<h3>{{ msg }}</h3>\n	ss\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			msg2:"<a href=\'#\'>跳转</a>",\n			isShow:false\n		},\n\n		template: ` \n			<div>\n				<h3>{{msg}}</h3>\n				<div class="box" v-if=\'Math.random() > 0.5\'>大于0.5</div>\n				<div class="box" v-else>小于0.5</div>\n			</div>\n		`\n	});\n<\/script>\n\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"v-for",children:["v-for",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-for",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Vue 中的 ",(0,i.jsx)(e.code,{children:"v-for"})," 指令用于基于一个数组渲染一个列表。它可以遍历数组或对象，然后为每个元素生成模板中定义的 DOM 结构。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n		.box{\n            width:300px;\n            height:300px;\n            background-color:red;\n        }\n	</style>\n</head>\n<body>\n<div id="app">\n	<h3>{{ msg }}</h3>\n	ss\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			msg2:"<a href=\'#\'>跳转</a>",\n			isShow:false,\n			itemList:[\n				{id:1,name:"面",price:15},\n				{id:2,name:"炒面",price:16},\n				{id:3,name:"烩面",price:17},\n			],\n			per:{\n				name:"zhansan",\n				age:18,\n				hobby:"sleep"\n			}\n		},\n\n		template: ` \n			<div>\n				<h3>{{msg}}</h3>\n				<h2 v-text=\'msg2\'></h2>\n				\n				<ul>\n					<li v-for = \'(item,index) in itemList\'>\n						<h1>{{index}}--菜名：{{ item.name }}</h1>\n						<h1>价格：{{ item.price }}</h1>\n					</li>\n				</ul>\n				<p v-for = \'(value, key) in per\'>{{key}}:{{value}}</p>\n			</div>\n		`\n		// item是itemList中的每个元素，index是元素的索引\n		// 遍历对象(value,key), 第一个是value值，第二个是key值\n	});\n<\/script>\n</body>\n</html>\n\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025103039628.png",alt:"image-20241025103039628"})}),"\n",(0,i.jsxs)(e.h3,{id:"v-bind",children:["v-bind",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-bind",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"用于动态地绑定一个或多个属性，或者一个组件 prop 到表达式。这意味着绑定后的属性值会随着表达式的变化而变化。"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"v-bind"})," 指令的基本语法格式如下："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'v-bind:attribute="expression"\n'})}),"\n",(0,i.jsx)(e.p,{children:"或者使用简写形式："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:':attribute="expression"\n'})}),"\n",(0,i.jsxs)(e.p,{children:["其中 ",(0,i.jsx)(e.code,{children:"attribute"})," 是 HTML 元素的属性名（如 ",(0,i.jsx)(e.code,{children:"href"}),", ",(0,i.jsx)(e.code,{children:"src"}),", ",(0,i.jsx)(e.code,{children:"title"}),", ",(0,i.jsx)(e.code,{children:"class"})," 等），而 ",(0,i.jsx)(e.code,{children:"expression"})," 是一个 Vue.js 表达式，其结果会被计算然后用于更新相应的属性。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n		.box{\n            width:300px;\n            height:300px;\n            background-color:red;\n        }\n        .active{\n        	background-color:yellow;\n        }\n	</style>\n</head>\n<body>\n\n<div id="app">\n	<h3>{{ msg }}</h3>\n	<div>\n		<div class="box" v-bind:class="{ active: isActive }"></div>\n		\x3c!-- isActive为true时，active会加到class中 --\x3e\n		<a v-bind:href="href">百度</a>\n	</div>\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			msg2:"<a href=\'#\'>跳转</a>",\n			isShow:false,\n			isActive:true,\n			href:"http://www.baidu.com",\n		},\n	});\n<\/script>\n</body>\n</html>\n\n\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"v-on",children:["v-on",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-on",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Vue 中的 ",(0,i.jsx)(e.code,{children:"v-on"})," 指令用于监听 DOM 事件，当指定的事件被触发时，可以执行相应的 JavaScript 代码。它是最常用的指令之一，尤其是在构建用户交互界面时。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"v-on"})," 指令的基本语法格式如下："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'v-on:event="handler"\n'})}),"\n",(0,i.jsx)(e.p,{children:"或者使用简写形式："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'@event="handler"\n'})}),"\n",(0,i.jsxs)(e.p,{children:["其中 ",(0,i.jsx)(e.code,{children:"event"})," 是要监听的事件名称（如 ",(0,i.jsx)(e.code,{children:"click"}),", ",(0,i.jsx)(e.code,{children:"submit"}),", ",(0,i.jsx)(e.code,{children:"mouseover"})," 等），而 ",(0,i.jsx)(e.code,{children:"handler"})," 是一个方法名或者内联 JavaScript 代码。"]}),"\n",(0,i.jsxs)(e.p,{children:["通常，",(0,i.jsx)(e.code,{children:"handler"})," 是组件方法中的一个函数名："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<template>\n  <button v-on:click="handler">Increment</button>\n</template>\n\n<script>\nvar app = new Vue({\n		// 在vue中所有的事件都声明在methods中\n		methods:{\n			handler(){\n				this.isShow = !this.isShow;\n			}\n		}\n	});\n<\/script>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["在这个例子中，当按钮被点击时，",(0,i.jsx)(e.code,{children:"increment"})," 方法将被调用。"]}),"\n",(0,i.jsx)(e.p,{children:"点击button会对指定DOM进行隐藏和显示"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n		.box{\n            width:300px;\n            height:300px;\n            background-color:red;\n        }\n        .active{\n        	background-color:yellow;\n        }\n	</style>\n</head>\n<body>\n\n<div id="app">\n	<h3>{{ msg }}</h3>\n	<div>\n		\x3c!-- <div class="box" v-on:click="isShow=false" v-if="isShow"></div> --\x3e   \x3c!-- 直接写处理逻辑--\x3e\n		\x3c!-- <div class="box" v-on:click="showHandler()" v-if="isShow"></div> --\x3e  \x3c!-- 通过函数调用 --\x3e\n		<button v-on:click="showHandler">显示/隐藏</button>\n		<div class="box" v-if="isShow"></div>\n	</div>\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"hello vue",\n			isShow:true,\n		},\n		template: ``,\n		// 在vue中所有的事件都声明在methods中\n		methods:{\n			showHandler(){\n				this.isShow = !this.isShow;\n			}\n		}\n	});\n<\/script>\n</body>\n</html>\n\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025110114885.png",alt:"image-20241025110114885"})}),"\n",(0,i.jsxs)(e.h3,{id:"v-models",children:["v-models",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v-models",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"它用于在输入和应用状态之间创建双向数据绑定。这意味着当用户在输入框中输入内容时，绑定的数据模型会实时更新；反之，当更新了数据模型，绑定的输入也会更新其显示值。"}),"\n",(0,i.jsx)(e.p,{children:"基本语法"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<input v-model="dataProperty">\n'})}),"\n",(0,i.jsxs)(e.p,{children:["这里的 ",(0,i.jsx)(e.code,{children:"dataProperty"})," 是 Vue 实例数据对象中的一个属性。",(0,i.jsx)(e.code,{children:"v-model"})," 会监听用户的输入事件，并在输入框的值变化时更新 ",(0,i.jsx)(e.code,{children:"dataProperty"}),"。"]}),"\n",(0,i.jsx)(e.p,{children:"双向绑定原理"}),"\n",(0,i.jsxs)(e.p,{children:["在 Vue 中，",(0,i.jsx)(e.code,{children:"v-model"})," 是一个语法糖，本质上它是由两个操作组成的："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"v-bind"})," 用于绑定一个 ",(0,i.jsx)(e.code,{children:"value"})," 属性到输入元素上。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"v-on"})," 用于监听输入事件（如 ",(0,i.jsx)(e.code,{children:"input"})," 事件），并在事件触发时更新数据。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["以下是一个等价的例子，展示了 ",(0,i.jsx)(e.code,{children:"v-model"})," 背后的原理："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<input :value="dataProperty" @input="dataProperty = $event.target.value">\n'})}),"\n",(0,i.jsxs)(e.p,{children:["这里的 ",(0,i.jsx)(e.code,{children:":value"})," 是 ",(0,i.jsx)(e.code,{children:"v-bind:value"})," 的缩写，而 ",(0,i.jsx)(e.code,{children:"@input"})," 是 ",(0,i.jsx)(e.code,{children:"v-on:input"})," 的缩写。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n	</style>\n</head>\n<body>\n\n<div id="app">\n	<input type="" name="name" v-model="msg">\n	<p>{{msg}}</p>\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n\n	var app = new Vue({\n		el: \'#app\',  // 目的地，要到哪个标签。\n		data: {\n			msg:"heh",\n		},\n	});\n<\/script>\n</body>\n</html>\n\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025111305188.png",alt:"image-20241025111305188"})}),"\n",(0,i.jsxs)(e.h2,{id:"组件",children:["组件",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"简介",children:["简介",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在 Vue 中，组件是可复用的 UI片段，它封装了特定的功能和外观。可以将组件视为独立的小模块，每个组件负责一部分特定的任务，比如显示一个按钮、一个表单或者一个复杂的页面布局。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"/html_css_js_asset/image-20241025112152866.png",alt:"image-20241025112152866"})}),"\n",(0,i.jsxs)(e.h3,{id:"组件作用",children:["组件作用",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件作用",children:"#"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"提高可维护性：将应用拆分成多个小的组件，使得每个组件的功能相对单一，易于理解和修改。当应用的某个部分出现问题时，可以快速定位到相应的组件进行修复。"}),"\n",(0,i.jsx)(e.li,{children:"可复用性：一旦创建了一个组件，可以在不同的地方重复使用，减少代码重复。例如，一个通用的输入框组件可以在多个页面中使用。"}),"\n",(0,i.jsx)(e.li,{children:"团队协作：不同的开发人员可以同时开发不同的组件，提高开发效率。"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"组件的本质",children:["组件的本质",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件的本质",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"组件的本质是一个带有 template、script 和 style 的自包含模块："}),"\n",(0,i.jsx)(e.p,{children:"template：定义了组件的结构和内容。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"script：包含组件的逻辑，如数据、方法和生命周期钩子。"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"style：定义了组件的样式，可以使用 Scoped CSS 来确保样式仅作用于当前组件。"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"组件分类",children:["组件分类",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件分类",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"组件分为"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"全局组件"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"局部组件"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"全局组件：\n在整个应用中都可以使用的组件。通过在 Vue 实例创建之前使用 Vue.component() 方法进行注册。例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"Vue.component('MyGlobalComponent', {\n  template: '<div>Global Component</div>'\n});\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"局部组件：\n只在特定的组件内部使用的组件。在组件的选项中通过 components 属性进行注册。例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"const App = {\n  components: {\n    'MyLocalComponent': {\n      template: '<div>Local Component</div>'\n    }\n  }\n};\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"局部组件创建和使用"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:'<!DOCTYPE html>\n<html>\n<head>\n	<title></title>\n	<style type="text/css">\n	</style>\n</head>\n<body>\n\n<div id=\'app\'>\n</div>\n\n\n<script type="text/javascript" src="./node_modules/vue/dist/vue.js"><\/script>\n<script type="text/javascript">\n	//1. 声明入口组件，这是局部组件\n	var Vmain = {\n		template:`\n			<div class=\'main\'>\n				这里是入口\n			</div>\n		`\n	}\n	var app = new Vue({\n		el: \'#app\',\n		//3.使用子组件，像标签一样使用子组件，一定是闭合标签\n		template: `<Vmain />`,\n		data: {\n			msg:"heh",\n		},\n		components: {\n			//2. 挂载子组件\n			Vmain:Vmain\n		},\n	});\n<\/script>\n</body>\n</html>\n\n\n'})}),"\n",(0,i.jsx)(e.p,{children:"使用全局组件"}),"\n",(0,i.jsx)(e.p,{children:"单文件组件是 Vue 中推荐的组件编写方式，它将一个组件的模板、脚本和样式写在一个以 .vue 为后缀的文件中"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"<template>\n  <div>\n    <h1>{{ message }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!'\n    };\n  }\n};\n<\/script>\n\n<style scoped>\nh1 {\n  color: blue;\n}\n</style>\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"全局组件注册，注册后用法和局部组件一样"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"import MyGlobalComponent from './MyGlobalComponent.vue';\n\nVue.component('MyGlobalComponent', MyGlobalComponent);\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"组件命名格式",children:["组件命名格式",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件命名格式",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"组件的命名可以使用驼峰式命名法或短横线分隔命名法。在注册组件时，需要保持命名的一致性。例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",children:"// 驼峰式命名\nconst MyComponent = { /*... */ };\nVue.component('MyComponent', MyComponent);\n\n// 短横线分隔命名\nconst my-component = { /*... */ };\nVue.component('my-component', my-component);\n\n"})})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let c=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2F%E5%89%8D%E5%90%8E%E7%AB%AF%2FVue%E5%9F%BA%E7%A1%80.md"]={toc:[{text:"Vue简介",id:"vue简介",depth:2},{text:"使用Vue的三种方式",id:"使用vue的三种方式",depth:2},{text:"基本语法",id:"基本语法",depth:2},{text:"创建Vue对象",id:"创建vue对象",depth:3},{text:"HTML插值",id:"html插值",depth:3},{text:"指令系统",id:"指令系统",depth:2},{text:"v-text和v-html",id:"v-text和v-html",depth:3},{text:"v-if 和 v-else",id:"v-if-和-v-else",depth:3},{text:"v-if和v-show",id:"v-if和v-show",depth:3},{text:"v-for",id:"v-for",depth:3},{text:"v-bind",id:"v-bind",depth:3},{text:"v-on",id:"v-on",depth:3},{text:"v-models",id:"v-models",depth:3},{text:"组件",id:"组件",depth:2},{text:"简介",id:"简介",depth:3},{text:"组件作用",id:"组件作用",depth:3},{text:"组件的本质",id:"组件的本质",depth:3},{text:"组件分类",id:"组件分类",depth:3},{text:"组件命名格式",id:"组件命名格式",depth:3}],title:"Vue基础",headingTitle:"Vue基础",frontmatter:{}}}}]);