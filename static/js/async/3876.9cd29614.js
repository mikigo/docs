"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3876"],{1821:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(2676),i=s(453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",img:"img",h3:"h3",ul:"ul",li:"li",h4:"h4",strong:"strong",em:"em"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"fastapi8小时入门版",children:["FastAPI—8小时入门版",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fastapi8小时入门版",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"一简介",children:["一、简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一简介",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:'FastAPI 是一个 Web 服务框架，其主要特点就是"快"。'}),"\n",(0,r.jsx)(n.p,{children:"在 Python Web 服务领域比较知名的就是 Django、Flask，但其性能一直为大家所诟病，以至于很多大型项目会选择基于 Go 语言的 Web 服务框架，比如 beego。而 Django、Flask 较多应用于一些小型网站或者一些个人博客类网站。"}),"\n",(0,r.jsx)(n.p,{children:"应该说，Python 在 Web 后端服务领域是失败的，而 FastAPI 的出现或许有可能为 Python 扳回一局。"}),"\n",(0,r.jsx)(n.p,{children:"FastAPI 之所以能突破 Python 语言本身所带来的性能瓶颈，是因为其主要采用了异步的设计思路，无论是源码还是示例，都有大量协程的写法。"}),"\n",(0,r.jsx)(n.p,{children:"协程，是 Python 唯一能突破线程 GIL（全局解释器锁）、突破进程 CPU 数量限制的高阶编码模式，它使得任务间的切换能够像调用函数一样轻松。协程也是 Python 里面最不好理解的内容之一。"}),"\n",(0,r.jsx)(n.p,{children:"但是没关系，FastAPI 通过非常精良的设计让你不用真正弄懂协程就能轻松使用它。"}),"\n",(0,r.jsxs)(n.h2,{id:"二安装",children:["二、安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二安装",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["系统环境: ",(0,r.jsx)(n.code,{children:"deepin"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"$ pip3 install fastapi\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"安装 ASGI 服务器，用于启动服务"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:'$ pip3 install "uvicorn[standard]"\n\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"三简单的例子",children:["三、简单的例子",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三简单的例子",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"定义一个接口，返回简单的 json 响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI\n\napp = FastAPI()\n"})}),"\n",(0,r.jsx)(n.p,{children:"这是固定写法，后面的内容就不重复写这两行了；"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.get("/")\ndef hello():\n    return {"msg": "hello mikigo"}\n'})}),"\n",(0,r.jsx)(n.p,{children:"在终端通过命令启动服务："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"uvicorn main:app --reload\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在本机浏览器访问：",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000/%EF%BC%9B",target:"_blank",rel:"noopener noreferrer",children:"http://127.0.0.1:8000/；"})]}),"\n",(0,r.jsxs)(n.p,{children:["我个人喜欢在 ",(0,r.jsx)(n.code,{children:"py"})," 文件里面写启动："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\n\nfrom fastapi import FastAPI\nimport uvicorn\n\napp = FastAPI()\n\n@app.get("/")\nasync def hello():\n    return {"msg": "hello mikigo"}\n\nif __name__ == \'__main__\':\n    uvicorn.run(\n        app="main:app",\n        host=os.popen("hostname -I").read().split(" ")[0],  # 动态获取本机IP,如果不传默认为127.0.0.1\n        port=5000, # 指定一个测试用端口\n        reload=True\n    )\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样直接运行 ",(0,r.jsx)(n.code,{children:"py"})," 脚本："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/demo.png",alt:"demo"})}),"\n",(0,r.jsxs)(n.h3,{id:"openapi-文档",children:["OpenAPI 文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#openapi-文档",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["FastAPI 的一个特点就是自带接口文档，只需要在 url 后面加 ",(0,r.jsx)(n.code,{children:"docs"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/docs.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["你如果不喜欢 Swagger 风格的文档，可以将 ",(0,r.jsx)(n.code,{children:"docs"})," 改成 ",(0,r.jsx)(n.code,{children:"redoc"}),"，FastAPI 默认携带两种风格的接口文档。"]}),"\n",(0,r.jsxs)(n.h2,{id:"四pydantic",children:["四、Pydantic",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四pydantic",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"FastAPI 是借助 Pydantic 来进行类型声明的，主要有两个用途："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"对请求体和响应体的参数类型进行声明；"}),"\n",(0,r.jsx)(n.li,{children:"在编辑器里面享受代码补全的乐趣；"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"使用过 Python 的 typing 的同学应该知道【类型标注】，它可以校验参数及返回的类型，使得代码更加严禁，且更具有可读性。"}),"\n",(0,r.jsx)(n.p,{children:"Pydantic 提供了更加强大的类型定义和更加友好的错误提示功能。即使不用 FastAPI，在其他编码中你也可以很有效的使用它。"}),"\n",(0,r.jsx)(n.p,{children:"使用举例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from datetime import date\nfrom pydantic import BaseModel\n\ndef main(user_id: str):\n    return user_id\n\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n"})}),"\n",(0,r.jsx)(n.p,{children:"传递参数进去："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'my_user: User = User(id=3, name="mikigo", joined="20230303")\n\nsecond_user_data = {\n    "id": 4,\n    "name": "Mary",\n    "joined": "2018-11-30",\n}\n\nmy_second_user: User = User(**second_user_data)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"from pydantic import BaseModel"})," 里面的 ",(0,r.jsx)(n.code,{children:"BaseModel"})," 记住，通常都是继承这个类来写我们的自定义类型；"]}),"\n",(0,r.jsxs)(n.p,{children:["将 ",(0,r.jsx)(n.code,{children:"Pydantic"})," 数据类型转换成 JSON："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from fastapi.encoders import jsonable_encoder\n\njson_user = jsonable_encoder(my_user)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"五参数",children:["五、参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"FastAPI 是 RESTful 风格的框架，后面例子的接口请求我都使用 Postman 来做，这个只是个人习惯，你可以使用接口文档里面提供的【Try it out】接口调试功能，也可以使用 requests 这类的 HTTP 库进行接口请求，效果是一样的。"}),"\n",(0,r.jsxs)(n.h3,{id:"1路径参数",children:["1、路径参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1路径参数",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"11-普通路径参数",children:["1.1 普通路径参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-普通路径参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"声明路径参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.get("/items/{item_id}")\nasync def read_item(item_id):\n    return {"item_id": item_id}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["路径参数 ",(0,r.jsx)(n.code,{children:"item_id"})," 可以传入到函数中，比如：",(0,r.jsx)(n.a,{href:"http://10.8.13.224:5000/items/mikigo",target:"_blank",rel:"noopener noreferrer",children:"http://10.8.13.224:5000/items/mikigo"})]}),"\n",(0,r.jsx)(n.p,{children:"传递参数为：mikigo，响应如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"item_id":"mikigo"}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"12-有类型的路径参数",children:["1.2 有类型的路径参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-有类型的路径参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"声明路径参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.get("/items/{item_id}")\nasync def read_item(item_id: int):\n    return {"item_id": item_id}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["区别是给参数 ",(0,r.jsx)(n.code,{children:"item_id"})," 指定了一个类型 ",(0,r.jsx)(n.code,{children:"int"}),"；"]}),"\n",(0,r.jsxs)(n.p,{children:["如果还是传递参数为：mikigo，",(0,r.jsx)(n.a,{href:"http://10.8.13.224:5000/items/mikigo",target:"_blank",rel:"noopener noreferrer",children:"http://10.8.13.224:5000/items/mikigo"})," 会报错："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "detail": [\n        {\n            "loc": [\n                "path",\n                "item_id"\n            ],\n            "msg": "value is not a valid integer",\n            "type": "type_error.integer"\n        }\n    ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["必须要给一个数字才行 ",(0,r.jsx)(n.a,{href:"http://10.8.13.224:5000/items/520",target:"_blank",rel:"noopener noreferrer",children:"http://10.8.13.224:5000/items/520"})," 响应："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "item_id": 520\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"这样就完成了路径参数的数据校验；"}),"\n",(0,r.jsxs)(n.h3,{id:"2查询参数",children:["2、查询参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2查询参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:'不属于路径参数的其他函数参数，会被被自动解释为"查询字符串"参数。'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.get("/items/")\nasync def read_item(name: str = ""):\n    return {"name" : name}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["查询参数的键值在 URL 的 ",(0,r.jsx)(n.code,{children:"？"})," 之后，并以 ",(0,r.jsx)(n.code,{children:"&"})," 符号分隔，就和我们理解的普通 GET 请求参数传递方式是一样的；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/items/?name=mikigo\n"})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "name": "mikigo"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["注意我们在 ",(0,r.jsx)(n.code,{children:'read_item(name: str = "")'})," 给了一个默认值，说明参数是可选的（不传参也可以），如果 直接用",(0,r.jsx)(n.code,{children:"read_item(name: str)"})," 说明参数是必传的，否则会报错。"]}),"\n",(0,r.jsxs)(n.h3,{id:"3请求体",children:["3、请求体",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3请求体",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"请求体"}),"是客户端发送给 API 的数据。",(0,r.jsx)(n.strong,{children:"响应体"}),"是 API 发送给客户端的数据。"]}),"\n",(0,r.jsx)(n.p,{children:"一般我们说GET方法没有请求体，POST、PUT等方法才有请求体。"}),"\n",(0,r.jsx)(n.p,{children:"举例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import Union\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n@app.post("/items/")\nasync def post_test(item: Item):\n    return {"data": item}\n'})}),"\n",(0,r.jsx)(n.p,{children:"发一个 POST 请求，参数为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "name": "mikigo",\n    "description": "搞事情"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"返回值："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "data": {\n        "name": "mikigo",\n        "description": "搞事情"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4内建参数类型",children:["4、内建参数类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4内建参数类型",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"41query",children:["4.1、Query",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41query",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Query 一般是用在查询参数里面："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Query\n\n@app.get("/query/")\nasync def query_test(\n        name: Union[str, None] = Query(default=None, max_length=10)\n):\n    return {"name": name}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Query(default=None, max_length=10)"})," 里面:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"default=None"})," 表示参数可选，默认值为 None，和 ",(0,r.jsx)(n.code,{children:"name: str = None"})," 写法是一个意思；"]}),"\n",(0,r.jsxs)(n.p,{children:["如果想要参数必填：",(0,r.jsx)(n.code,{children:"default=..."}),"（没错哈，就是三个点，三个点在 Python 里面是一个省略对象）；"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"max_length=10"})," 定义了参数的最大长度；"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Query"})," 支持的参数还有点多，感兴趣可以一个个试："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def Query(\n    default: Any = Undefined,\n    *,\n    alias: Optional[str] = None,\n    title: Optional[str] = None,\n    description: Optional[str] = None,\n    gt: Optional[float] = None,\n    ge: Optional[float] = None,\n    lt: Optional[float] = None,\n    le: Optional[float] = None,\n    min_length: Optional[int] = None,\n    max_length: Optional[int] = None,\n    regex: Optional[str] = None,\n    example: Any = Undefined,\n    examples: Optional[Dict[str, Any]] = None,\n    deprecated: Optional[bool] = None,\n    include_in_schema: bool = True,\n    **extra: Any,\n) -> Any:\n    pass\n"})}),"\n",(0,r.jsx)(n.p,{children:"请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/query?name=mikigo\n"})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "name": "mikigo"\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"42path",children:["4.2、Path",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42path",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Path 一般是用在路径参数里面："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Path\n\n@app.get("/path/{path_id}")\nasync def path_test(\n        path_id: int = Path(default=...),\n        name: Union[str, None] = Query(default=..., max_length=10)\n):\n    results = {"path_id": path_id}\n    if name:\n        results.update({"name": name})\n    return results\n'})}),"\n",(0,r.jsxs)(n.p,{children:["可以看的出来 ",(0,r.jsx)(n.code,{children:"Path(default=..., max_length=10)"})," 和 Query 用法几乎一样，不是几乎，就是一样的。"]}),"\n",(0,r.jsx)(n.p,{children:"请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/path/10?name=mikigo\n"})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "path_id": 10,\n    "name": "mikigo"\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"43body",children:["4.3、Body",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43body",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Body 一般是用于请求体："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Body\n\n@app.post("/body/")\nasync def body_test(\n        item: Item,\n        age: int = Body(default=None, gt=0)\n):\n    results = {"data": item}\n    if age:\n        results.update({"age": age})\n    return {"results": results}\n'})}),"\n",(0,r.jsx)(n.p,{children:"请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/body\n"})}),"\n",(0,r.jsx)(n.p,{children:"需要构造请求体："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "item": {\n    "name": "string",\n    "description": "string"\n  },\n  "age": 2\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "results": {\n        "data": {\n            "name": "string",\n            "description": "string"\n        },\n        "age": 2\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"44field",children:["4.4、Field",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44field",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Field 一般用于请求体的字段，对请求体的参数做进一步的约束，它是从 pydantic 导入的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pydantic import Field\n\nclass FieldItem(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title="deepin", max_length=300\n    )\n\n@app.post("/field/")\nasync def field_test(\n        item: FieldItem,\n        age: int = Body(default=None, gt=0)\n):\n    results = {"data": item}\n    if age:\n        results.update({"age": age})\n    return {"field": results}\n'})}),"\n",(0,r.jsx)(n.p,{children:"请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/field\n"})}),"\n",(0,r.jsx)(n.p,{children:"构造请求体如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "item": {\n    "name": "mikigo",\n    "description": "1234"\n  },\n  "age":30\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "field": {\n        "data": {\n            "name": "mikigo",\n            "description": "1234"\n        },\n        "age": 30\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"45cookie",children:["4.5、Cookie",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#45cookie",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"先设置 cookie："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.post("/cookieset")\nasync def cookie_set(response: Response):\n    response.set_cookie(key="cookie1", value="mikigocookie11111")\n    return {"cookie_id": "ok"}\n'})}),"\n",(0,r.jsx)(n.p,{children:"请求一下，查看 cookie 设置是否成功:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/set_cookie.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再定义 Cookie 参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Cookie\n\n@app.get("/cookieget")\nasync def cookie_get(\n        ads_id: Union[str, None] = Cookie(default=None)\n):\n    return {"ads_id": ads_id}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Cookie"})," 参数的结构与声明 ",(0,r.jsx)(n.code,{children:"Query"})," 参数和 ",(0,r.jsx)(n.code,{children:"Path"})," 参数时相同"]}),"\n",(0,r.jsx)(n.p,{children:"请求一把："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/get_cookie.png",alt:""})}),"\n",(0,r.jsxs)(n.h4,{id:"46header",children:["4.6、Header",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#46header",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Header"})," 使用和",(0,r.jsx)(n.code,{children:"Path"}),", ",(0,r.jsx)(n.code,{children:"Query"})," and ",(0,r.jsx)(n.code,{children:"Cookie"})," 一样;"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Header\n\n@app.get("/header")\nasync def header_test(user_agent: Union[str, None] = Header(default=None)):\n    return {"User-Agent": user_agent}\n'})}),"\n",(0,r.jsx)(n.p,{children:"请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"http://10.8.13.224:5000/header\n"})}),"\n",(0,r.jsx)(n.p,{children:"响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "User-Agent": "PostmanRuntime/7.31.1"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Header"})," 有个特殊的参数 ",(0,r.jsx)(n.code,{children:"convert_underscores: bool = True"}),"；"]}),"\n",(0,r.jsxs)(n.p,{children:['因为大多数标准的headers用 "连字符" 分隔，因此默认将参数名称的字符从下划线 (',(0,r.jsx)(n.code,{children:"_"}),") 转换为连字符 (",(0,r.jsx)(n.code,{children:"-"}),") ；"]}),"\n",(0,r.jsxs)(n.h2,{id:"六响应",children:["六、响应",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#六响应",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1响应限制",children:["1、响应限制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1响应限制",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Pydantic"})," 不仅可以对请求参数进行校验和限制，对响应同样可以；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n@app.post("/rsp_model/", response_model=Item)\nasync def response_model_test(item: Item) -> Any:\n    return item\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在装饰器 ",(0,r.jsx)(n.code,{children:"@app.post"})," 里面有个参数 ",(0,r.jsx)(n.code,{children:"response_model"})," 可以声明响应的模型；"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"response_model=Item"})," 表示响应信息也是 ",(0,r.jsx)(n.code,{children:"Item"})," 的类型，API 文档里面也会有响应信息的示例，否则就是空的；"]}),"\n",(0,r.jsxs)(n.h3,{id:"2响应状态码",children:["2、响应状态码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2响应状态码",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.post("/status", status_code=201)\nasync def status_code_test(name: str):\n    return {"name": name}\n'})}),"\n",(0,r.jsx)(n.p,{children:"请求成功，返回状态码为：201;"}),"\n",(0,r.jsx)(n.p,{children:"API 文档里面也会有展示；"}),"\n",(0,r.jsxs)(n.p,{children:["fastapi 提供了一个 ",(0,r.jsx)(n.code,{children:"status"})," 模块来表示状态码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import status\n\n@app.post("/status", status_code=status.HTTP_201_CREATED)\nasync def status_code_test(name: str):\n    return {"name": name}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"status.HTTP_201_CREATED"})," 这种方式更容易理解状态码的意思，因此我个人更推荐这种写法。"]}),"\n",(0,r.jsxs)(n.h3,{id:"3返回错误信息",children:["3、返回错误信息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3返回错误信息",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import HTTPException\nfrom fastapi import status\n\nnames = {"one": "mikigo"}\n\n@app.get("/resp_info/{name_id}")\nasync def resp_info(name_id: str):\n    if name_id not in names:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Item not found")\n    return {"item": names[name_id]}\n'})}),"\n",(0,r.jsx)(n.p,{children:"发送请求："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/resp_info.png",alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"七表单及文件",children:["七、表单及文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#七表单及文件",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1form表单",children:["1、Form表单",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1form表单",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["常见的，登录接口会提交 ",(0,r.jsx)(n.code,{children:"Form"})," 表单："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Form\n\n@app.post("/login/")\nasync def login(username: str = Form(), password: str = Form()):\n    return {"username": username}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["重启服务，厚礼谢，你会发现报错，提示要安装依赖：",(0,r.jsx)(n.code,{children:"python-multipart"}),"，啥也别问直接装："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"pip3 install python-multipart\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"再重启服务之后，通过表单字段发送，注意不能用 JSON 发送；"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/form.png",alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"2上传文件",children:["2、上传文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2上传文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["上传文件功能也依赖：",(0,r.jsx)(n.code,{children:"python-multipart"}),"；"]}),"\n",(0,r.jsxs)(n.h4,{id:"21file",children:["2.1、File",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21file",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import File\n\n@app.post("/files/")\nasync def create_file(file: bytes = File()):\n    return {"file_size": len(file)}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"File"})," 是直接继承自 ",(0,r.jsx)(n.code,{children:"Form"})," 的类，把文件当做表单上传，源码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class File(Form):\n    def __init__():\n        ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["以 ",(0,r.jsx)(n.code,{children:"bytes"})," 形式读取和接收文件内容，这种方式把文件的所有内容都存储在内存里，适用于小型文件。"]}),"\n",(0,r.jsxs)(n.h4,{id:"22uploadfile",children:["2.2、UploadFile",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22uploadfile",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import UploadFile\n\n@app.post("/uploadfile/")\nasync def create_upload_file(file: UploadFile):\n    return {"filename": file.filename}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"UploadFile"})," 与 ",(0,r.jsx)(n.code,{children:"bytes"})," 相比更好一点，即使是大文件也不会占用所有内存，因为它内部有个文件最大限制，超过就会先存入磁盘；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class UploadFile:\n    """\n    An uploaded file included as part of the request data.\n    """\n\n    spool_max_size = 1024 * 1024\n    file: typing.BinaryIO\n    headers: "Headers"\n\n    def __init__(\n        self,\n        filename: str,\n        file: typing.Optional[typing.BinaryIO] = None,\n        content_type: str = "",\n        *,\n        headers: "typing.Optional[Headers]" = None,\n    ) -> None:\n        self.filename = filename\n        self.content_type = content_type\n        if file is None:\n            self.file = tempfile.SpooledTemporaryFile(max_size=self.spool_max_size)  # type: ignore[assignment]  # noqa: E501\n        else:\n            self.file = file\n        ... # 省略部分代码\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"spool_max_size"})," 就是限制文件的大小；"]}),"\n",(0,r.jsx)(n.p,{children:"通过上面源码的构造函数可以看出有 2 个必传参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filename"}),"：上传文件名字符串（",(0,r.jsx)(n.code,{children:"str"}),"），例如， ",(0,r.jsx)(n.code,{children:"mikigo.jpg"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content_type"}),"：内容类型（MIME 类型 / 媒体类型）字符串（",(0,r.jsx)(n.code,{children:"str"}),"），例如，",(0,r.jsx)(n.code,{children:"image/jpeg"}),"；"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果 file 参数不传，默认为 None，那么实际调用的是 ",(0,r.jsx)(n.code,{children:"tempfile"})," 模块子的 ",(0,r.jsx)(n.code,{children:"SpooledTemporaryFile"})," ，这个类会将数据缓存在内存中直到文件大小超过 ",(0,r.jsx)(n.code,{children:"max_size"}),"，这时文件内容会被写入磁盘；"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"UploadFile"})," 源码里面有这几个方法："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class UploadFile:\n    \n    # 省略部分代码\n\n    async def write(self, data: bytes) -> None:\n        if self._in_memory:\n            self.file.write(data)\n        else:\n            await run_in_threadpool(self.file.write, data)\n\n    async def read(self, size: int = -1) -> bytes:\n        if self._in_memory:\n            return self.file.read(size)\n        return await run_in_threadpool(self.file.read, size)\n\n    async def seek(self, offset: int) -> None:\n        if self._in_memory:\n            self.file.seek(offset)\n        else:\n            await run_in_threadpool(self.file.seek, offset)\n\n    async def close(self) -> None:\n        if self._in_memory:\n            self.file.close()\n        else:\n            await run_in_threadpool(self.file.close)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这些方法都是异步(",(0,r.jsx)(n.code,{children:"async"}),")方法："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"write(data)"}),"：把 ",(0,r.jsx)(n.code,{children:"data"})," （",(0,r.jsx)(n.code,{children:"str"})," 或 ",(0,r.jsx)(n.code,{children:"bytes"}),"）写入文件；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"read(size)"}),"：按指定数量的字节或字符（",(0,r.jsx)(n.code,{children:"size"})," (",(0,r.jsx)(n.code,{children:"int"}),")）读取文件内容；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"seek(offset)"}),"：移动至文件 ",(0,r.jsx)(n.code,{children:"offset（int）"}),"字节处的位置；","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["例如，",(0,r.jsx)(n.code,{children:"await myfile.seek(0)"})," 移动到文件开头；"]}),"\n",(0,r.jsxs)(n.li,{children:["执行 ",(0,r.jsx)(n.code,{children:"await myfile.read()"})," 后，需再次读取已读取内容时，这种方法特别好用；"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"close()"}),"：关闭文件。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["使用异步的时候用 ",(0,r.jsx)(n.code,{children:"await"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"contents = await myfile.read()\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"八依赖项",children:["八、依赖项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#八依赖项",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["依赖项也叫“依赖注入”，使用 ",(0,r.jsx)(n.code,{children:"Depends"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Depends\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {"q": q, "skip": skip, "limit": limit}\n\n\n@app.get("/dps")\nasync def depends_test(commons: dict = Depends(common_parameters)):\n    return commons\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Depends"})," 需要传入一个可调用对象，一般就给函数对象，也就是依赖函数，注意不是调用函数，没有括号；"]}),"\n",(0,r.jsx)(n.p,{children:"依赖函数的参数和查询参数的一样；"}),"\n",(0,r.jsxs)(n.h2,{id:"九安全性",children:["九、安全性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#九安全性",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1oauth2",children:["1、OAuth2",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1oauth2",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["功能也依赖：",(0,r.jsx)(n.code,{children:"python-multipart"}),"；"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"OAuth2"})," 主要用于验证用户身份："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi.security import OAuth2PasswordBearer\nfrom fastapi import Depends\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\n@app.get("/auth/")\nasync def auth_test(token: str = Depends(oauth2_scheme)):\n    return {"token": token}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["查看 ",(0,r.jsx)(n.code,{children:"OpenAPI"})," 文档你会发现，右上角有个 ",(0,r.jsx)(n.strong,{children:"Authorize"})," 按钮，点它："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/auth.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["弹出授权表单，输入 ",(0,r.jsx)(n.code,{children:"username"})," 与 ",(0,r.jsx)(n.code,{children:"password"})," 及其它可选字段；"]}),"\n",(0,r.jsx)(n.p,{children:"这个是 FastAPI 的安全工具；"}),"\n",(0,r.jsxs)(n.h3,{id:"2获取当前用户",children:["2、获取当前用户",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2获取当前用户",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import Union\n\nfrom fastapi import Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\ndef fake_decode_token(token):\n    return User(\n        username=token + "fakedecoded", email="john@example.com", full_name="John Doe"\n    )\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n@app.get("/users/me")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n'})}),"\n",(0,r.jsxs)(n.p,{children:["先创建一个请求体模型 ",(0,r.jsx)(n.code,{children:"User"}),"；"]}),"\n",(0,r.jsxs)(n.p,{children:["再创建一个 ",(0,r.jsx)(n.code,{children:"get_current_user"})," 依赖项，它的依赖项是 ",(0,r.jsx)(n.code,{children:"oauth2_scheme"}),"，这里接受一个 ",(0,r.jsx)(n.code,{children:"token"})," 字符串，在给另外一个函数 ",(0,r.jsx)(n.code,{children:"fake_decode_token"})," 进行解码后，返回 user 对象；"]}),"\n",(0,r.jsxs)(n.p,{children:["最后，通过 ",(0,r.jsx)(n.code,{children:"read_users_me"})," 依赖项，返回当前用户；"]}),"\n",(0,r.jsx)(n.p,{children:"这里实际是一个嵌套依赖的关系。"}),"\n",(0,r.jsxs)(n.h2,{id:"十中间件",children:["十、中间件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#十中间件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"中间件就相当于一个钩子函数，在每个请求被处理之前，以及没饿响应返回之前工作。工作原理类似于 Python 里面的属性拦截器就可以理解。"}),"\n",(0,r.jsxs)(n.h3,{id:"1创建中间件",children:["1、创建中间件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1创建中间件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用装饰器 ",(0,r.jsx)(n.code,{children:'@app.middleware("http")'})," ，固定用法，记住就好了；"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import time\n\nfrom fastapi import Request\n\n@app.middleware("http")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)  # 路径操作\n    process_time = time.time() - start_time\n    response.headers["X-Process-Time"] = str(process_time)\n    return response\n'})}),"\n",(0,r.jsx)(n.p,{children:"参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"request，FastAPI 的请求对象；"}),"\n",(0,r.jsxs)(n.li,{children:["一个函数 ",(0,r.jsx)(n.code,{children:"call_next"})," 它将接收 ",(0,r.jsx)(n.code,{children:"request"})," 作为参数；","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["这个函数将 ",(0,r.jsx)(n.code,{children:"request"})," 传递给相应的 路径操作；"]}),"\n",(0,r.jsxs)(n.li,{children:["然后它将返回由相应的",(0,r.jsx)(n.em,{children:"路径操作"}),"生成的 ",(0,r.jsx)(n.code,{children:"response"}),"；"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["然后你可以在返回 ",(0,r.jsx)(n.code,{children:"response"})," 前进一步修改它；"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2跨域资源共享cors",children:["2、跨域资源共享(CORS)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2跨域资源共享cors",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在同一个IP地址中，但使用不同的协议或者端口，就是不同的域；"}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"CORSMiddleware"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi.middleware.cors import CORSMiddleware\n\norigins = [\n    "http://localhost",\n    "http://localhost:8080",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  #  一个允许跨域请求的源列表;\n    allow_credentials=True, # 指示跨域请求支持 cookies,默认是 False\n    allow_methods=["*"],  # 一个允许跨域请求的 HTTP 方法列表;\n    allow_headers=["*"],  # 一个允许跨域请求的 HTTP 请求头列表\n)\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"十一sql数据库",children:["十一、SQL数据库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#十一sql数据库",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"FastAPI 使用数据一般采用 Python 社区最流行的 ORM 库：SQLAlchemy；"}),"\n",(0,r.jsx)(n.p,{children:"如果你会用 Django 的 model，那基本上就很简单了；"}),"\n",(0,r.jsxs)(n.h3,{id:"1创建数据库工程文件",children:["1、创建数据库工程文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1创建数据库工程文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"先创建一个数据库的目录，里面包含这些文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:".\n└── sql_app\n    ├── __init__.py\n    ├── crud.py\n    ├── database.py\n    ├── main.py\n    ├── models.py\n    └── schemas.py\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2安装",children:["2、安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2安装",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"安装 SQLAlchemy 非常简单："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"pip3 install SQLAlchemy\n\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3创建sqlalchemy部件",children:["3、创建SQLAlchemy部件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3创建sqlalchemy部件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy 支持多种常用的数据类型："}),"\n",(0,r.jsx)(n.p,{children:"以 sqlite 举例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sql_app/database.py\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# 定义数据库的URL\nSQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"  \n# 创建 SQLAlchemy 引擎\nengine = create_engine(  \n    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False} \n)\n# 使用sessionmaker创建一个会话实例\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# 创建一个Base类，用这个类继承，来创建每个数据库模型或类\nBase = declarative_base()\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4创建数据库模型",children:["4、创建数据库模型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4创建数据库模型",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sql_app/models.py\n\n# 导入一些数据库类型,用于定义一些字段的类型\nfrom sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n# 关系\nfrom sqlalchemy.orm import relationship\n# 导入部件Base类用于创建数据库模型\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = "users"\n	\n    # 每一个都代表其相应数据库表中的一列\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n	# 表示该表与其他相关的表中的值\n    items = relationship("Item", back_populates="owner")\n\n\nclass Item(Base):\n    __tablename__ = "items"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey("users.id"))\n    # 表示该表与其他相关的表中的值\n    owner = relationship("User", back_populates="items")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当访问 ",(0,r.jsx)(n.code,{children:"my_user.items"})," 时，SQLAlchemy 实际上会从 ",(0,r.jsx)(n.code,{children:"items"})," 表中的获取一批记录并在此处填充进去。"]}),"\n",(0,r.jsx)(n.p,{children:"注意，数据库模型都是将类型作为参数传给 Column 来定义的，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"email = Column(String)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"5创建-pydantic-模型",children:["5、创建 Pydantic 模型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5创建-pydantic-模型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Pydantic 模型和数据库模型的属性一致："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# sql_app/schemas.py\n\nfrom typing import List, Union\nfrom pydantic import BaseModel\n# ========== item的Pydantic模型 ============\n# models里面的Item也有title和description属性\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\nclass ItemCreate(ItemBase):\n    pass\n# 创建用于读取/返回的Pydantic模型/模式\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n	# 为 Pydantic 提供配置 \n    class Config:\n        orm_mode = True\n        \n# ========== user的Pydantic模型 ============\n# models里面的User也有email属性\nclass UserBase(BaseModel):\n    email: str\n# 在创建时有一个password属性\nclass UserCreate(UserBase):\n    password: str\n# 创建用于读取/返回的Pydantic模型/模式\n# 读取用户（从 API 返回）时将使用不包括password的User Pydantic模型\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n	# 为 Pydantic 提供配置\n    class Config:\n        # orm_mode将告诉 Pydantic模型读取数据，即它不是一个dict，而是一个 ORM 模型\n        orm_mode = True\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"6crud工具",children:["6、CRUD工具",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6crud工具",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["用来与数据库中的数据进行交互，",(0,r.jsx)(n.strong,{children:"CRUD"}),"分别为：",(0,r.jsx)(n.strong,{children:"增加"}),"、",(0,r.jsx)(n.strong,{children:"查询"}),"、",(0,r.jsx)(n.strong,{children:"更改"}),"和",(0,r.jsx)(n.strong,{children:"删除"}),"，即增删改查；"]}),"\n",(0,r.jsxs)(n.h4,{id:"61读取数据",children:["6.1、读取数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61读取数据",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sql_app/crud.py\n\nfrom sqlalchemy.orm import Session\n# 导入SQLAlchemy模型和Pydantic模型\nfrom . import models, schemas\n\ndef get_user(db: Session, user_id: int):\n    """通过ID查询用户"""\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\ndef get_user_by_email(db: Session, email: str):\n    """通过email查询用户"""\n    return db.query(models.User).filter(models.User.email == email).first()\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    """获取所有用户"""\n    return db.query(models.User).offset(skip).limit(limit).all()\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    """获取所有项目"""\n    return db.query(models.Item).offset(skip).limit(limit).all()\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"62创建数据",children:["6.2、创建数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#62创建数据",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sql_app/crud.py\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    """创建用户"""\n    fake_hashed_password = user.password + "notreallyhashed"\n    # 获取数据库模型实例\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    # add方法添加数据\n    db.add(db_user)\n    # 提交\n    db.commit()\n    # 刷新\n    db.refresh(db_user)\n    return db_user\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"7主程序",children:["7、主程序",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7主程序",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# sql_app/main.py\n\nfrom typing import List\n\nfrom fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# 创建依赖项,每个请求有一个独立的数据库会话/连接（SessionLocal）\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# SQLAlchemy模型通讯需要一些等待时间,不能直接使用async和await语句；\n@app.post("/users/", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail="Email already registered")\n    return crud.create_user(db=db, user=user)\n\n@app.get("/users/", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n@app.get("/users/{user_id}", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail="User not found")\n    return db_user\n\n@app.post("/users/{user_id}/items/", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n@app.get("/items/", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"8执行项目",children:["8、执行项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8执行项目",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"uvicorn sql_app.main:app --reload\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/fastapi/sql.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"以上内容是入门版知识，还有一些进阶的内容或者更加工程化的内容，我想放到 FastAPI 实战里面去写，好啦就先到这里吧，期待进阶内容。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["program%2F%E5%89%8D%E5%90%8E%E7%AB%AF%2FFastAPI%E2%80%948%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%89%88.md"]={toc:[{text:"一、简介",id:"一简介",depth:2},{text:"二、安装",id:"二安装",depth:2},{text:"三、简单的例子",id:"三简单的例子",depth:2},{text:"OpenAPI 文档",id:"openapi-文档",depth:3},{text:"四、Pydantic",id:"四pydantic",depth:2},{text:"五、参数",id:"五参数",depth:2},{text:"1、路径参数",id:"1路径参数",depth:3},{text:"1.1 普通路径参数",id:"11-普通路径参数",depth:4},{text:"1.2 有类型的路径参数",id:"12-有类型的路径参数",depth:4},{text:"2、查询参数",id:"2查询参数",depth:3},{text:"3、请求体",id:"3请求体",depth:3},{text:"4、内建参数类型",id:"4内建参数类型",depth:3},{text:"4.1、Query",id:"41query",depth:4},{text:"4.2、Path",id:"42path",depth:4},{text:"4.3、Body",id:"43body",depth:4},{text:"4.4、Field",id:"44field",depth:4},{text:"4.5、Cookie",id:"45cookie",depth:4},{text:"4.6、Header",id:"46header",depth:4},{text:"六、响应",id:"六响应",depth:2},{text:"1、响应限制",id:"1响应限制",depth:3},{text:"2、响应状态码",id:"2响应状态码",depth:3},{text:"3、返回错误信息",id:"3返回错误信息",depth:3},{text:"七、表单及文件",id:"七表单及文件",depth:2},{text:"1、Form表单",id:"1form表单",depth:3},{text:"2、上传文件",id:"2上传文件",depth:3},{text:"2.1、File",id:"21file",depth:4},{text:"2.2、UploadFile",id:"22uploadfile",depth:4},{text:"八、依赖项",id:"八依赖项",depth:2},{text:"九、安全性",id:"九安全性",depth:2},{text:"1、OAuth2",id:"1oauth2",depth:3},{text:"2、获取当前用户",id:"2获取当前用户",depth:3},{text:"十、中间件",id:"十中间件",depth:2},{text:"1、创建中间件",id:"1创建中间件",depth:3},{text:"2、跨域资源共享(CORS)",id:"2跨域资源共享cors",depth:3},{text:"十一、SQL数据库",id:"十一sql数据库",depth:2},{text:"1、创建数据库工程文件",id:"1创建数据库工程文件",depth:3},{text:"2、安装",id:"2安装",depth:3},{text:"3、创建SQLAlchemy部件",id:"3创建sqlalchemy部件",depth:3},{text:"4、创建数据库模型",id:"4创建数据库模型",depth:3},{text:"5、创建 Pydantic 模型",id:"5创建-pydantic-模型",depth:3},{text:"6、CRUD工具",id:"6crud工具",depth:3},{text:"6.1、读取数据",id:"61读取数据",depth:4},{text:"6.2、创建数据",id:"62创建数据",depth:4},{text:"7、主程序",id:"7主程序",depth:3},{text:"8、执行项目",id:"8执行项目",depth:3}],title:"FastAPI—8小时入门版",headingTitle:"FastAPI—8小时入门版",frontmatter:{Author:"mikigo"}}}}]);