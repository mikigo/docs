"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6387"],{9288:function(e,n,i){i.r(n),i.d(n,{default:()=>l});var a=i(2676),r=i(453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",h3:"h3",pre:"pre",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"python环境与依赖管理",children:["Python环境与依赖管理",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#python环境与依赖管理",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Python有一大特点，即具有强大的标准库和第三方库。在开发过程中可能会用到第三方库，那么就需要对其进行安装和管理。基于一定的工具链，Python也能写出优雅标准的项目代码，将依赖管理玩的明明白白。"}),"\n",(0,a.jsxs)(n.h2,{id:"pip",children:["pip",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pip",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["pip 是 Python 标准库的一个包，从 Python3.4 开始 pip 已经内置在 Python 中。Python 有成千上万的宝藏库，它们被放置在一个统一的仓库 ",(0,a.jsx)(n.code,{children:"pypi"}),"。pip 在这个仓库中充当着管理员的角色，可以将需要的库从 Pypi 取出来，安装并管理这些库。"]}),"\n",(0,a.jsx)(n.p,{children:"由于大多数的第三方库都发布在 pypi，所以通过pip就可以安装95%以上的第三方库，体量在包安装这方面是大哥级别。pip还有一大优势就是在安装库的同时会把库所需要的依赖也一并进行安装。综上所述，在单一的项目环境中推荐使用它，简单便捷。"}),"\n",(0,a.jsx)(n.p,{children:"如果有两个及以上的项目环境就不建议去使用pip，会出现环境冲突且难以管理。如果一定要使用那么就需要搭配上环境管理工具。"}),"\n",(0,a.jsxs)(n.h3,{id:"安装",children:["安装",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"如果 Python 环境没有 pip 工具可以通过以下两种方法进行安装。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install python-pip\n"})}),"\n",(0,a.jsx)(n.p,{children:"还有种方法："}),"\n",(0,a.jsxs)(n.p,{children:["在 ",(0,a.jsx)(n.a,{href:"https://pypi.org/project/pip/#files",target:"_blank",rel:"noopener noreferrer",children:"https://pypi.org/project/pip/#files"})," 中下载pip安装文件，然后解压到 ",(0,a.jsx)(n.code,{children:"python scripts"})," 目录中，执行 ",(0,a.jsx)(n.code,{children:"python setup.py install"})," 命令安装即可；"]}),"\n",(0,a.jsx)(n.p,{children:"许多人抱怨 pip 命令安装 Python 库很慢或者是安装过程中失败，其实是 pip 源的问题，将其更换为我们国内源即可；"}),"\n",(0,a.jsx)(n.p,{children:"1.临时设定："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package matplotlib\n"})}),"\n",(0,a.jsx)(n.p,{children:"2.设置为默认："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n"})}),"\n",(0,a.jsx)(n.p,{children:"设为默认后，以后安装库都是从清华源下载，而且无需再加镜像源网址。"}),"\n",(0,a.jsxs)(n.h3,{id:"快速配置环境",children:["快速配置环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速配置环境",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"通过 pip list 命令可以预览当前环境下的依赖包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ pip list\nPackage\xa0 \xa0 \xa0 \xa0Version\xa0\n------------- --------\nasn1crypto\xa0 \xa0 0.24.0\xa0\xa0\ncolorama\xa0 \xa0 \xa0 0.3.7\xa0 \xa0\nconfigparser\xa0 3.5.0b2\xa0\ncryptography\xa0 2.6.1\xa0 \xa0\ndecorator\xa0 \xa0 \xa04.3.0\n"})}),"\n",(0,a.jsx)(n.p,{children:"通过 pip install package_name 命令安装 Python 包：\n以 requests 包举例说明："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"~$ pip install requests\nCollecting requests\n......\nSuccessfully installed certifi-2021.10.8 chardet-4.0.0 idna-2.10 requests-2.27.1 urllib3-1.26.16\n"})}),"\n",(0,a.jsx)(n.p,{children:"还可以通过pip install requests==<版本号>来指定包的版本号进行安装："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pip install requests==2.27.1\n"})}),"\n",(0,a.jsx)(n.p,{children:"如果我们想将安装好的这些包及依赖信息全部记录下来，就可以通过pip freeze命令将信息记  在requirements.txt中。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pip freeze > requirements.txt\n"})}),"\n",(0,a.jsx)(n.p,{children:"当我们需要在一个新的python环境中引入当前的依赖时使用以下命令即可。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pip  install -r requirements.txt\n"})}),"\n",(0,a.jsx)(n.p,{children:"还可以通过 pipreqs 进行导包操作："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"~$ pip install pipreqs\n~$ pipreqs ./  此命令也是生成一个requirements.txt文件在当前项目目录下\n"})}),"\n",(0,a.jsx)(n.p,{children:"如果环境中存在 requirements.txt 文件，需要使用以下命令导出 requirements.txt 文件："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pipreqs ./ --encoding=utf-8 --force\n"})}),"\n",(0,a.jsx)(n.p,{children:"注意可能在使用时会发现："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:'~$ pipreqs ./\nTraceback (most recent call last):\n\xa0 File "/home/uos/.local/bin/pipreqs", line 6, in <module>\n\xa0 \xa0 from pipreqs.pipreqs import main\n\xa0 File "/home/uos/.local/lib/python2.7/site-packages/pipreqs/pipreqs.py", line 51, in <module>\n\xa0 \xa0 from pipreqs import __version__\nImportError: cannot import name __version__\n'})}),"\n",(0,a.jsx)(n.p,{children:"报错了怎么办？"}),"\n",(0,a.jsx)(n.p,{children:"不要慌张，其实这是因为此环境下版本不可用，换个版本就好啦！"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"~$\xa0pip install pipreqs==100\nCollecting pipreqs==100\nCould not find a version that satisfies the requirement pipreqs==100 (from versions: 0.1.3, 0.1.4, 0.1.5, 0.1.6, 0.1.7, 0.1.8, 0.1.9, 0.2.0, 0.2.1, 0.2.2, 0.2.3, 0.2.4, 0.2.5, 0.2.7, 0.2.8, 0.2.9, 0.3.0, 0.3.1, 0.3.2, 0.3.3, 0.3.4, 0.3.5, 0.3.6, \n0.3.7, 0.3.8, 0.3.9, 0.4.0, 0.4.1, 0.4.2, 0.4.3, 0.4.4, 0.4.5, 0.4.6, 0.4.7, 0.4.8, 0.4.9, 0.4.10, 0.4.11)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0\nNo matching distribution found for pipreqs==100\n这里很多版本，可以选择其中一个未安装的，建议不要装太旧的\n~$ pip install pipreqs==0.4.1\n~$ pipreqs --help 查看有没有报错，没有报错就ok\n接下来正常操作就不会报错啦\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"明确环境依赖",children:["明确环境依赖",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#明确环境依赖",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"pip list 和 pip freeze 打印出来的依赖都有一个问题，那就是无法明确依赖关系。"}),"\n",(0,a.jsx)(n.p,{children:"当我们想清理某一个包时，不知道哪个是直接依赖哪个是间接依赖。导致环境清理不干净或者清理了不该清除的依赖。"}),"\n",(0,a.jsx)(n.p,{children:"这时就可以使用 pipdeptree 来管理依赖树："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"~$ pip install pipdeptree\n......\n~$ pipdeptree\n...\npipreqs==0.4.1\n\xa0 - docopt [required: Any, installed: 0.6.2]\n\xa0 - yarg [required: Any, installed: 0.1.9]\n\xa0 \xa0 - requests [required: Any, installed: 2.27.1]\n\xa0 \xa0 \xa0 - certifi [required: >=2017.4.17, installed: 2021.10.8]\n\xa0 \xa0 \xa0 - chardet [required: >=3.0.2,<5, installed: 4.0.0]\n\xa0 \xa0 \xa0 - idna [required: >=2.5,<3, installed: 2.10]\n\xa0 \xa0 \xa0 - urllib3 [required: >=1.21.1,<1.27, installed: 1.26.16]\n...\n"})}),"\n",(0,a.jsx)(n.p,{children:"这样我们就清楚的知道依赖直接的关系，在依赖清理时就可以避免出现问题。"}),"\n",(0,a.jsxs)(n.h3,{id:"环境依赖治理",children:["环境依赖治理",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境依赖治理",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"如果说我们想卸载 requests 包，直接使用 pip uninstall requests 命令你会发现怎么卸不干净？"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ pipdeptree\nsetuptools==40.8.0\nsix==1.12.0\nwheel==0.32.3\nyarg==0.1.9\n\xa0 - requests [required: Any, installed: 2.27.1]\n\xa0 \xa0 - certifi [required: >=2017.4.17, installed: 2021.10.8]\n\xa0 \xa0 - chardet [required: >=3.0.2,<5, installed: 4.0.0]\n\xa0 \xa0 - idna [required: >=2.5,<3, installed: 2.10]\n\xa0 \xa0 - urllib3 [required: >=1.21.1,<1.27, installed: 1.26.16]\n:~$ pip uninstall requests\n:~$ pipdeptree\nsetuptools==40.8.0\nsix==1.12.0\nurllib3==1.26.16\nwheel==0.32.3\nyarg==0.1.9\n\xa0 - requests [required: Any, installed: 2.21.0]\n发现只是单纯的卸载了requests，它依赖的包并没有被卸载！\n"})}),"\n",(0,a.jsx)(n.p,{children:"那么推荐一个工具 pip-autoremove 来做这件事情，下面用这个工具来试试："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"~$ pip install pip-autoremove\n...\n~$ pip-autoremove requests -y\n...\n:~$ pipdeptree\nsix==1.12.0\nwheel==0.32.3\nyarg==0.1.9\n\xa0 - requests [required: Any, installed: 2.21.0]\n"})}),"\n",(0,a.jsx)(n.p,{children:"你会发现非常好用哈，它会检索到 requests包 和它的相关依赖，然后全部卸载，可以说是非常干净！"}),"\n",(0,a.jsxs)(n.h3,{id:"常见问题",children:["常见问题",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见问题",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"pip install 与 python install 区别"}),"\n",(0,a.jsx)(n.p,{children:"以 requests 为例："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"当我们用 pip install requests 安装 requests 模块，则会把 requests 依赖的其他库都安装上，不需要在去费力安装依赖的库了。"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"当我们使用 pip setup.py install 安装 requests 模块，需要去手动安装第三方依赖，否则在 import requests 时会出现报错。"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"conda",children:["conda",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#conda",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"conda是一个支持多语言的包、依赖和环境管理工具，它不仅能管理包，还可以隔离和管理不同Python版本的环境，类似于管理node.js环境的nvm工具。"}),"\n",(0,a.jsx)(n.p,{children:"conda官方一共有两个发行版anaconda和miniconda，anaconda相比miniconda体积更大，预装了许多科学计算的库，很多东西未必会用的到，所以建议使用miniconda。"}),"\n",(0,a.jsx)(n.p,{children:"对于跨语言的或者是本身就整合了各种依赖的环境(比如tenserflow)，再考虑使用conda。"}),"\n",(0,a.jsxs)(n.h3,{id:"安装miniconda",children:["安装miniconda",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装miniconda",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"1.首先下载miniconda的安装脚本"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"[https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh)\n"})}),"\n",(0,a.jsx)(n.p,{children:"2.执行安装脚本"}),"\n",(0,a.jsx)(n.p,{children:"3.一直回车等到出现如下提示并输入yes回车"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"Do you accept the license terms? [yes|no]\n[no] >>>\xa0\nPlease answer 'yes' or 'no':'\n>>>\xa0yes\n"})}),"\n",(0,a.jsx)(n.p,{children:"4.指定安装路径"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"[/home/uos/miniconda3] >>>\xa0这里的路径可以根据自己情况设定，指定完成回车\n我这里就不指定了，使用默认路径\n"})}),"\n",(0,a.jsx)(n.p,{children:"5.初始化conda"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"by running conda init? [yes|no]\n[no] >>> yes\xa0\n"})}),"\n",(0,a.jsx)(n.p,{children:"通过简单的操作就可以安装成功了，当打开终端提示符前出现(base)说明进入了默认虚拟环境。"}),"\n",(0,a.jsxs)(n.h3,{id:"取消激活base环境",children:["取消激活base环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#取消激活base环境",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"当miniconda安装完成之后，每次打开终端都会激活其默认的base环境，我们可以通过以下命令禁止激活默认base环境。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"conda config --set auto_activate_base false\xa0\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"安装卸载python包",children:["安装/卸载Python包",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装卸载python包",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"当我们想在conda中安装包，可以选择用conda install或者pip install，两者基本相同，但是pip是通过pypi仓库拉取的数据，而conda是通过anaconda.org上拉取的数据。所以说pip的包更全。"}),"\n",(0,a.jsx)(n.p,{children:"以requests为例："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda install requests  安装\n:~$ conda uninstall requests  卸载\n操作方法和pip几乎一样\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"依赖管理",children:["依赖管理",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖管理",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"conda 也有和pip freeze类似的依赖管理方式："}),"\n",(0,a.jsx)(n.p,{children:"为当前环境创建配置文件："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda env export > environment.yaml \n"})}),"\n",(0,a.jsx)(n.p,{children:"根据配置文件复现当前环境："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda env create -f environment.yaml\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"环境操作",children:["环境操作",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境操作",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"首先创建一个环境，并激活该环境："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda create -n uos python=3.7 -y  环境名称可以自定义，我这里使用uos\n...\n:~$ conda activate uos\n"})}),"\n",(0,a.jsx)(n.p,{children:"需要注意的是，创建环境之后，一定要 activate 该环境，否则后续的 install 操作还是在 base 环境。\n查看已有环境列表："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda env list\n# conda environments:\n#\nbase\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0/home/uos/miniconda3\nuos\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0*\xa0 /home/uos/miniconda3/envs/uos\n"})}),"\n",(0,a.jsx)(n.p,{children:"查看当前环境下的依赖："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda list\n# packages in environment at /home/uos/miniconda3/envs/uos:\n#\n# Name\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Version\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Build\xa0 Channel\n_libgcc_mutex\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa00.1\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 main\xa0\xa0\n_openmp_mutex\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa05.1\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa01_gnu\xa0\xa0\nca-certificates\xa0 \xa0 \xa0 \xa0 \xa0 \xa02023.01.10\xa0 \xa0 \xa0 \xa0 \xa0 \xa0h06a4308_0\xa0\xa0\ncertifi\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa02022.12.7\xa0 \xa0 \xa0 \xa0 py37h06a4308_0\xa0\xa0\nld_impl_linux-64\xa0 \xa0 \xa0 \xa0 \xa0 2.38\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0h1181459_1\n...\n"})}),"\n",(0,a.jsx)(n.p,{children:"退出环境："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ conda deactivate\n:~$ exit  环境内直接退出\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"切换环境技巧",children:["切换环境技巧",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#切换环境技巧",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"当我们切换环境时，会使用conda activate命令，如果我们想只输入uos可不可以激活环境呢？"}),"\n",(0,a.jsx)(n.p,{children:"当然可以，操作如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:':~$ vim ~/.bash_profile\nalias uos="conda activate uos"\n:~$ source ~/.bash_profile\n:~$ uos\n此方法适用于环境与环境之间切换\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"常用命令",children:["常用命令",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常用命令",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"环境相关："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"conda remove -n [env_name] --all  移除环境\nconda create --name new_env_name --clone base_env_name  克隆环境\n"})}),"\n",(0,a.jsx)(n.p,{children:"日常相关："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"conda search [package_name]  搜索安装包信息\nconda update [package_name]  更新包\nconda remove [package_name]  删除包\nconda clean -t  直接清除被缓存包\nconda clean -y -a  直接清除索引缓存、未使用缓存包\n"})}),"\n",(0,a.jsx)(n.h2,{id:"",children:(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#",children:"#"})}),"\n",(0,a.jsxs)(n.h2,{id:"pdm",children:["pdm",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pdm",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"pdm是一个新的Python包管理器，于2021年发布1.0版本，目前最新版为2.7。值得一提的是这款工具的开发者是中国人。为什么选择pdm呢？首先它不是传统的包管理器(pipenv,poetry)需要基于虚拟环境，pdm得益于2018年的一个PEP提案（PEP582，Python local packages directory），完全摒弃了虚拟环境。"}),"\n",(0,a.jsx)(n.p,{children:"PDM 包含如下特性："}),"\n",(0,a.jsx)(n.p,{children:"1.PEP 582 本地项目库目录，支持安装与运行命令，完全不需要虚拟环境。"}),"\n",(0,a.jsx)(n.p,{children:"2.一个简单且相对快速的依赖解析器，特别是对于大的二进制包发布。"}),"\n",(0,a.jsx)(n.p,{children:"3.兼容 PEP 517 的构建后端，用于构建发布包(源码格式与 wheel 格式)"}),"\n",(0,a.jsx)(n.p,{children:"4.拥有灵活且强大的插件系统（有插件系统直接就拉开一个档次）"}),"\n",(0,a.jsx)(n.p,{children:"5.PEP 621 元数据格式"}),"\n",(0,a.jsx)(n.p,{children:"6.像 pnpm 一样的中心化安装缓存，节省磁盘空间"}),"\n",(0,a.jsxs)(n.h3,{id:"安装-1",children:["安装",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装-1",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"pdm的安装方式有很多种，比如pip、pipx、homebrew等。这里推荐一款安装命令行安装工具，pipx 是安装并运行 Python 终端用户应用（end-user applications）的工具。终端用户应用，其实可以理解为用 Python 编写的命令行工具，可以直接从命令行调用的那种。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"python3 -m pip install --user pipx\n"})}),"\n",(0,a.jsx)(n.p,{children:"pipx 需要 Python 3.6 及以上版本，同时必须已经安装好了 pip。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"pipx install pdm\n"})}),"\n",(0,a.jsx)(n.p,{children:"如果提示虚拟环境没有被创建需要安装venv，可以通过命令进行安装。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install python3-venv\n"})}),"\n",(0,a.jsx)(n.p,{children:"安装完成之后再通过pipx命令进行安装pdm。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ pipx install pdm\n\xa0 installed package pdm 2.7.0, installed using Python 3.7.3\n\xa0 These apps are now globally available\n\xa0 \xa0 - pdm\ndone! ✨ \uD83C\uDF1F ✨\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"初始化pdm",children:["初始化pdm",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化pdm",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"执行 pdm init 就会开始初始化，初始化的时候，会让你选择项目的一些信息"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ pdm init\nCreating a pyproject.toml for PDM...\nPlease enter the Python interpreter to use\n0. /usr/bin/python (2.7)\n1. /usr/bin/python3.7m (3.7)\n2. /usr/bin/python3.7 (3.7)\n3. /usr/bin/python2.7 (2.7)\n4. /home/uos/.local/pipx/venvs/pdm/bin/python (3.7)\nPlease select (0): 2\nUsing Python interpreter: /usr/bin/python3.7 (3.7)\nUsing __pypackages__ because non-venv Python is used.\nWould you like to create a virtualenv with /usr/bin/python3.7? [y/n] (y): y\nVirtualenv is created successfully at /home/uos/.venv\nIs the project a library that is installable?\nIf yes, we will need to ask a few more questions to include the project name and build backend [y/n] (n): y\nProject name (uos): 123like\nProject version (0.1.0):\xa0\nProject description ():\xa0\nWhich build backend to use?\n0. pdm-backend\n1. setuptools\n2. flit-core\n3. hatchling\n4. pdm-pep517\nPlease select (0): 4\nLicense(SPDX name) (MIT):\xa0\nAuthor name ():\xa0\nAuthor email ():\xa0\nPython requires('*' to allow any) (>=3.7):\xa0\nChanges are written to pyproject.toml.\nFound following files from other formats that you may import:\n0. /home/uos/requirements.txt (requirements)\n1. don't do anything, I will import later.\nPlease select: 1\n"})}),"\n",(0,a.jsx)(n.p,{children:"完成之后，PDM 会将你的选择以 toml 格式写入 pyproject.toml 配置文件中。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:':~$ cat pyproject.toml\xa0\n[project]\nname = "123like"\nversion = "0.1.0"\ndescription = ""\nauthors = [\n\xa0 \xa0 {name = "", email = ""},\n]\ndependencies = []\nrequires-python = ">=3.7"\nreadme = "README.md"\nlicense = {text = "MIT"}\n\n[build-system]\nrequires = ["pdm-pep517>=1.0"]\nbuild-backend = "pdm.pep517.api"\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"包操作",children:["包操作",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#包操作",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"安装包和 Poetry 一样，安装使用的是 add 命令"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm add requests\n"})}),"\n",(0,a.jsx)(n.p,{children:"查看包"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm list --graph\n"})}),"\n",(0,a.jsx)(n.p,{children:"pdm list 还有两个选项：\n–freeze：以 requirements.txt 的格式列出已安装的包"}),"\n",(0,a.jsx)(n.p,{children:"–json：以 json 的格式列出已安装的包，但必须与 --graph 同时使用"}),"\n",(0,a.jsx)(n.p,{children:"要查看某个包的某体详情，直接用 pdm show some_package即可"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm show requests\n"})}),"\n",(0,a.jsx)(n.p,{children:"删除包"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pmd remove requests\n"})}),"\n",(0,a.jsx)(n.p,{children:"更新包"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"# 更新所有包\npdm update \n# 更新某个包\npdm update <somepackage>\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"项目配置",children:["项目配置",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目配置",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm config\nSite/default configuration (/etc/xdg/pdm/config.toml):\nbuild_isolation = True\ncache_dir = /home/uos/.cache/pdm\ncheck_update = True\n...\nHome configuration (/home/uos/.config/pdm/config.toml):\nProject configuration (/home/uos/pdm.toml):\n"})}),"\n",(0,a.jsxs)(n.p,{children:["pdm config 里面有非常多的配置，想要一一搞清楚的可以去官网查阅：",(0,a.jsx)(n.a,{href:"https://pdm.fming.dev/latest/reference/configuration/",target:"_blank",rel:"noopener noreferrer",children:(0,a.jsx)(n.a,{href:"https://pdm.fming.dev/latest/reference/configuration/",target:"_blank",rel:"noopener noreferrer",children:"https://pdm.fming.dev/latest/reference/configuration/"})})]}),"\n",(0,a.jsxs)(n.h3,{id:"运行命令",children:["运行命令",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#运行命令",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"想要在 pdm 的环境中执行命令或者项目，可以使用 run 命令，若是执行项目时，有诸多参数，可以在 pyproject.toml 配置命令别名。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ pdm run python main.py\xa0\nhello,uos\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"命令别名",children:["命令别名",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#命令别名",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"在 pyproject.toml 添加\xa0[tool.pdm.scripts]可以设置快捷命令别名，若项目的执行有非常多的参数，这种设定别名的方法将很有用 。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:'[tool.pdm.scripts]\nstart = "python main.py"\n\n:~$ pdm run start\nhello,uos\n'})}),"\n",(0,a.jsx)(n.p,{children:"[tool.pdm.scripts]有两种形式："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:'# 第一种\n[tool.pdm.scripts]\nstart = "python main.py"\n# 第一种\n[tool.pdm.scripts]\nstart = {cmd = "python main.py"}\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"切换-python-版本",children:["切换 Python 版本",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#切换-python-版本",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"当你在初始化 pdm 项目时，就已经选定了当前的 Python 版本和可用的 Python 版本范围，后面如果想更改，可以使用 use 命令，但版本要受之前设定的版本范围约束。假设允许范围是 python 3.9+，当前使用的是 python 3.10，可以直接切换过去。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm use python3.9  \n"})}),"\n",(0,a.jsx)(n.p,{children:"假设允许范围是 python 3.9+，当前使用的是 python 3.10，可以直接切换过去。"}),"\n",(0,a.jsxs)(n.h3,{id:"兼容环境",children:["兼容环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#兼容环境",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"pdm 足够好用，也足够开放，如果你当前使用的是其他的包管理器，比如 pipenv ，poetry，或者还在用最原始的 requirements.txt ，你也可以很方便的迁移到 pdm 中来："}),"\n",(0,a.jsx)(n.p,{children:"1.使用 pdm import -f {file} 无需初始化，直接转换"}),"\n",(0,a.jsx)(n.p,{children:"2.执行 pdm init 或者 pdm install 的时候，会自动识别你当前的依赖情况并转换"}),"\n",(0,a.jsx)(n.p,{children:"同样的，你也可以当 pdm 管理的项目，导出为其他方案pyproject.toml 和 pdm.lock是 pdm 的两个核心文件。pdm 做为一个后起之秀，也没有忘本，它支持："}),"\n",(0,a.jsx)(n.p,{children:"将 pyproject.toml 转成 setup.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm export -f setuppy -o setup.py\n"})}),"\n",(0,a.jsx)(n.p,{children:"将 pdm.lock 转成 requirements.txt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:"pdm export -o requirements.txt\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"venv",children:["venv",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#venv",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"venv是Python中自带的一个专门用于管理虚拟环境的模块。"}),"\n",(0,a.jsxs)(n.h3,{id:"创建虚拟环境",children:["创建虚拟环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建虚拟环境",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ python3 -m venv uos   uos为虚拟环境名称，可以自定义\n"})}),"\n",(0,a.jsx)(n.p,{children:"可以说是非常的快，两三秒就创建成功了！\n创建完成之后在环境目录下，可以看到一个pyvenv.cfg的文件，它记录着虚拟环境的基本信息，包括你使用的 Python 的家目录，还有当前虚拟环境的 Python 版本，是否开启使用系统的 site-packages 模块，如果开启了，那么当你就可以直接使用系统中已经装过的第三方模块，但是你在虚拟环境下装的模块就不能被其他地方的程序使用。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~/uos$ cat pyvenv.cfg\xa0\nhome = /usr/bin\ninclude-system-site-packages = false\nversion = 3.7.3\n"})}),"\n",(0,a.jsx)(n.p,{children:"如果你的系统里有多个Python3环境，那么在创建时指明清楚版本号就可以了。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$ python3.9 -m venv [venv_dir]\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"进入虚拟环境",children:["进入虚拟环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#进入虚拟环境",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"首先我们进入到创建好的虚拟环境目录，通过source进入虚拟环境："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~/uos$ source bin/activate\n(uos) uos@uos-PC:~/uos$\n命令行前有创建的虚拟环境名称说明就已进入\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"退出虚拟环境",children:["退出虚拟环境",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#退出虚拟环境",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plain",children:":~$deactivate\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"venv是 Python3 中自带的虚拟环境管理工具，不需要额外安装，功能简单，用法也简单。但是它不能像 poetry 和 pipenv 用于项目的管理，因此 venv 建议只做了解，在一些简单的场景中可以使用，如果是复杂的项目中，可以直接上 poetry 和 pipenv。"}),"\n",(0,a.jsxs)(n.h2,{id:"virtualenv",children:["virtualenv",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#virtualenv",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"..."}),"\n",(0,a.jsxs)(n.h3,{id:"virtualenvwrapper",children:["virtualenvwrapper",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#virtualenvwrapper",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"..."}),"\n",(0,a.jsxs)(n.h2,{id:"pyenv",children:["pyenv",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pyenv",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"..."}),"\n",(0,a.jsxs)(n.h2,{id:"pipenv",children:["pipenv",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pipenv",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"..."}),"\n",(0,a.jsxs)(n.h2,{id:"poetry",children:["poetry",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#poetry",children:"#"})]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["program%2FPython%2FPython%E7%8E%AF%E5%A2%83%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.md"]={toc:[{text:"pip",id:"pip",depth:2},{text:"安装",id:"安装",depth:3},{text:"快速配置环境",id:"快速配置环境",depth:3},{text:"明确环境依赖",id:"明确环境依赖",depth:3},{text:"环境依赖治理",id:"环境依赖治理",depth:3},{text:"常见问题",id:"常见问题",depth:3},{text:"conda",id:"conda",depth:2},{text:"安装miniconda",id:"安装miniconda",depth:3},{text:"取消激活base环境",id:"取消激活base环境",depth:3},{text:"安装/卸载Python包",id:"安装卸载python包",depth:3},{text:"依赖管理",id:"依赖管理",depth:3},{text:"环境操作",id:"环境操作",depth:3},{text:"切换环境技巧",id:"切换环境技巧",depth:3},{text:"常用命令",id:"常用命令",depth:3},{text:"",id:"",depth:2},{text:"pdm",id:"pdm",depth:2},{text:"安装",id:"安装-1",depth:3},{text:"初始化pdm",id:"初始化pdm",depth:3},{text:"包操作",id:"包操作",depth:3},{text:"项目配置",id:"项目配置",depth:3},{text:"运行命令",id:"运行命令",depth:3},{text:"命令别名",id:"命令别名",depth:3},{text:"切换 Python 版本",id:"切换-python-版本",depth:3},{text:"兼容环境",id:"兼容环境",depth:3},{text:"venv",id:"venv",depth:2},{text:"创建虚拟环境",id:"创建虚拟环境",depth:3},{text:"进入虚拟环境",id:"进入虚拟环境",depth:3},{text:"退出虚拟环境",id:"退出虚拟环境",depth:3},{text:"总结",id:"总结",depth:3},{text:"virtualenv",id:"virtualenv",depth:2},{text:"virtualenvwrapper",id:"virtualenvwrapper",depth:3},{text:"pyenv",id:"pyenv",depth:2},{text:"pipenv",id:"pipenv",depth:2},{text:"poetry",id:"poetry",depth:2}],title:"Python环境与依赖管理",headingTitle:"Python环境与依赖管理",frontmatter:{Author:"mikigo"}}}}]);