"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5142"],{5605:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var l=s(2676),r=s(453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",img:"img",strong:"strong",ol:"ol",h4:"h4"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"js基础教程",children:["JS基础教程",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#js基础教程",children:"#"})]}),"\n",(0,l.jsxs)(n.h2,{id:"简介",children:["简介",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"JavaScript 是一种轻量级的编程语言，广泛用于网页开发中，为网页添加动态功能。"}),"\n",(0,l.jsxs)(n.h2,{id:"基本用法",children:["基本用法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,l.jsxs)(n.h3,{id:"输出语句",children:["输出语句",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#输出语句",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"在浏览器窗口弹出警告框"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"alert('Hello Js!')\n"})}),"\n",(0,l.jsx)(n.p,{children:"在控制台输出信息，执行过程中会将输出的信息打印在控制台上"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"控制台输出信息多用于调试"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log("111")\n'})}),"\n",(0,l.jsx)(n.p,{children:"例子，需结合HTML来实现"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n  <title>我的网页</title>\n  <link rel="icon" href="http://adtmp.uniontech.com/static/img/logo.c1b427eb.png">\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>示例CSS应用</title>\n</head>\n<body>\n  <p>欢迎来到我的网页！</p>\n</body>\n<script>\n  console.log(\'Not Found!\')\n  alert(\'未满24岁禁止访问!\')\n<\/script>\n</html>\n'})}),"\n",(0,l.jsx)(n.p,{children:"浏览器打开编写的HTML文件"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{src:"/html_css_js_asset/image-20241022100409172.png",alt:"image-20241022100409172"})}),"\n",(0,l.jsxs)(n.h2,{id:"js代码引入方式",children:["JS代码引入方式",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#js代码引入方式",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"在HTML中使用js的几种方式"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:' \x3c!-- js行内写法 --\x3e\n \x3c!-- onclick点击事件 --\x3e\n <button onclick="window.alert(\'点击次数太多了\')">请点我</button>  \n\n\x3c!-- 嵌入式 --\x3e\n<scrip>window.alert("内部样式")<\/script>\n\n\x3c!-- 外链式 --\x3e\n<script src="./本地js文件.js"><\/script>\n<script src="https://xxx.js" type="text/javascript"><\/script>\n'})}),"\n",(0,l.jsx)(n.p,{children:"外链式引入本地js文件例子"}),"\n",(0,l.jsx)(n.p,{children:"js本地文件，simple.js"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"console.log('Not Found!')\nalert('未满24岁禁止访问!')\n"})}),"\n",(0,l.jsx)(n.p,{children:"HTML文件中引入"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n  <title>我的网页</title>\n  <link rel="icon" href="http://adtmp.uniontech.com/static/img/logo.c1b427eb.png">\n  <script src="./simple.js"><\/script>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>示例CSS应用</title>\n</head>\n<body>\n  <p>欢迎来到我的网页！</p>\n</body>\n</html>\n'})}),"\n",(0,l.jsx)(n.p,{children:"页面效果和上节一样"}),"\n",(0,l.jsxs)(n.h2,{id:"js基础语法",children:["JS基础语法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#js基础语法",children:"#"})]}),"\n",(0,l.jsxs)(n.h3,{id:"变量的声明与赋值",children:["变量的声明与赋值",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变量的声明与赋值",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'// 使用var声明的变量,可以多次赋值,但是其结果只与最后一次赋值有关\nvar wordH ="Hello"\nvar wordH ="Word"\nconsole.log(wordH);\n\n// let不允许在一个代码块里有变量和他取一样的名字,但是允许修改同一个变量值\nlet wordC ="三年"\nconsole.log(wordC);\nwordC = "四年"\nconsole.log(wordC);\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"变量声明和区别",children:["变量声明和区别",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变量声明和区别",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"var"})," 是 JavaScript 最初用于声明变量的关键字。以下是 ",(0,l.jsx)(n.code,{children:"var"})," 的特点："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"函数作用域"}),"：",(0,l.jsx)(n.code,{children:"var"})," 声明的变量拥有函数作用域，这意味着如果 ",(0,l.jsx)(n.code,{children:"var"})," 在函数外部声明，它是全局变量；如果在函数内部声明，它只能在该函数内部访问。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"变量提升"}),"：使用 ",(0,l.jsx)(n.code,{children:"var"})," 声明的变量会被提升到其所在作用域的顶部，但是赋值不会提升。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"可重声明"}),"：在同一作用域内，可以多次声明同一个变量。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"let"})," 是 ES6（ECMAScript 2015）中引入的新关键字，用于声明块级作用域的变量："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"块级作用域"}),"：",(0,l.jsx)(n.code,{children:"let"})," 声明的变量仅在它被声明的代码块（如 ",(0,l.jsx)(n.code,{children:"{}"})," 内部）中可见。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"不会变量提升"}),"：在声明之前访问 ",(0,l.jsx)(n.code,{children:"let"})," 变量会导致一个引用错误（ReferenceError）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"不可重声明"}),"：在同一作用域内，不能重新声明同一个变量。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"常量",children:["常量",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常量",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"const"})," 也同样是 ES6 引入的，用于声明常量，即一旦赋值后就不能更改其值的变量。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"块级作用域"}),"：与 ",(0,l.jsx)(n.code,{children:"let"})," 一样，",(0,l.jsx)(n.code,{children:"const"})," 声明的变量具有块级作用域。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"不会变量提升"}),"：同 ",(0,l.jsx)(n.code,{children:"let"}),"，",(0,l.jsx)(n.code,{children:"const"})," 声明的变量也不会被提升。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"不可更改"}),"：一旦声明并初始化，",(0,l.jsx)(n.code,{children:"const"})," 变量的值就不能更改（对于基本数据类型而言）。但是，如果 ",(0,l.jsx)(n.code,{children:"const"})," 变量引用的是一个对象，那么对象的属性是可以被修改的。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"不可重声明"}),"：与 ",(0,l.jsx)(n.code,{children:"let"})," 一样，在同一作用域内不可重声明。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const c = 3;\nc = 4; // TypeError: Assignment to constant variable.\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"基本数据类型",children:["基本数据类型",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本数据类型",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"布尔型"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let flag1 = true;\nlet flag2 = false;\n"})}),"\n",(0,l.jsx)(n.p,{children:"数字型"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'let age =18;\nlet date ="0306";\nconsole.log(age);\nconsole.log(date);\n\nconsole.log(Number.MAX_VALUE);     //最大值\nconsole.log(Number.MAX_VALUE*2);   //Infinity(无穷大)\n'})}),"\n",(0,l.jsx)(n.p,{children:"字符串"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'let demo1 = "字符串";\nlet demo2 = \'字符串\';\nlet demo3 =`字符串`;\nlet demo4 = "老师说`今天晚上不上晚自习`";\n\n'})}),"\n",(0,l.jsx)(n.p,{children:"未定义"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// [undefined-未定义的]\n// 表示声明的变量还未赋值\nlet grade;\nconsole.log(grade); //undefined\n\n// [null-空]\nvar a=null;\nconsole.log(a);  //null\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"数据类型检查",children:["数据类型检查",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据类型检查",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"使用typeof关键字"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log(typeof("123"));  //string\nconsole.log(typeof(false)); //boolean\nconsole.log(typeof(NaN));  //number\nconsole.log(typeof(Infinity));  //number\nconsole.log(typeof("true"));  //string\nconsole.log(typeof(undefined)); //undefined\nconsole.log(typeof(null));  //object\n\nconsole.log(typeof(\'aaa\'*2)); //Number\nconsole.log("aaa"*2); //NaN\n\nconsole.log(2-"true"); //NaN\nconsole.log(typeof(2-"true")); //Number\n\n// 布尔类型true,会在运算中转化为数字1\n// 布尔类型false,会在运算中转化为数字0\nconsole.log(2-true);  //1\nconsole.log(typeof(2-true));  //Number\n\n// 加号遇上字符串,做拼接使用\nconsole.log(2+"true");  //2true\nconsole.log(typeof(2+"true"));  //string\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"算数运算符",children:["算数运算符",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#算数运算符",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["加法 (",(0,l.jsx)(n.code,{children:"+"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"加法运算符用于两个数值相加，或者连接两个字符串。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let result = 5 + 3; // 结果是 8\nlet string = "Hello, " + "world!"; // 结果是 "Hello, world!"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["减法 (",(0,l.jsx)(n.code,{children:"-"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"减法运算符用于从一个数值中减去另一个数值。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let difference = 10 - 4; // 结果是 6\n"})}),"\n",(0,l.jsxs)(n.p,{children:["乘法 (",(0,l.jsx)(n.code,{children:"*"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"乘法运算符用于两个数值相乘。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let product = 6 * 7; // 结果是 42\n"})}),"\n",(0,l.jsxs)(n.p,{children:["除法 (",(0,l.jsx)(n.code,{children:"/"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"除法运算符用于一个数值除以另一个数值。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let quotient = 20 / 5; // 结果是 4\n"})}),"\n",(0,l.jsxs)(n.p,{children:["取模 (",(0,l.jsx)(n.code,{children:"%"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"取模运算符（有时称为取余运算符）返回两个数值相除后的余数。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let remainder = 18 % 5; // 结果是 3\n"})}),"\n",(0,l.jsxs)(n.p,{children:["指数 (",(0,l.jsx)(n.code,{children:"**"}),")"]}),"\n",(0,l.jsx)(n.p,{children:"指数运算符用于计算幂运算，即一个数的指数次方。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let power = 2 ** 3; // 结果是 8 (即 2 的 3 次方)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["自增 (",(0,l.jsx)(n.code,{children:"++"}),")"]}),"\n",(0,l.jsxs)(n.p,{children:["自增运算符将变量的值增加 1。它有两种形式：前置自增（",(0,l.jsx)(n.code,{children:"++variable"}),"）和后置自增（",(0,l.jsx)(n.code,{children:"variable++"}),"）。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let num = 1;\nlet preIncrement = ++num; // 结果是 2, num 的值也变成了 2\nlet postIncrement = num++; // 结果是 2, num 的值在返回后增加，变成了 3\n"})}),"\n",(0,l.jsxs)(n.p,{children:["自减 (",(0,l.jsx)(n.code,{children:"--"}),")"]}),"\n",(0,l.jsxs)(n.p,{children:["自减运算符将变量的值减少 1。它也有两种形式：前置自减（",(0,l.jsx)(n.code,{children:"--variable"}),"）和后置自减（",(0,l.jsx)(n.code,{children:"variable--"}),"）。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let num = 3;\nlet preDecrement = --num; // 结果是 2, num 的值也变成了 2\nlet postDecrement = num--; // 结果是 2, num 的值在返回后减少，变成了 1\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"字符串运算符隐式转换",children:["字符串运算符&隐式转换",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串运算符隐式转换",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"两个字符串：当使用加号运算符连接字符串时，它会将两个字符串拼接起来。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let str1 = "Hello, ";\nlet str2 = "World!";\nlet result = str1 + str2; // 结果是 "Hello, World!"\n'})}),"\n",(0,l.jsx)(n.p,{children:"字符串与数值：如果操作数之一是字符串，另一个是数值，那么数值会被转换为字符串，然后执行字符串连接。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let str = "5";\nlet num = 10;\nlet result = str + num; // 结果是字符串 "510"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["数值与布尔值：如果操作数之一是数值，另一个是布尔值，那么布尔值 ",(0,l.jsx)(n.code,{children:"true"})," 会被转换为 ",(0,l.jsx)(n.code,{children:"1"}),"，",(0,l.jsx)(n.code,{children:"false"})," 会被转换为 ",(0,l.jsx)(n.code,{children:"0"}),"，然后执行数值运算。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let num = 5;\nlet bool = true;\nlet result = num + bool; // 结果是数值 6\n"})}),"\n",(0,l.jsx)(n.p,{children:"布尔值与字符串：如果操作数之一是布尔值，另一个是字符串，那么布尔值会被转换为字符串，然后执行字符串连接。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let bool = true;\nlet str = "Hello";\nlet result = bool + str; // 结果是字符串 "trueHello"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["null 和 undefined：",(0,l.jsx)(n.code,{children:"null"})," 和 ",(0,l.jsx)(n.code,{children:"undefined"})," 在进行字符串连接时会被转换为字符串 ",(0,l.jsx)(n.code,{children:'"null"'})," 和 ",(0,l.jsx)(n.code,{children:'"undefined"'}),"。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let result1 = "Value is " + null; // 结果是 "Value is null"\nlet result2 = "Value is " + undefined; // 结果是 "Value is undefined"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["如果操作数是对象，那么对象会调用其 ",(0,l.jsx)(n.code,{children:"toString()"})," 方法转换为字符串。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let obj = { valueOf: () => 42 };\nlet result = "Object value is " + obj; // 结果是 "Object value is [object Object]"，除非重写了 toString() 方法\n'})}),"\n",(0,l.jsx)(n.p,{children:"以下是一些隐式转换的例子："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let value1 = "10";\nlet value2 = 20;\nlet value3 = true;\n\nlet resultA = value1 + value2; // "1020" (数值 20 转换为字符串 "20")\nlet resultB = value2 + value3; // "21" (布尔值 true 转换为数值 1)\nlet resultC = value3 + value1; // "true10" (布尔值 true 转换为字符串 "true")\n'})}),"\n",(0,l.jsx)(n.p,{children:"理解隐式转换对于避免在编程中遇到意外的结果非常重要。通常，为了代码的可读性和可维护性，建议避免依赖隐式转换，并在需要时进行显式类型转换。"}),"\n",(0,l.jsxs)(n.h2,{id:"赋值运算符",children:["赋值运算符",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#赋值运算符",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"将右侧表达式的值赋给左侧的变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let x = 10; // 将数值 10 赋值给变量 x\n"})}),"\n",(0,l.jsx)(n.p,{children:"复合赋值运算符将一个算术运算符与赋值运算符组合在一起，使得操作更加简洁。"}),"\n",(0,l.jsxs)(n.p,{children:["加法赋值 (",(0,l.jsx)(n.code,{children:"+="}),")"]}),"\n",(0,l.jsx)(n.p,{children:"将右侧表达式的值与左侧变量的值相加，然后将结果赋给左侧变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"x += 5; // 等同于 x = x + 5\n"})}),"\n",(0,l.jsxs)(n.p,{children:["减法赋值 (",(0,l.jsx)(n.code,{children:"-="}),")"]}),"\n",(0,l.jsx)(n.p,{children:"将右侧表达式的值从左侧变量的值中减去，然后将结果赋给左侧变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"x -= 5; // 等同于 x = x - 5\n"})}),"\n",(0,l.jsxs)(n.p,{children:["乘法赋值 (",(0,l.jsx)(n.code,{children:"*="}),")"]}),"\n",(0,l.jsx)(n.p,{children:"将右侧表达式的值与左侧变量的值相乘，然后将结果赋给左侧变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"x *= 5; // 等同于 x = x * 5\n"})}),"\n",(0,l.jsxs)(n.p,{children:["除法赋值 (",(0,l.jsx)(n.code,{children:"/="}),")"]}),"\n",(0,l.jsx)(n.p,{children:"将左侧变量的值除以右侧表达式的值，然后将结果赋给左侧变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"x /= 5; // 等同于 x = x / 5\n"})}),"\n",(0,l.jsxs)(n.p,{children:["取模赋值 (",(0,l.jsx)(n.code,{children:"%="}),")"]}),"\n",(0,l.jsx)(n.p,{children:"将左侧变量的值除以右侧表达式的值并取余数，然后将结果赋给左侧变量。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"x %= 5; // 等同于 x = x % 5\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"比较运算符",children:["比较运算符",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#比较运算符",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:' \n// != 不等于\nconsole.log(41!=5); //true\nconsole.log(4!=4); //false\n\n// !== 不全等\nconsole.log(5 !==5); //false\n\n// == 等等于\nconsole.log(4=="4"); //true\n\n// === 全等于\nconsole.log(4==="4");//false\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"逻辑运算符",children:["逻辑运算符",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#逻辑运算符",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"&& 逻辑运算符  一假则假"}),"\n",(0,l.jsx)(n.li,{children:"|| 逻辑或运算符 一真则真"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"console.log(true && true); //true\nconsole.log(false && true); //false\nconsole.log(true &&false); //false\nconsole.log(false &&false); //false\n\nconsole.log(3>2 && 2>1); //true\nconsole.log(3<2 && 2>1); //false\nconsole.log(3<2 && 2<1); //false\n\nconsole.log(true || true); //true\nconsole.log(true ||false); //true\nconsole.log(false ||true); //true\nconsole.log(false || false); //false\n\nconsole.log(3>2 || 2>1); //true\nconsole.log(3<2 || 2>1); //true\nconsole.log(3<2 || 2<1); //false\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"三元表达式",children:["三元表达式",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三元表达式",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["JavaScript 中的三元表达式是一种简洁的条件表达式，它由三个操作数和一个问号 (",(0,l.jsx)(n.code,{children:"?"}),") 以及一个冒号 (",(0,l.jsx)(n.code,{children:":"}),") 组成。它是一种简化版的 ",(0,l.jsx)(n.code,{children:"if-else"})," 语句，允许在单行内完成条件判断和相应的操作。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"condition ? valueIfTrue : valueIfFalse;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["这里的 ",(0,l.jsx)(n.code,{children:"condition"})," 是要判断的条件，它应该是一个能够返回布尔值 ",(0,l.jsx)(n.code,{children:"true"})," 或 ",(0,l.jsx)(n.code,{children:"false"})," 的表达式。如果 ",(0,l.jsx)(n.code,{children:"condition"})," 为真 (",(0,l.jsx)(n.code,{children:"true"}),")，则表达式的结果是 ",(0,l.jsx)(n.code,{children:"valueIfTrue"}),"；如果 ",(0,l.jsx)(n.code,{children:"condition"})," 为假 (",(0,l.jsx)(n.code,{children:"false"}),")，则表达式的结果是 ",(0,l.jsx)(n.code,{children:"valueIfFalse"}),"。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'// 运算优先级：一元运算符>比较运算符>逻辑运算符(逻辑与>逻辑或) > 赋值运算符\n\nlet a =3>5 && 2<7 && 3==4\nconsole.log(a); //false\n\nlet b =3>5 || 2<7 && 3==="3"\nconsole.log(b); //false\n\nlet c =2 == "2"\nconsole.log(c); //true\n\nlet d =!c && (b||a) \nconsole.log(d); //false\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"if选择结构",children:["if选择结构",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#if选择结构",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"if"})," 选择结构是一种基本的控制流语句，它允许程序根据指定的条件执行不同的代码块。",(0,l.jsx)(n.code,{children:"if"})," 语句根据条件的真值来决定执行哪个代码块。"]}),"\n",(0,l.jsx)(n.p,{children:"基本用法"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"if (condition) {\n  // 当 condition 为真时执行的代码块\n}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"if (condition) {\n  // 当 condition 为真时执行的代码块\n} else {\n  // 当 condition 为假时执行的代码块\n}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"if (condition1) {\n  // 当 condition1 为真时执行的代码块\n} else if (condition2) {\n  // 当 condition1 为假且 condition2 为真时执行的代码块\n} else {\n  // 当以上所有条件都为假时执行的代码块\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"例子"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let x = 10;\n\nif (x > 20) {\n  console.log('x is greater than 20');\n} else if (x > 10) {\n  console.log('x is greater than 10 but less than or equal to 20');\n} else {\n  console.log('x is 10 or less');\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"嵌套写法"}),"\n",(0,l.jsxs)(n.p,{children:["可以在一个 ",(0,l.jsx)(n.code,{children:"if"})," 语句内部嵌套另一个 ",(0,l.jsx)(n.code,{children:"if"})," 语句"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let x = 10;\nlet y = 5;\n\nif (x > 5) {\n  if (y > 5) {\n    console.log('Both x and y are greater than 5');\n  } else {\n    console.log('x is greater than 5 but y is not');\n  }\n} else {\n  console.log('x is not greater than 5');\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"循环结构",children:["循环结构",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#循环结构",children:"#"})]}),"\n",(0,l.jsxs)(n.h3,{id:"for循环",children:["for循环",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#for循环",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"for"})," 循环是一种用于重复执行一段代码的循环控制结构，通常当你提前知道需要执行循环的次数时使用"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"for"})," 循环的四个部分："]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"初始化表达式（initialization）"}),"：在循环开始前执行一次，通常用于声明和初始化一个计数器变量。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"条件表达式（condition）"}),"：在每次循环迭代之前检查，如果为真（",(0,l.jsx)(n.code,{children:"true"}),"），则执行循环体。如果为假（",(0,l.jsx)(n.code,{children:"false"}),"），循环终止。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"迭代表达式（iteration）"}),"：在每次循环体执行后执行，通常用于更新计数器变量。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"循环体（body）"}),"：这是循环中重复执行的代码块。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"for (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"在这个例子中："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"let i = 0"})," 是初始化表达式，它声明了一个变量 ",(0,l.jsx)(n.code,{children:"i"})," 并将其初始化为 ",(0,l.jsx)(n.code,{children:"0"}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"i < 10"})," 是条件表达式，它在每次迭代前检查 ",(0,l.jsx)(n.code,{children:"i"})," 是否小于 ",(0,l.jsx)(n.code,{children:"10"}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"i++"})," 是迭代表达式，它在每次循环体执行后增加 ",(0,l.jsx)(n.code,{children:"i"})," 的值。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"console.log(i);"})," 是循环体，它会重复执行，直到条件表达式返回 ",(0,l.jsx)(n.code,{children:"false"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"while循环",children:["while循环",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#while循环",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"while"})," 循环是一种基本的循环控制结构，用于重复执行一段代码直到指定的条件为假（",(0,l.jsx)(n.code,{children:"false"}),"）。与 ",(0,l.jsx)(n.code,{children:"for"})," 循环不同，",(0,l.jsx)(n.code,{children:"while"})," 循环通常用于当你事先不知道循环要执行多少次，只是需要根据某个条件来结束循环时。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"while (condition) {\n  // 当 condition 为真时重复执行的代码块\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["这里的 ",(0,l.jsx)(n.code,{children:"condition"})," 是循环每次迭代前都要检查的表达式。如果 ",(0,l.jsx)(n.code,{children:"condition"})," 的计算结果为真（",(0,l.jsx)(n.code,{children:"true"}),"），则循环体中的代码块会被执行。一旦 ",(0,l.jsx)(n.code,{children:"condition"})," 的结果为假（",(0,l.jsx)(n.code,{children:"false"}),"），循环就会终止。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let i = 0;\n\nwhile (i < 10) {\n  console.log(i);\n  i++; // 更新计数器变量\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在这个例子中，循环会一直执行直到 ",(0,l.jsx)(n.code,{children:"i"})," 的值不再小于 ",(0,l.jsx)(n.code,{children:"10"}),"。在每次循环的末尾，",(0,l.jsx)(n.code,{children:"i"})," 的值都会通过 ",(0,l.jsx)(n.code,{children:"i++"})," 递增。"]}),"\n",(0,l.jsxs)(n.h3,{id:"dowhile循环",children:["do...while循环",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dowhile循环",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"do...while"})," 循环，这是 ",(0,l.jsx)(n.code,{children:"while"})," 循环的变体，它至少执行一次循环体，然后根据条件判断是否继续执行。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"do {\n  // 至少执行一次的代码块\n} while (condition);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"do...while"})," 循环中，循环体会在检查条件之前先执行一次，然后条件会被检查以确定是否继续循环。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while (i < 10);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在这个例子中，循环的行为与上面的 ",(0,l.jsx)(n.code,{children:"while"})," 循环类似，不同之处在于即使初始条件为假，循环体也至少会执行一次。"]}),"\n",(0,l.jsxs)(n.h3,{id:"循环控制",children:["循环控制",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#循环控制",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"for"})," 循环， ",(0,l.jsx)(n.code,{children:"while"})," 和 ",(0,l.jsx)(n.code,{children:"do...while"})," 循环中使用 ",(0,l.jsx)(n.code,{children:"break"})," 和 ",(0,l.jsx)(n.code,{children:"continue"})," 语句来控制循环的流程："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"break"})," 用于立即退出循环。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"continue"})," 用于跳过当前迭代中剩余的代码，直接进入下一次迭代的条件检查。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"数组",children:["数组",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"数组是一种特殊的对象，用于存储多个值的有序集合。数组中的每个值都有一个索引，索引从 0 开始计数，这使得你可以方便地访问和操作数组中的元素。"}),"\n",(0,l.jsxs)(n.h3,{id:"创建数组",children:["创建数组",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建数组",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"使用数组字面量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let fruits = ['Apple', 'Banana', 'Cherry'];\n"})}),"\n",(0,l.jsx)(n.p,{children:"Array 构造函数"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let fruits = new Array('Apple', 'Banana', 'Cherry');\n"})}),"\n",(0,l.jsx)(n.p,{children:"创建一个具有特定长度的空数组："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let emptyArray = new Array(3); // 创建一个长度为3的空数组\n"})}),"\n",(0,l.jsx)(n.p,{children:"使用索引来访问数组中的元素："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let firstFruit = fruits[0]; // 'Apple'\nlet secondFruit = fruits[1]; // 'Banana'\n"})}),"\n",(0,l.jsx)(n.p,{children:"可以直接通过索引修改数组中的元素："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"fruits[2] = 'Date'; // 将 'Cherry' 替换为 'Date'\n"})}),"\n",(0,l.jsxs)(n.p,{children:["使用 ",(0,l.jsx)(n.code,{children:"length"})," 属性可以获取或设置数组的长度："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"console.log(fruits.length); // 输出数组的长度\n\nfruits.length = 5; // 将数组的长度扩展到5\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"数组方法",children:["数组方法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组方法",children:"#"})]}),"\n",(0,l.jsxs)(n.h4,{id:"添加元素",children:["添加元素",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加元素",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"push()"}),"：向数组的末尾添加一个或多个元素，并返回新的长度。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"fruits.push('Elderberry'); // 添加一个元素到数组的末尾\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unshift()"}),"：向数组的开头添加一个或多个元素，并返回新的长度。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"fruits.unshift('Strawberry'); // 添加一个元素到数组的前端\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"删除元素",children:["删除元素",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除元素",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"pop()"}),"：删除数组的最后一个元素，并返回该元素。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let removedFruit = fruits.pop(); // 移除最后一个元素\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"shift()"}),"：删除数组的第一个元素，并返回该元素。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let firstRemovedFruit = fruits.shift(); // 移除第一个元素\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"其他方法",children:["其他方法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他方法",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"slice()"}),"：提取数组的一部分，并返回一个新数组。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let citrus = fruits.slice(1, 3); // 获取索引1到2的元素\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"splice()"}),"：通过删除现有元素和 / 或添加新元素来更改数组的内容。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"fruits.splice(1, 0, 'Orange', 'Grape'); // 从索引1开始，删除0个元素，然后添加'Orange'和'Grape'\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"map()"}),"、",(0,l.jsx)(n.code,{children:"filter()"}),"、",(0,l.jsx)(n.code,{children:"reduce()"})," 等迭代方法用于对数组的每个元素执行操作。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let prices = fruits.map((fruit) => fruit + ' $1'); // 返回一个新数组，元素后面添加了'$1'\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"遍历数组",children:["遍历数组",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#遍历数组",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["使用 ",(0,l.jsx)(n.code,{children:"for"})," 循环可以遍历数组中的所有元素："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"for (let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["使用 ",(0,l.jsx)(n.code,{children:"forEach()"})," 方法："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"fruits.forEach((fruit) => {\n  console.log(fruit);\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"函数",children:["函数",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数",children:"#"})]}),"\n",(0,l.jsxs)(n.h3,{id:"函数定义",children:["函数定义",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数定义",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"函数用于封装完成一段特定功能的代码"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"相当于将一条或多条语句组成的代码块包裹起来"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"用户在使用时只需要关心参数和返回值,就能完成特定的功能,而不用了解具体的实现"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"function name(params) {\n\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"function是用来声明函数的一个语句"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"name是函数名"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"params是函数参数"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"{}内放函数的具体功能"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"函数返回值",children:["函数返回值",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数返回值",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"函数的返回值是指函数在调用后获得的数据"}),"\n",(0,l.jsxs)(n.p,{children:["在定义函数时,可以为函数指定一个返回值并退出函数，使用 ",(0,l.jsx)(n.code,{children:"return"})," 语句来返回一个值。如果没有指定返回值，则函数会返回 ",(0,l.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:" function total01(price,num) {\n 	all = price * num \n 	return all\n }\n console.log(total01(9999,12));    \n"})}),"\n",(0,l.jsxs)(n.h3,{id:"获取函数调用时传递所有实参",children:["获取函数调用时传递所有实参",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取函数调用时传递所有实参",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:" \n function num (a,b){\n 	console.log(a,b);\n }  \n num (1,2) //1,2\n num (1,2,3,4,5)\n num(1) //1 undefined\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"扩展运算符",children:["...扩展运算符",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展运算符",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:" \n function num1(...nums){\n 	console.log(nums);\n }\n num1(1,2,3,4,5) //1,2,3,4,5\n num1(1,2,3) //1,2,3\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"arguments-对象",children:["arguments 对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arguments-对象",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"如果不确定形参的个数,可以不设置形参，在函数体中直接通过arguments对象获取函数调用时传递的实参"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"function num2(){\n	console.log(arguments);\n	console.log(arguments.length);\n}\nnum2(1,2,3,4,5)\nnum2(1,2,3)\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"函数中变量作用域",children:["函数中变量作用域",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数中变量作用域",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"全局变量: 在函数体外声明的变量或者在函数体内省略var关键字声明的变量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"var a =10\n \nfunction demo(){\n\n	console.log(a);\n\n}\n\ndemo()\n\nconsole.log(a); //  a为全局变量,在函数体外也可以被访问\n"})}),"\n",(0,l.jsx)(n.p,{children:"局部变量:在函数体内利用let关键声明的变量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:" function demo1(){\n \n     let b =10\n\n     console.log(b); // 函数内部定义的局部变量b,可以在函数内部被访问\n\n\n     c = 20; //c是省略var关键字声明的变量,为全局变量\n\n     console.log(c);\n\n }\n\ndemo1() //10\n\n// console.log(b);  //b is notdefined 不可以在函数外访问局部变量b\n\nconsole.log(c); // 可以在函数外访问到全局变量c\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"匿名函数",children:["匿名函数",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#匿名函数",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"在声明函数的时候没有指定函数名，而是赋值给一个变量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"var fn2 = function (num1,num2) {\n    console.log(num1+num2);\n}\nfn2(1,2) //3\n\nvar fn3 = function (num1,num2) {\n    console.log(num1+num2);\n}\nfn3(1,2) //3\n\nvar fn4 = function (num1,num2) {\n    console.log(num1+num2);\n}\nfn4(1,2) //3\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"箭头函数",children:["箭头函数",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#箭头函数",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"var fn5 =  (num1,num2) => {\n    console.log(num1+num2);\n}\nfn5(1,2)\n//  当函数体只有一句话时,可以省略大括号\nvar fn6 =  (num1,num2) =>  console.log(num1+num2);\nfn6(1,2)\n\n// 当函数只有一句话代码,并且函数的执行结果就是函数的返回值\n// 可以省略函数的大括号和return关键字 \nvar fn7 = (num1,num2) => num1 + num2\nfn7(1,2)\n\n// 当参数只有一个时,可以省略函数外部的小括号\nvar fn8 = num1 => num1 + num1 \nconsole.log(fn8(9));\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"定时器",children:["定时器",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#定时器",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"setInterval()"})}),"\n",(0,l.jsx)(n.p,{children:"指定时间间隔，间隔时间一到，代码就会执行一次"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'setInterval(function(){\n    console.log("起来走一走");\n},5000)\n\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"setTimeout"})}),"\n",(0,l.jsx)(n.p,{children:"用来指某个函数或某段代码在多少毫秒以后执行"}),"\n",(0,l.jsx)(n.p,{children:"setTinmeout指定的代码,必须等同步代码执行完成后执行"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'setTimeout(function(){\n    console.log("下班");\n},3000)\nconsole.log(1);\n\nsetTimeout(function(){\n    console.log(2);\n},0)\n\nconsole.log(3);\n\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"对象",children:["对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"对象是一种复杂数据类型，以赋值的形式存储多个数据"}),"\n",(0,l.jsx)(n.p,{children:"新建对象"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'let obj= {\n    // 键: 值\n    name: "张三",\n    age:30,\n    sex :"男",\n    gfs:["小花","小美","小绿"],\n    sayHi: function(){\n        console.log("哈哈哈");\n    }\n}\nconsole.log(obj);  // {name:"张三",age: 30,  sex: "男"}\n'})}),"\n",(0,l.jsx)(n.p,{children:"对象查询"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log(obj.name);\nconsole.log(obj["age"]);\nconsole.log(obj.sayHi());\n'})}),"\n",(0,l.jsx)(n.p,{children:"对象新增"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'obj.bf="李四"\nconsole.log(obj);\n'})}),"\n",(0,l.jsx)(n.p,{children:"对象修改"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"对于对象的属性,如果有这个属性,是修改属性值:如果没有这个属性,是新增"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'obj.bf="王五"\nconsole.log(obj);\n'})}),"\n",(0,l.jsx)(n.p,{children:"对象删除"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"delete obj.age\nconsole.log(obj);\n"})}),"\n",(0,l.jsx)(n.p,{children:"对象遍历"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let score = {\n    math:99,\n    history:80,\n    geology:70,\n    ehglish:60\n}\nfor (let key in score) {\n    console.log(key); // 打印属性名\n    console.log(score[key]); //打印属性值\n\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"string对象",children:["String对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#string对象",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"String"})," 对象是用于表示和操作字符串的内置对象。字符串是表示文本数据的字符序列。在 JavaScript 中，字符串是不可变的，这意味着字符串一旦创建，其值就不能更改。"]}),"\n",(0,l.jsxs)(n.h3,{id:"创建字符串",children:["创建字符串",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建字符串",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"字面量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let str = "Hello, World!";\n'})}),"\n",(0,l.jsx)(n.p,{children:"String 构造函数"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let str = new String("Hello, World!");\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"字符串的属性",children:["字符串的属性",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串的属性",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"length"}),"获取字符串的长度"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'let message = "Hello";\nconsole.log(message.length); // 输出: 5\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"字符串方法",children:["字符串方法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串方法",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"查找和替换"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"charAt(index)"}),"：返回指定索引位置的字符。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"charCodeAt(index)"}),"：返回在指定的索引处字符的 Unicode 编码。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"indexOf(searchValue, fromIndex)"}),"：返回指定值第一次出现的索引，如果不存在，则返回 - 1。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"lastIndexOf(searchValue, fromIndex)"}),"：返回指定值最后一次出现的索引，如果不存在，则返回 - 1。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"search(regexp)"}),"：对正则表达式和指定的字符串进行匹配搜索。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"replace(searchFor, replaceWith)"}),"：在字符串中用一些字符替换另一些字符，或者替换一个与正则表达式匹配的子串。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'let str = "Hello world!";\nconsole.log(str.charAt(1)); // 输出: \'e\'\nconsole.log(str.charCodeAt(1)); // 输出: 101\nconsole.log(str.indexOf("world")); // 输出: 6\nconsole.log(str.search(/world/)); // 输出: 6\nconsole.log(str.replace("world", "everyone")); // 输出: "Hello everyone!"\n'})}),"\n",(0,l.jsx)(n.p,{children:"切片和分割"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"slice(startIndex, endIndex)"}),"：提取字符串的某个部分，并返回一个新的字符串。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"substring(startIndex, endIndex)"}),"：返回字符串中介于两个指定索引之间的字符。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"split(separator, limit)"}),"：把一个字符串分割成字符串数组。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log(str.slice(0, 5)); // 输出: "Hello"\nconsole.log(str.substring(0, 5)); // 输出: "Hello"\nconsole.log(str.split(" ")); // 输出: ["Hello", "world!"]\n'})}),"\n",(0,l.jsx)(n.p,{children:"转换大小写"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLowerCase()"}),"：将字符串转换为小写。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toUpperCase()"}),"：将字符串转换为大写。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLocaleLowerCase()"}),"：根据当前区域设置，将字符串转换为小写。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLocaleUpperCase()"}),"：根据当前区域设置，将字符串转换为大写。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log(str.toLowerCase()); // 输出: "hello world!"\nconsole.log(str.toUpperCase()); // 输出: "HELLO WORLD!"\n'})}),"\n",(0,l.jsx)(n.p,{children:"其他方法"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concat(value1, value2, ..., valueN)"}),"：连接两个或多个字符串，并返回新的字符串。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"includes(searchString, position)"}),"：判断字符串是否包含指定的子字符串。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"startsWith(searchString, position)"}),"：判断字符串是否以指定的子字符串开头。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"endsWith(searchString, position)"}),"：判断字符串是否以指定的子字符串结尾。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"trim()"}),"：从字符串的两端删除空白字符。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'console.log(str.concat(" ", "Have a nice day.")); // 输出: "Hello world! Have a nice day."\nconsole.log(str.includes("world")); // 输出: true\nconsole.log(str.startsWith("Hello")); // 输出: true\nconsole.log(str.endsWith("!")); // 输出: true\nconsole.log(str.trim()); // 如果str有前后空格，将删除它们\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"array对象",children:["Array对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#array对象",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Array"})," 对象用于表示一组有序的数据集合，数组中的每个数据项称为元素。数组是动态的数据结构，可以包含任意数量的元素，这些元素可以是不同类型的值。"]}),"\n",(0,l.jsxs)(n.h3,{id:"创建数组-1",children:["创建数组",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建数组-1",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"使用数组字面量"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let fruits = ['Apple', 'Banana', 'Cherry'];\n"})}),"\n",(0,l.jsx)(n.p,{children:"使用 Array 构造函数"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let fruits = new Array('Apple', 'Banana', 'Cherry');\n"})}),"\n",(0,l.jsxs)(n.p,{children:["如果 ",(0,l.jsx)(n.code,{children:"Array"})," 构造函数只接收一个数字参数，它将创建一个具有指定长度的空数组。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let emptyArray = new Array(3); // 创建一个长度为3的空数组\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"数组属性",children:["数组属性",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组属性",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"length"}),"：表示数组中元素的个数。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"console.log(fruits.length); // 输出: 3\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"数组方法-1",children:["数组方法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组方法-1",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"这些方法会改变原数组。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"push(element1, ..., elementN)"}),"：在数组末尾添加一个或多个元素，并返回新的长度。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pop()"}),"：删除数组的最后一个元素，并返回该元素。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"shift()"}),"：删除数组的第一个元素，并返回该元素。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"unshift(element1, ..., elementN)"}),"：在数组开头添加一个或多个元素，并返回新的长度。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"splice(start, deleteCount, item1, ..., itemN)"}),"：通过删除现有元素和 / 或添加新元素来更改数组内容。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sort()"}),"：对数组元素进行排序。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"reverse()"}),"：颠倒数组中元素的顺序。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"fruits.push('Durian'); // 添加元素到数组末尾\nfruits.pop(); // 移除数组末尾的元素\nfruits.unshift('Strawberry'); // 添加元素到数组开头\nfruits.shift(); // 移除数组开头的元素\nfruits.splice(1, 1, 'Peach', 'Plum'); // 从索引1开始删除1个元素，并添加'Peach'和'Plum'\nfruits.sort(); // 对数组进行排序\nfruits.reverse(); // 颠转数组顺序\n"})}),"\n",(0,l.jsx)(n.p,{children:"这些方法返回数组的一个部分或新数组，不会改变原数组。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"slice(start, end)"}),"：提取数组的一部分，并返回一个新数组。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"join(separator)"}),"：将数组元素连接成一个字符串，用指定的分隔符分隔每个元素。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concat(value1, value2, ..., valueN)"}),"：合并多个数组，并返回一个新数组。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let selectedFruits = fruits.slice(1, 3); // 获取索引1到2的元素\nlet fruitString = fruits.join(', '); // 将数组元素连接成一个以逗号分隔的字符串\nlet moreFruits = fruits.concat(['Grape', 'Mango']); // 合并数组\n"})}),"\n",(0,l.jsx)(n.p,{children:"检查方法"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"indexOf(searchElement, fromIndex)"}),"：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 - 1。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"lastIndexOf(searchElement, fromIndex)"}),"：返回指定元素在数组中的最后一个的索引，如果不存在则返回 - 1。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let index = fruits.indexOf('Banana'); // 寻找'Banana'的索引\n"})}),"\n",(0,l.jsx)(n.p,{children:"迭代方法"}),"\n",(0,l.jsx)(n.p,{children:"这些方法对数组的每个元素执行一个提供的函数。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"forEach(callback(currentValue, index, array), thisArg)"}),"：对数组的每个元素执行一次提供的函数。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"map(callback(currentValue, index, array), thisArg)"}),"：创建一个新数组，其结果是该数组中的每个元素调用一次提供的函数后的返回值。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter(callback(element, index, array), thisArg)"}),"：创建一个新数组，包含通过所提供函数实现的测试的所有元素。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"fruits.forEach(function(item, index) {\n  console.log(item, index);\n});\nlet mappedFruits = fruits.map(function(item) {\n  return item.toUpperCase();\n});\nlet filteredFruits = fruits.filter(function(item) {\n  return item.startsWith('P');\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"其他方法"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"some(callback(element, index, array), thisArg)"}),"：测试数组中的元素是否至少有一个满足提供的测试函数。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"every(callback(element, index, array), thisArg)"}),"：测试数组中的所有元素是否都满足提供的测试函数。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let hasP = fruits.some(function(item) {\n  return item.startsWith('P');\n});\nlet allStartWithP = fruits.every(function(item) {\n  return item.startsWith('P');\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"date对象",children:["Date对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#date对象",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["JavaScript 的 ",(0,l.jsx)(n.code,{children:"Date"})," 对象用于处理日期和时间。它基于 1970 年 1 月 1 日（UTC）以来的毫秒数来表示日期。"]}),"\n",(0,l.jsxs)(n.h3,{id:"创建date对象",children:["创建Date对象",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建date对象",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["创建一个表示当前日期和时间的 ",(0,l.jsx)(n.code,{children:"Date"})," 对象。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let now = new Date();\n"})}),"\n",(0,l.jsx)(n.p,{children:"使用时间戳"}),"\n",(0,l.jsx)(n.p,{children:"时间戳是自 1970 年 1 月 1 日（UTC）以来经过的毫秒数。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let timestamp = new Date(1637232000000); // 使用时间戳创建日期\n"})}),"\n",(0,l.jsx)(n.p,{children:"使用日期字符串"}),"\n",(0,l.jsxs)(n.p,{children:["你可以传递一个表示日期的字符串给 ",(0,l.jsx)(n.code,{children:"Date"})," 构造函数。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'let date = new Date("2023-11-18");\n'})}),"\n",(0,l.jsx)(n.p,{children:"使用年、月、日等参数"}),"\n",(0,l.jsxs)(n.p,{children:["你可以直接指定年、月、日、时、分、秒和毫秒来创建一个 ",(0,l.jsx)(n.code,{children:"Date"})," 对象。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"let specificDate = new Date(2023, 10, 18, 12, 30, 45, 0); // 注意月份是从0开始的，即0代表1月\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"属性",children:["属性",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Date"})," 对象没有直接可供访问的属性，但以下方法返回日期的组成部分："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getTime()"}),"：返回自 1970 年 1 月 1 日以来的毫秒数（时间戳）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCFullYear()"}),"：返回表示年份的整数（根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMonth()"}),"：返回表示月份的整数（0-11，根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCDate()"}),"：返回表示月份中的某一天（1-31，根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCHours()"}),"：返回表示小时数的整数（0-23，根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMinutes()"}),"：返回表示分钟数的整数（0-59，根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCSeconds()"}),"：返回表示秒钟数的整数（0-59，根据 UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMilliseconds()"}),"：返回表示毫秒数的整数（0-999，根据 UTC）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"方法",children:["方法",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方法",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"以下方法用于获取日期和时间的不同部分："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getTime()"}),"：获取时间戳（毫秒）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCDate()"}),"：获取月份中的某一天（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCDay()"}),"：获取星期中的某一天（0-6，UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCFullYear()"}),"：获取四位数的年份（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCHours()"}),"：获取小时数（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMilliseconds()"}),"：获取毫秒数（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMinutes()"}),"：获取分钟数（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCMonth()"}),"：获取月份（0-11，UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getUTCSeconds()"}),"：获取秒数（UTC）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"以下方法用于设置日期和时间的不同部分："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setTime(milliseconds)"}),"：设置时间戳（毫秒）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCDate(day)"}),"：设置月份中的某一天（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCFullYear(year, month, day)"}),"：设置年份（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCHours(hours, minutes, seconds, milliseconds)"}),"：设置小时数（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCMinutes(minutes, seconds, milliseconds)"}),"：设置分钟数（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCMonth(month, day)"}),"：设置月份（UTC）。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"setUTCSeconds(seconds, milliseconds)"}),"：设置秒数（UTC）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"以下方法用于转换格式"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"toString()"}),"：将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象转换为易读的字符串形式。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"toUTCString()"}),"：将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象转换为对应的 UTC 字符串。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"toISOString()"}),"：将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象转换为 ISO 格式的字符串。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"toJSON()"}),"：将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象转换为 JSON 格式的字符串。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"其他方法"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"valueOf()"}),"：返回 ",(0,l.jsx)(n.code,{children:"Date"})," 对象的原始值（时间戳）。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLocaleString()"}),"：根据本地时间格式，将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象转换为字符串。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLocaleDateString()"}),"：根据本地时间格式，将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象的日期部分转换为字符串。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"toLocaleTimeString()"}),"：根据本地时间格式，将 ",(0,l.jsx)(n.code,{children:"Date"})," 对象的时间部分转换为字符串。"]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["program%2F%E5%89%8D%E5%90%8E%E7%AB%AF%2FJS%E5%9F%BA%E7%A1%80.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"基本用法",id:"基本用法",depth:2},{text:"输出语句",id:"输出语句",depth:3},{text:"JS代码引入方式",id:"js代码引入方式",depth:2},{text:"JS基础语法",id:"js基础语法",depth:2},{text:"变量的声明与赋值",id:"变量的声明与赋值",depth:3},{text:"变量声明和区别",id:"变量声明和区别",depth:2},{text:"常量",id:"常量",depth:2},{text:"基本数据类型",id:"基本数据类型",depth:2},{text:"数据类型检查",id:"数据类型检查",depth:2},{text:"算数运算符",id:"算数运算符",depth:2},{text:"字符串运算符&隐式转换",id:"字符串运算符隐式转换",depth:2},{text:"赋值运算符",id:"赋值运算符",depth:2},{text:"比较运算符",id:"比较运算符",depth:2},{text:"逻辑运算符",id:"逻辑运算符",depth:2},{text:"三元表达式",id:"三元表达式",depth:2},{text:"if选择结构",id:"if选择结构",depth:2},{text:"循环结构",id:"循环结构",depth:2},{text:"for循环",id:"for循环",depth:3},{text:"while循环",id:"while循环",depth:3},{text:"do...while循环",id:"dowhile循环",depth:3},{text:"循环控制",id:"循环控制",depth:3},{text:"数组",id:"数组",depth:2},{text:"创建数组",id:"创建数组",depth:3},{text:"数组方法",id:"数组方法",depth:3},{text:"添加元素",id:"添加元素",depth:4},{text:"删除元素",id:"删除元素",depth:4},{text:"其他方法",id:"其他方法",depth:4},{text:"遍历数组",id:"遍历数组",depth:4},{text:"函数",id:"函数",depth:2},{text:"函数定义",id:"函数定义",depth:3},{text:"函数返回值",id:"函数返回值",depth:3},{text:"获取函数调用时传递所有实参",id:"获取函数调用时传递所有实参",depth:3},{text:"...扩展运算符",id:"扩展运算符",depth:3},{text:"arguments 对象",id:"arguments-对象",depth:3},{text:"函数中变量作用域",id:"函数中变量作用域",depth:3},{text:"匿名函数",id:"匿名函数",depth:3},{text:"箭头函数",id:"箭头函数",depth:3},{text:"定时器",id:"定时器",depth:2},{text:"对象",id:"对象",depth:2},{text:"String对象",id:"string对象",depth:2},{text:"创建字符串",id:"创建字符串",depth:3},{text:"字符串的属性",id:"字符串的属性",depth:3},{text:"字符串方法",id:"字符串方法",depth:3},{text:"Array对象",id:"array对象",depth:2},{text:"创建数组",id:"创建数组-1",depth:3},{text:"数组属性",id:"数组属性",depth:3},{text:"数组方法",id:"数组方法-1",depth:3},{text:"Date对象",id:"date对象",depth:2},{text:"创建Date对象",id:"创建date对象",depth:3},{text:"属性",id:"属性",depth:3},{text:"方法",id:"方法",depth:3}],title:"JS基础教程",headingTitle:"JS基础教程",frontmatter:{Author:"lixintao"}}}}]);