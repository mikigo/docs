"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6031"],{5594:function(e,n,i){i.r(n),i.d(n,{default:()=>c});var s=i(2676),d=i(453);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",code:"code",h2:"h2",h4:"h4",pre:"pre",ul:"ul",li:"li",h3:"h3"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"vim配置和插件使用",children:["vim配置和插件使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vim配置和插件使用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"类 Unix 系统中有两大编辑器，Emacs 是神的编辑器，而 Vim 是编辑器之神， 而 Vim 是从 vi 发展出来的一个文本编辑器。有代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。"}),"\n",(0,s.jsx)(n.p,{children:"vim键盘图："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Vim"})," 之所以被称为编辑器之神，就是因为系统资源占用小, 打开大文件毫无压力,可配置性强，自定义性高，可根据编码语言和个人喜好进行配置和选择。"]}),"\n",(0,s.jsxs)(n.h2,{id:"1-vim使用",children:["1. VIM使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-vim使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"vim"}),"有三种模式，命令模式，可视模式，输入模式"]}),"\n",(0,s.jsxs)(n.h4,{id:"11-搜索和替换",children:["1.1 搜索和替换",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-搜索和替换",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"?word"}),"：反向搜索，效果上跟",(0,s.jsx)(n.code,{children:"/word"}),", 按 ",(0,s.jsx)(n.code,{children:"N"})," 一样"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":n1,n2s/word1/word2/g"}),"： n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":1,$s/word1/word2/g"}),"或者",(0,s.jsx)(n.code,{children:":%s/word1/word2/g"}),"：从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2"]}),"\n",(0,s.jsxs)(n.h4,{id:"12-删除与复制",children:["1.2 删除与复制",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-删除与复制",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"x,X"}),"：在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"nx"}),"：n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"dd"}),"： 删除游标所在的那一整行(常用)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ndd"}),"：n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"d1G"}),"：删除光标所在到第一行的所有数据，相对dG就是删除光标所在行到最后一行的数据。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"d$"}),"：删除游标所在处，到该行的最后一个字符"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"d0"}),"：是数字0不是o，删除行首到光标处的字符"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tips"}),"：把d换成y就是复制相关操作。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"p,P"}),"：p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"J"}),"：合并光标所在行和下一行。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"[Ctrl]+r"}),"：重做上一个动作"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:". "}),"：英文中的点号，就是重复上一个动作，比如先执行了dd命令，如果还想删除当前行，就按.就行了。"]}),"\n",(0,s.jsxs)(n.h4,{id:"13-编辑模式",children:["1.3 编辑模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-编辑模式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:" I"})," ：大写的字符I，所在行的第一个非空格符处开始输入"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"a, A"}),"：a 为从目前光标所在的下一个字符处开始输入 ，A 为从光标所在行的最后一个字符处开始输入"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"r, R"}),"：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字"]}),"\n",(0,s.jsxs)(n.h4,{id:"14-一般模式切换到指令行模式",children:["1.4 一般模式切换到指令行模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14-一般模式切换到指令行模式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ZZ"}),"：大写的Z，相当于:wq"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ZQ"}),"：不保存强制退出"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":w filename"}),"：保存到另外一个新文件"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":n1,n2 w filename"}),"：将 n1 到 n2 的内容储存成 filename 这个档案"]}),"\n",(0,s.jsxs)(n.h4,{id:"15-环境变量设置",children:["1.5 环境变量设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15-环境变量设置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":set number"}),"：设置显示行号"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":set nonumber"}),"：设置隐藏行号"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":set paste"}),"：粘贴模式，从外部复制代码到vim编辑器中，直接粘贴原来的代码格式就不会保留，这么模式下会保留原来的格式"]}),"\n",(0,s.jsxs)(n.h4,{id:"16-可视模式",children:["1.6 可视模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16-可视模式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["批量添加注释：",(0,s.jsx)(n.code,{children:"ctrl+v"}),"进入块选择模式，按下选中要添加注释的行，再按大写的字母",(0,s.jsx)(n.code,{children:"I"}),"，输入注释，再按两次",(0,s.jsx)(n.code,{children:"ESC"}),"保存"]}),"\n",(0,s.jsxs)(n.p,{children:["批量删除注释：",(0,s.jsx)(n.code,{children:"ctrl+v"}),"进入块选择模式，如果注释为 ",(0,s.jsx)(n.code,{children:"//"}),",那么就按右键，选中 ",(0,s.jsx)(n.code,{children:"//"}),"，再按下，选择要删除的行，再按小写字符",(0,s.jsx)(n.code,{children:"d"}),"，再按",(0,s.jsx)(n.code,{children:"ESC"}),"保存"]}),"\n",(0,s.jsxs)(n.h2,{id:"2-配置说明",children:["2. 配置说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-配置说明",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"vim 样式配置"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:'" 基础配置设置\nfiletype on                                                                             "检测文件类型\nfiletype indent on                                                                      "针对不同的文件类型采用不同的缩进格式\nfiletype plugin on                                                                      "允许插件\nfiletype plugin indent on                                                               "启动自动补全\n"autocmd! bufwritepost _vimrc source %                                                  "vimrc文件修改之后自动加载。 windows。\n"autocmd! bufwritepost .vimrc source %                                                  "vimrc文件修改之后自动加载。 linux。\nsyntax enable                                                                           "开启代码高亮\nsyntax on                                                                               "打开高亮\nset completeopt=longest,menu                                                            "自动补全配置,让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)\n"set relativenumber number                                                               "相对行号，可用Ctrl+n在相对/绝对行号间切换\nset cursorcolumn                                                                        "突出显示当前列，可用Ctrl+m切换是否显示\n"set cursorline                                                                         "突出显示当前行，可用Ctrl+m切换是否显示\nset history=3000                                                                        "history存储长度\nset nocompatible                                                                        "非兼容vi模式,避免以前版本的一些bug和局限\nset nu                                                                                  "显示行数 \nset shiftwidth=4                                                                        "换行时行间交错使用4空格\nset cindent shiftwidth=4                                                                "自动缩进4空格\nset tabstop=4                                                                           "让一个tab等于4个空格,Python必须设置.\nset vb t_vb=\nset showmatch                                                                           "显示括号配对情况\nset autoread                                                                            "当文件在外部被改变时，Vim自动更新载入\nset nowrap                                                                              "设置不自动换行\nset writebackup                                                                         "设置无备份文件\nset nobackup                                                                            "取消备份。 视情况自己改\nset noswapfile                                                                          "关闭交换文件\nset showmode                                                                            "开启模式显示  \nset cmdheight=1                                                                         "命令部分高度为1 \nset shortmess=atI                                                                       "启动的时候不显示那个援助索马里儿童的提示\nset t_ti= t_te=                                                                         "退出vim后，内容显示在终端屏幕 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制好处：误删什么的，如果以前屏幕打开，可以找回\n" 去掉输入错误的提示声音\nset title                                                                               "change the terminal\'s title\nset novisualbell                                                                        "don\'t beep\nset noerrorbells                                                                        "don\'t beep\nset t_vb=\nset tm=500\n\n"set backup                                                                             "备份\n"set backupext=.bak\n"set backupdir=/tmp/vimbk/\nset mat=4                                                                               "Blink times every second when matching brackets\nset hidden                                                                              "A buffer becomes hidden when it is abandoned\nset wildmode=list:longest																":e 打开文件的时候,tab键显示的结果,显示不了则显																						"示--More--\nset ttyfast\nset wildignore=*.swp,*.bak,*.pyc,*.class\nset scrolloff=3                                                                         "至少有3行在光标所在行上下\nset selection=old\nset textwidth=80                                                                        "字符超过80自动换行\nset wrapmargin=2																		"从窗口右侧向左数的列数来自动换行\nset selectmode=mouse,key\nset viminfo^=%                                                                          "Remember info about open buffers on close\nset viminfo+=!                                                                          " 保存全局变量\nset magic                                                                               "正则表达式匹配形式\nset backspace=eol,start,indent                                                          "Configure backspace so it acts as it should act\n"set backspace=indent,eol,start whichwrap+=<,>,[,]                                      "允许退格键的使用\n"set iskeyword+=_,$,@,%,#,-                                                             "带有如下符号的单词不要被换行分割 \nset iskeyword+=_,$,@,%,#                                                                "带有如下符号的单词不要被换行分割 \n" 字符间插入的像素行数目\nau BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn}   set filetype=mkd   "markdown配置\n\n"set go=                                                                                        "不要图形按钮 set guioptions缩写 \nset cul                                                                                         "高亮光标所在行\nautocmd InsertEnter * se cul                                                                    "用浅色高亮当前行  \nset ruler                                                                                       "显示标尺  \nset showcmd                                                                                     "输入的命令显示出来，看的清楚些  \n"设置标记一列的背景颜色和数字一行颜色一致\nhi! link SignColumn   LineNr\nhi! link ShowMarksHLl DiffAdd\nhi! link ShowMarksHLu DiffChange\n"set statusline=%F%m%r%h%w\\ [FORMAT=%{&ff}]\\ [TYPE=%Y]\\ [POS=%l,%v][%p%%]\\ %{strftime(\\"%d/%m/%y\\ -\\ %H:%M\\")}  "状态行显示的内容\nset statusline+=%f                                                                              "不显示工具条\nset laststatus=5                                                                                "启动显示状态行(1),总是显示状态行(2)  \n"set ignorecase                                                                                  "搜索时忽略大小写 \nset hlsearch                                                                                     "高亮显示结果\n"set nohlsearch                                                                                  "关闭搜索高亮  \nset incsearch                                                                                    "在输入要搜索的文字时，vim会实时匹配\n""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n"""""""""""""""""""""" color""""""""""""""""""""""""""""""""""""""""""""""""""""\n""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\nif &bg == "dark"                                                                                        " 根据你的背景色风格来设置不同的书签颜色\n highlight SignColor ctermfg=white ctermbg=blue guifg=wheat guibg=peru\nelse                                                                                                    " 主要就是修改guibg的值来设置书签的颜色\n highlight SignColor ctermbg=white ctermfg=blue guibg=grey guifg=RoyalBlue3\nendif\n\nif $TERM =~ \'^xterm\' || $TERM =~ \'^screen\' || $TERM=~ \'256color$\'\n    set t_Co=256\n    set background=dark\n        colorscheme maroloccio\nelseif has(\'gui_running\')\n    set background=light\n    colorscheme solarized\nelseif $TERM =~ \'cons256\'\n    colorscheme default\nendif\n\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"21-快捷键设置",children:["2.1 快捷键设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-快捷键设置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"vim设置快捷键共4中方法"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"map系列命令"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"map {lhs} {rhs}"}),"。这个命令就是将",(0,s.jsx)(n.code,{children:"{lhs}"}),"代表的按键映射成",(0,s.jsx)(n.code,{children:"{rhs}"}),"所代表的按键。例如map L ",(0,s.jsx)(n.code,{children:"$"}),"就是将",(0,s.jsx)(n.code,{children:"$"}),"键映射成L。此外需要注意的是map命令定义的快捷键是可以嵌套的"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"noremap系列命令"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"no[remap] {lhs} {rhs}"}),"，顾名思义，就是不可以重新映射的命令。这个命令和 map 命令类似，不过它所定义的命令不可以被重新映射"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"unmap系列命令"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"就是用来取消所在模式下快捷键的定义"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"mapclear系命令"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"清除所在模式下定义的所有快捷键"}),"\n",(0,s.jsxs)(n.h4,{id:"22-自定义快捷键相关的六种模式",children:["2.2 自定义快捷键相关的六种模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-自定义快捷键相关的六种模式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在Vim中，共有六种模式，不同的定义快捷键的命令生效的模式不同，这六种模式如下："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"N ormal Mode: 即Vim的普通模式，我们打开Vim后进入的第一个模式即此模式。"}),"\n",(0,s.jsx)(n.li,{children:"V isual Mode: 即Vim的Visual模式，我们在选中了一定的文本之后(通过v或者V命令)即进入此模式。"}),"\n",(0,s.jsx)(n.li,{children:"S elect Mode: 这种模式和Visual模式相似，不过输入的文本都会替换选中的文本。在普通模式下，通过鼠标选中或者使用gH命令都可以进入此模式。"}),"\n",(0,s.jsx)(n.li,{children:"O perator-pending Mode: 当我们输入一个操作符后(例如，d，y，c等等)，就会进入此模式。"}),"\n",(0,s.jsx)(n.li,{children:"I nsert Mode: 即Vim的插入模式，普通模式下我们输入i(或者s,a等等)就会进入此模式。"}),"\n",(0,s.jsx)(n.li,{children:"C ommand-line Mode: 命令行模式，我们在普通模式下输入:或者/等就会进入此模式"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'        noremap <F1> <Esc>"\n        nnoremap <F2> :set nonumber! number?<CR>\n        nnoremap <F3> :set wrap! wrap?<CR>\n        nmap <silent> <F4> :TagbarToggle<CR> "按下F4就可以呼出文件的函数列表及变量\n        map <F12> :call Do_CsTag()<CR>\n        function Do_CsTag()\n        endfunction\n'})}),"\n",(0,s.jsxs)(n.p,{children:["插件寻找位置：",(0,s.jsx)(n.a,{href:"https://vimawesome.com/",target:"_blank",rel:"noopener noreferrer",children:"https://vimawesome.com/"})]}),"\n",(0,s.jsxs)(n.h2,{id:"3-vim插件",children:["3. vim插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-vim插件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"插件管理器：顾名思义就是管理插件的工具，在 vim8 之前都是采用三方工具管理插件，vim8有了自己插件管理器package，"}),"\n",(0,s.jsx)(n.p,{children:"常见的第三方vim插件管理有Vundle， vim-plug， dein， pathogen，Volt"}),"\n",(0,s.jsx)(n.p,{children:"本文只介绍Vundle，最早的 vim 插件管理器，最新的 vim-plug 相比 Vundle 多了异步功能"}),"\n",(0,s.jsxs)(n.p,{children:["项目地址：",(0,s.jsx)(n.a,{href:"https://github.com/VundleVim/Vundle.vim",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/VundleVim/Vundle.vim"})]}),"\n",(0,s.jsx)(n.p,{children:"安装 Vundle ："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir ~/.vim\nmkdir ~/.vim/bundle\ncd ~/.vim/bundle\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n"})}),"\n",(0,s.jsx)(n.p,{children:"修改 .vimrc 配置文件，在 call vundle#begin() 和 call vundle#end() 之间添加指定的插件保存并执行PluginInstall命令进行安装"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"call vundle#begin()\n\"call vundle#begin('~/some/path/here')\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\" Plugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\nPlugin 'MarcWeber/vim-addon-mw-utils'\nPlugin 'tomtom/tlib_vim'\nPlugin 'garbas/vim-snipmate'\nPlugin 'davidhalter/jedi-vim'\nPlugin 'nvie/vim-flake8'\nPlugin 'klen/python-mode'\nPlugin 'google/vim-maktaba'\nPlugin 'google/vim-codefmt'\nPlugin 'google/vim-glaive'\ncall vundle#end() \" requiredfiletype plugin indent on \" required\n"})}),"\n",(0,s.jsx)(n.p,{children:"执行安装命令后的效果，有些插件需要需要梯子才能正常安装"}),"\n",(0,s.jsx)(n.p,{children:"Vundle可以进行插件安装卸载，及列出插件列表，对应命令：PluginClean    PluginDocs     PluginInstall  PluginList     PluginSearch   PluginUpdate"}),"\n",(0,s.jsxs)(n.h3,{id:"31-插件安装方式",children:["3.1 插件安装方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-插件安装方式",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"从github上安装："}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Plugin 'user/plugin'"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"从特定的网址安装"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Plugin 'plugin_name'"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"从一个git库里面安装"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Plugin 'git://url.git'"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"本地安装"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Plugin 'file:///path'"})}),"\n",(0,s.jsx)(n.p,{children:"从github安装，如果没有梯子，可能会安装失败，国内有个代码托管平台码云（gitee）可以直接同步到gitee中，然后再指定选择ssh的地址进行安装，再通过git仓库的方式进行安装。"}),"\n",(0,s.jsxs)(n.p,{children:["还可以将插件克隆到 ",(0,s.jsx)(n.code,{children:".vim/bundle"})," 下，使用本地安装的方式进行安装"]}),"\n",(0,s.jsxs)(n.h3,{id:"32-安装ack插件使用",children:["3.2 安装ack插件使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-安装ack插件使用",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["安装ack, ",(0,s.jsx)(n.code,{children:"sudo apt install ack"})]}),"\n",(0,s.jsx)(n.li,{children:"clone 代码到.vim/bundle,"}),"\n",(0,s.jsxs)(n.li,{children:["使用命令: ",(0,s.jsx)(n.code,{children:"Ack word"}),"搜索字符串"]}),"\n",(0,s.jsxs)(n.li,{children:["设置快捷键",(0,s.jsx)(n.code,{children:"nnoremap <F8> :Ack"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"33-插件介绍",children:["3.3 插件介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-插件介绍",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"331-nerdtree",children:["3.3.1 NERDTree",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#331-nerdtree",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该插件显示一个目录树，可以执行文件的操作命令。在大型项目中，你很难找到你要编辑的那一行的文件确切名称和位置。通过快捷键，一个资源管理器窗口就会以目录树的方式打开，你可以轻松找到你想要的文件并打开它，假如你有大量代码或者容易忘记文件名的人，NERDTree 是必须要有的"}),"\n",(0,s.jsxs)(n.h4,{id:"332-ack",children:["3.3.2 ack",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#332-ack",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当我需要搜索包含某一行或者某个单词的文件时，我就很喜欢 ack 插件，你最好把它和 ag 结合使用，这是一个名为“The Silver Searcher”的全局搜索工具。这个组合非常快，涵盖了我可以使用 grep 或 vimgrep 做的绝大多数事情。缺点是你需要安装 ack 或 ag 才能正常运行，优点是 ag 和 ack 都可以用于 Fedora 和 EPEL7"}),"\n",(0,s.jsxs)(n.h4,{id:"333-youcompleteme",children:["3.3.3 YouCompleteMe",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#333-youcompleteme",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"自动补全插件,依赖环境变量"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["program%2FLinux%2Fvim%E9%85%8D%E7%BD%AE%E5%92%8C%E6%8F%92%E4%BB%B6%E9%80%89%E6%8B%A9.md"]={toc:[{text:"1. VIM使用",id:"1-vim使用",depth:2},{text:"1.1 搜索和替换",id:"11-搜索和替换",depth:4},{text:"1.2 删除与复制",id:"12-删除与复制",depth:4},{text:"1.3 编辑模式",id:"13-编辑模式",depth:4},{text:"1.4 一般模式切换到指令行模式",id:"14-一般模式切换到指令行模式",depth:4},{text:"1.5 环境变量设置",id:"15-环境变量设置",depth:4},{text:"1.6 可视模式",id:"16-可视模式",depth:4},{text:"2. 配置说明",id:"2-配置说明",depth:2},{text:"2.1 快捷键设置",id:"21-快捷键设置",depth:4},{text:"2.2 自定义快捷键相关的六种模式",id:"22-自定义快捷键相关的六种模式",depth:4},{text:"3. vim插件",id:"3-vim插件",depth:2},{text:"3.1 插件安装方式",id:"31-插件安装方式",depth:3},{text:"3.2 安装ack插件使用",id:"32-安装ack插件使用",depth:3},{text:"3.3 插件介绍",id:"33-插件介绍",depth:3},{text:"3.3.1 NERDTree",id:"331-nerdtree",depth:4},{text:"3.3.2 ack",id:"332-ack",depth:4},{text:"3.3.3 YouCompleteMe",id:"333-youcompleteme",depth:4}],title:"vim配置和插件使用",headingTitle:"vim配置和插件使用",frontmatter:{Author:"徐小东"}}}}]);