"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4024"],{2921:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(2676),h=s(453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",strong:"strong",em:"em",h3:"h3",p:"p",pre:"pre",code:"code",ul:"ul",li:"li",h4:"h4"},(0,h.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"shell风格指南",children:["Shell风格指南",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#shell风格指南",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"1-引言",children:[(0,r.jsx)(n.strong,{children:"1."})," ",(0,r.jsx)(n.em,{children:"引言"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-引言",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"11-目的",children:[(0,r.jsx)(n.strong,{children:"1.1."})," ",(0,r.jsx)(n.strong,{children:"目的"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-目的",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本规范用于指导Shell脚本编写人员，统一编码风格，提升代码的易读性和健壮性。"}),"\n",(0,r.jsx)(n.p,{children:"本规范不能替代ShellCheck等静态检查工具，请在提升代码前使用ShellCheck进行静态检查。"}),"\n",(0,r.jsxs)(n.h3,{id:"12-说明",children:[(0,r.jsx)(n.strong,{children:"1.2."})," ",(0,r.jsx)(n.strong,{children:"说明"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-说明",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本规范中条目分为如下三个级别："}),"\n",(0,r.jsx)(n.p,{children:"【强制】必须遵守的编码规范，新增代码必须严格按照规范编写，历史代码根据项目实际情况决定是否修改。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】建议遵守的编码规范，根据代码所处上下文决定编码风格，但需要保持在同一项目中统一风格。"}),"\n",(0,r.jsx)(n.p,{children:"【注意】编码过程中的注意事项，通常为容易出现缺陷的代码，应当用合理的编码方式进行替代。"}),"\n",(0,r.jsxs)(n.h2,{id:"2-环境",children:["2. ",(0,r.jsx)(n.strong,{children:"环境"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-环境",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"21-stdout-vs-stderr",children:["2.1. ",(0,r.jsx)(n.strong,{children:"STDOUT"})," ",(0,r.jsx)(n.strong,{children:"vs STDERR"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-stdout-vs-stderr",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】所有的错误信息都应该被导向STDERR。"}),"\n",(0,r.jsx)(n.p,{children:"推荐使用类似如下函数，将错误信息和其他状态信息一起打印出来。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'err() {\n	echo "[$(date +\'%Y-%m-%dT%H:%M:%S%z\')]: $@" >&2\n}\n\nif ! do_something; then\n    err "Unable to do_something"\n    exit "${E_DID_NOTHING}"\nfi\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"3-注释",children:["3. ",(0,r.jsx)(n.strong,{children:"注释"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-注释",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"31-文件头注释",children:["3.1. ",(0,r.jsx)(n.strong,{children:"文件头注释"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-文件头注释",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】可执行文件首行必须指定脚本解释器，通常以 #!/bin/bash 开始。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】每个文件必须包含一个顶层注释，对其内容进行简要概述。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】脚本中尽量使用英文注释，防止切换系统环境后出现中文乱码问题。"}),"\n",(0,r.jsx)(n.p,{children:"如果脚本仅限于公司内部使用，那么版权声明和作者信息是可选的。如果用于版本发布，那么至少要在头文件中携带版权声明。"}),"\n",(0,r.jsx)(n.p,{children:"示例：不带版权声明"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"#!/bin/bash\n#\n# Perform hot backups of Oracle databases.\n"})}),"\n",(0,r.jsx)(n.p,{children:"示例：带版权声明"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"#!/bin/bash\n# \n# Copyright (C) 2020 Deepin Technology Co., Ltd.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n#Name : xxx.sh\n#Desciption : xxx\n#Time : 2020/10/21 上午10:10\n#Author : xxx\n#Connect : xxx@uniontech.com\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"32-函数定义注释",children:["3.2. ",(0,r.jsx)(n.strong,{children:"函数定义注释"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-函数定义注释",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】任何不是既明显又短的函数都必须被注释。"}),"\n",(0,r.jsx)(n.p,{children:"其他人通过阅读注释（和帮助信息，如果有的话）就能够学会如何使用你的程序或库函数，而不需要阅读代码。所有的函数注释应该包含："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"函数的描述"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"全局变量的使用和修改"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"使用的参数说明"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"返回值，而不是上一条命令运行后默认的退出状态"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"#!/bin/bash\n#\n# Perform hot backups of Oracle databases.\n\nexport PATH='/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin'\n\n#######################################\n# Cleanup files from the backup dir\n# Globals:\n#  BACKUP_DIR\n#  ORACLE_SID\n# Arguments:\n#  None\n# Returns:\n#  None\n#######################################\ncleanup() {\n...\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"33-代码体注释",children:["3.3. ",(0,r.jsx)(n.strong,{children:"代码体注释"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-代码体注释",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】注释代码中含有技巧、不明显、有趣的或者重要的部分。"}),"\n",(0,r.jsx)(n.p,{children:"如果有一个复杂的算法或者你正在做一些与众不同的，放一个简单的注释。并非注释所有代码。"}),"\n",(0,r.jsxs)(n.h3,{id:"34-todo注释",children:["3.4. ",(0,r.jsx)(n.strong,{children:"TODO注释"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-todo注释",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】使用TODO注释临时的、短期解决方案的、或者足够好但不够完美的代码。"}),"\n",(0,r.jsx)(n.p,{children:"TODO应当为全部大写字符串，接着是括号中你的名字。冒号是可选的。最好在TODO条目之后加上 bug或者ticket 的序号。"}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# TODO(mrmonkey): Handle the unlikely edge cases (bug ####)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"4-格式",children:["4. ",(0,r.jsx)(n.strong,{children:"格式"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-格式",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"41-缩进",children:["4.1. ",(0,r.jsx)(n.strong,{children:"缩进"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-缩进",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】缩进为4个空格，禁止使用TAB制表符来代替空格。\u2029"}),"\n",(0,r.jsx)(n.p,{children:"【建议】对于已有文件，或者从第三方开源获取的文件，保持已有的缩进格式。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】在代码块之间请使用空行以提升可读性。\u2029"}),"\n",(0,r.jsxs)(n.h3,{id:"42-行的长度",children:["4.2. ",(0,r.jsx)(n.strong,{children:"行的长度"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-行的长度",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】行的最大长度为120个字符。"}),"\n",(0,r.jsx)(n.p,{children:"如果你必须写长度超过120个字符的字符串，如果可能的话，尽量使用here document或者嵌入的换行符。长度超过120个字符的文字串且不能被合理地分割，这是正常的。但强烈建议找到一个方法使其变短。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# DO use 'here document's\ncat <<END;\nI am an exceptionally long\nstring.\nEND\n\n# Embedded newlines are ok too\nlong_string=\"I am an exceptionally\nlong string.\"\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"43-管道",children:["4.3. ",(0,r.jsx)(n.strong,{children:"管道"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-管道",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】如果一行容不下整个管道操作，那么请将整个管道操作分割成每行一个管段。如果一行容得下整个管道操作，那么请将整个管道操作写在同一行。"}),"\n",(0,r.jsx)(n.p,{children:"否则，应该将整个管道操作分割成每行一个管段，管道操作的下一部分应该将管道符放在新行并且缩进4个空格。这适用于使用管道符’|’的合并命令链以及使用’||’和’&&’的逻辑运算链。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# All fits on one line\ncommand1 | command2\n\n# Long commands\ncommand1 \\\n    | command2 \\\n    | command3 \\\n    | command4\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"44-循环",children:["4.4. ",(0,r.jsx)(n.strong,{children:"循环"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-循环",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】将 ; do , ; then 和 while , for , if 放在同一行。"}),"\n",(0,r.jsx)(n.p,{children:"shell中的循环略有不同，但是我们遵循跟声明函数时的大括号相同的原则。也就是说， ; do , ; then 应该和 if/for/while 放在同一行。 else 应该单独一行，结束语句应该单独一行并且跟开始语句垂直对齐。"}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'for dir in ${dirs_to_cleanup}; do\n    if [[ -d "${dir}/${ORACLE_SID}" ]]; then\n        log_date "Cleaning up old files in ${dir}/${ORACLE_SID}"\n        rm "${dir}/${ORACLE_SID}/"*\n        if [[ "$?" -ne 0 ]]; then\n            error_message\n        fi\n    else\n        mkdir -p "${dir}/${ORACLE_SID}"\n        if [[ "$?" -ne 0 ]]; then\n        error_message\n        fi\n    fi\ndone\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"45-case语句",children:["4.5. ",(0,r.jsx)(n.strong,{children:"case语句"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#45-case语句",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】可选项与case关键字首字母对齐。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】操作命令表达式和 ;; 符号缩进4个空格， ;; 与操作命令表达式左对齐。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】可选项与右圆括号之间不能有空格。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】通常情况下，可选项，操作命令表达式和 ;; 符号在不同的行。如果整个表达式可读，简单的命令可以跟可选项和 ;; 写在同一行，但可选项右圆括号之后和结束符  ;; 之前各需要一个空格。"}),"\n",(0,r.jsx)(n.p,{children:"示例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'case "${expression}" in\n    a)\n        variable="..."\n        some_command "${variable}" "${other_expr}" ...\n        ;;\n    absolute)\n        actions="relative"\n        another_command "${actions}" "${other_expr}" ...\n        ;;\n    *)\n        error "Unexpected expression \'${expression}\'"\n    	;;\nesac\n'})}),"\n",(0,r.jsx)(n.p,{children:"只要整个表达式可读，简单的命令可以跟可选项和 ;; 写在同一行。这通常适用于单字母选项的处理。也可以将选项与命令放一行，而 ;; 单独放一行。无论哪种写法，必须保证在同一case语句中的语法风格一致，同时选项，括号与 ;; 使用一个空格分隔。"}),"\n",(0,r.jsx)(n.p,{children:"示例：选项、命令和 ;; 写在同一行。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"verbose='false'\naflag=''\nbflag=''\nfiles=''\nwhile getopts 'abf:v' flag; do\n    case \"${flag}\" in\n        a) aflag='true' ;;\n        b) bflag='true' ;;\n        f) files=\"${OPTARG}\" ;;\n        v) verbose='true' ;;\n        *) error \"Unexpected option ${flag}\" ;;\n    esac\ndone\n"})}),"\n",(0,r.jsx)(n.p,{children:"示例：选项和命令写在一行， ;; 单独一行。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"verbose='false'\naflag=''\nbflag=''\nfiles=''\nwhile getopts 'abf:v' flag; do\n    case \"${flag}\" in\n        a)aflag='true' \n        ;;\n        b)bflag='true' \n        ;;\n        f) files=\"${OPTARG}\"\n        ;;\n        v) verbose='true' \n        ;;\n        *) error \"Unexpected option ${flag}\"\n        ;;\n    esac\ndone\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"46-变量扩展",children:["4.6. ",(0,r.jsx)(n.strong,{children:"变量扩展"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#46-变量扩展",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】如果变量值是系统路径，那么${var} 必须用双引号引起来。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】引用变量，推荐用 ${var} 而不是 $var 。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】除非绝对必要或者为了避免困惑，否则不要用大括号将单个字符的shell特殊变量或定位变量括起来。推荐将其他所有变量用大括号括起来。"}),"\n",(0,r.jsx)(n.p,{children:"示例：当位置参数超过10个时，对于第10个及以上参数变量的引用必须大括号括起来"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Braces necessary:\necho "many parameters: ${10}"\n'})}),"\n",(0,r.jsx)(n.p,{children:"示例：单字符的特殊变量或小于10的位置变量，不建议用大括号括起来"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Preferred style for \'special\' variables:\necho "Positional: $1" "$5" "$3"\necho "Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \\$=$$ ..."\n'})}),"\n",(0,r.jsx)(n.p,{children:"示例：为避免困惑用大括号括起来"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Braces avoiding confusion:\n# Output is "a0b0c0"\nset -- a b c\necho "${1}0${2}0${3}0"\n'})}),"\n",(0,r.jsx)(n.p,{children:"示例：包含路径的变量用引号引起来"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Preferred style for other variables:\nPATH="${PATH}"\nFILENAME="one_file"\ncp -pf "${PATH}/${FILENAME}" "${PWD}/"\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"5-命名约定",children:["5. ",(0,r.jsx)(n.strong,{children:"命名约定"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-命名约定",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"51-文件名",children:["5.1. ",(0,r.jsx)(n.strong,{children:"文件名"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-文件名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】文件名使用小写字母，单词之间用下划线分隔。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】作为可执行程序入口脚本，脚本名称不带.sh后缀，对于库函数文件名，脚本名称需带.sh后缀。"}),"\n",(0,r.jsxs)(n.h3,{id:"52-变量名",children:["5.2. ",(0,r.jsx)(n.strong,{children:"变量名"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-变量名",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"521-常量和环境变量",children:["5.2.1. ",(0,r.jsx)(n.strong,{children:"常量和环境变量"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#521-常量和环境变量",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】常量和环境变量全部大写，单词用下划线分隔，声明在文件顶部，文件头注释之下。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Constant\nreadonly PATH_TO_FILES='/some/path'\n\n# Both constant and environment\nexport ORACLE_SID='PROD'\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"522-只读变量",children:["5.2.2. ",(0,r.jsx)(n.strong,{children:"只读变量"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#522-只读变量",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】使用 readonly 或者 declare -r 来确保变量只读。"}),"\n",(0,r.jsx)(n.p,{children:"因为全局变量在shell中广泛使用，所以在使用它们的过程中捕获错误是很重要的。当你声明了一个变量，希望其只读，那么请明确指出。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'zip_version="$(dpkg --status zip | grep Version: | cut -d \' \' -f 2)"\nif [[ -z "${zip_version}" ]]; then\n	error_message\nelse\n	readonly zip_version\nfi\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"523-本地变量",children:["5.2.3. ",(0,r.jsx)(n.strong,{children:"本地变量"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#523-本地变量",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】使用 local 来声明局部变量以确保其只在函数内部和子函数中可见。这避免了污染全局命名空间和不经意间设置可能具有函数之外重要性的变量。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】当赋值的值由命令替换提供时，声明和赋值必须分开。因为内建的 local 不会从命令替换中传递退出码，会导致set -e设置不生效。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'my_func2() {\n    local name="$1"\n    # Separate lines for declaration and assignment:\n    local my_var\n    my_var="$(my_func)" || return\n    # DO NOT do this: $? contains the exit code of \'local\', not my_func\n    local my_var="$(my_func)"\n    [[ $? -eq 0 ]] || return\n    ...\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"53-函数名",children:["5.3. ",(0,r.jsx)(n.strong,{children:"函数名"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-函数名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】函数名全部使用小写字母，单词之间用下划线分隔。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】函数名之后必须有小括号。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】定义函数的关键function是可选的，但必须在一个项目中保持一致。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】定义函数体的左大括号可以和函数名在同一行，也可以另起一行，但必须在一个项目中保持一致。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】函数名的定义尽量可以反映出函数的功能，即通过函数名可知道函数的作用，因此函数名中的单词不建议使用缩写。"}),"\n",(0,r.jsxs)(n.h3,{id:"54-函数使用",children:["5.4. ",(0,r.jsx)(n.strong,{children:"函数使用"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-函数使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】将文件中所有的函数一起放在常量下面。不要在函数之间隐藏可执行代码。"}),"\n",(0,r.jsx)(n.p,{children:"只有source， set 声明和常量设置可能在函数声明之前完成。不要在函数之间隐藏可执行代码。"}),"\n",(0,r.jsx)(n.p,{children:"【强制】对于独立完成一个功能的脚本，入口主程序放入一个称为main的函数，作为脚本最下面的函数，文件中最后的非注释行应该是对 main 函数的调用。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'main "$@"\n'})}),"\n",(0,r.jsx)(n.p,{children:"【建议】每个函数尽可能只处理一个小功能，代码量在100行以内，超出行数建议分拆。"}),"\n",(0,r.jsx)(n.p,{children:"【建议】多次反复调用的代码建议独立成函数，简化程序，使条理更清晰。"}),"\n",(0,r.jsxs)(n.h2,{id:"6-命令调用",children:["6. ",(0,r.jsx)(n.strong,{children:"命令调用"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-命令调用",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"61-内建命令和外部命令",children:["6.1. ",(0,r.jsx)(n.strong,{children:"内建命令和外部命令"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-内建命令和外部命令",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】对于shell内建命令和外部程序之间选择，优先选择内建命令。"}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Prefer this:\naddition=$((${X} + ${Y}))\nsubstitution="${string/#foo/bar}"\n\n# Instead of this:\naddition="$(expr ${X} + ${Y})"\nsubstitution="$(echo "${string}" | sed -e \'s/^foo/bar/\')"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"62-检查返回值",children:["6.2. ",(0,r.jsx)(n.strong,{children:"检查返回值"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#62-检查返回值",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】命令及表达式的使用，总是检查返回值，并根据返回值做出响应。"}),"\n",(0,r.jsx)(n.p,{children:"对于非管道命令，使用 $? 或直接通过一个 if 语句来检查以保持其简洁。如果判断逻辑简单并且处理代码简短也可以使用[[...]]结合&&和||在一行中处理。"}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'if ! mv "${file_list}" "${dest_dir}/" ; then\n    echo "Unable to move ${file_list} to ${dest_dir}" >&2\n    exit "${E_BAD_MOVE}"\nfi\n\n# Or\nmv "${file_list}" "${dest_dir}/"\nif [[ "$?" -ne 0 ]]; then\n    echo "Unable to move ${file_list} to ${dest_dir}" >&2\n    exit "${E_BAD_MOVE}"\nfi\n\n# Or\n[[ ! -d "${dest_dir}/" ]] && echo "No such directory" >&2 && exit "${E_BAD_MOVE}" \n'})}),"\n",(0,r.jsx)(n.p,{children:"Bash 也有 PIPESTATUS 变量，允许检查从管道所有部分返回的代码。如果仅仅需要检查整个管道是成功还是失败，以下的方法是可以接受的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'tar -cf - ./* | ( cd "${dir}" && tar -xf - )\nif [[ "${PIPESTATUS[0]}" -ne 0 || "${PIPESTATUS[1]}" -ne 0 ]]; then\n	echo "Unable to tar files to ${dir}" >&2\nfi\n'})}),"\n",(0,r.jsx)(n.p,{children:"但是在运行任何其他命令时， PIPESTATUS 将会被覆盖。如果你需要基于管道中发生的错误执行不同的操作，那么你需要在运行命令后立即将 PIPESTATUS 赋值给另一个变量。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'tar -cf - ./* | ( cd "${DIR}" && tar -xf - )\nreturn_codes=(${PIPESTATUS[*]})\nif [[ "${return_codes[0]}" -ne 0 ]]; then\n	do_something\nfi\nif [[ "${return_codes[1]}" -ne 0 ]]; then\n	do_something_else\nfi\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"7-语句",children:["7. ",(0,r.jsx)(n.strong,{children:"语句"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-语句",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"71-命令替换",children:["7.1. ",(0,r.jsx)(n.strong,{children:"命令替换"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-命令替换",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】运行命令使用$(command)而不是反引号。"}),"\n",(0,r.jsx)(n.p,{children:"嵌套的反引号要求用反斜杠转义内部的反引号。而 $(command) 形式嵌套时不需要改变，而且更易于阅读。"}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# This is preferred:\nvar="$(command "$(command1)")"\n\n# This is not:\nvar="`command \\`command1\\``"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"72-文件名的通配符扩展",children:["7.2. ",(0,r.jsx)(n.strong,{children:"文件名的通配符扩展"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#72-文件名的通配符扩展",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【强制】当进行文件名的通配符扩展时，请使用明确的路径。"}),"\n",(0,r.jsx)(n.p,{children:"因为文件名可能以 - 开头，所以使用扩展通配符 ./* 比 * 来得安全得多。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Here's the contents of the directory:\n# -f -r somedir somefile\n# This deletes almost everything in the directory by force\npsa@bilby$ rm -v *\nremoved directory: `somedir'\nremoved `somefile'\n# As opposed to:\npsa@bilby$ rm -v ./*\nremoved `./-f'\nremoved `./-r'\nrm: cannot remove `./somedir': Is a directory\nremoved `./somefile'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"73-test和",children:["7.3. ",(0,r.jsx)(n.strong,{children:"test,[和[["}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73-test和",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】推荐使用 [[ ... ]] ，而不是 [ , test , 和 /usr/bin/[ 。"}),"\n",(0,r.jsx)(n.p,{children:"因为在 [[ 和 ]] 之间不会有路径名称扩展或单词分割发生，所以使用 [[ ... ]] 能够减少错误。而且 [[ ... ]] 允许正则表达式匹配，而 [ ... ] 不允许。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# This ensures the string on the left is made up of characters in the\n# alnum character class followed by the string name.\n# Note that the RHS should not be quoted here.\n# For the gory details, see\n# E14 at http://tiswww.case.edu/php/chet/bash/FAQ\nif [[ "filename" =~ ^[[:alnum:]]+name ]]; then\n	echo "Match"\nfi\n# This matches the exact pattern "f*" (Does not match in this case)\nif [[ "filename" == "f*" ]]; then\n	echo "Match"\nfi\n# This gives a "too many arguments" error as f* is expanded to the\n# contents of the current directory\nif [ "filename" == f* ]; then\n	echo "Match"\nfi\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"74-测试字符串",children:["7.4. ",(0,r.jsx)(n.strong,{children:"测试字符串"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#74-测试字符串",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】Bash足以在测试中处理空字符串，请使用-z或者-n字符串测试，而不是填充字符，使得代码更易于阅读。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# Do this:\nif [[ "${my_var}" = "some_string" ]]; then\n	do_something\nfi\n# -z (string length is zero) and -n (string length is not zero) are\n# preferred over testing for an empty string\nif [[ -z "${my_var}" ]]; then\n	do_something\nfi\n# This is OK (ensure quotes on the empty side), but not preferred:\nif [[ "${my_var}" = "" ]]; then\n	do_something\nfi\n# Not this:\nif [[ "${my_var}X" = "some_stringX" ]]; then\n	do_something\nfi\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"75-管道导向while循环",children:["7.5. ",(0,r.jsx)(n.strong,{children:"管道导向while循环"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#75-管道导向while循环",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【注意】命令输出通过管道导向给while循环，在while循环中被修改的变量是不能传递给父shell的，因为循环命令是在一个子shell中运行的。"}),"\n",(0,r.jsx)(n.p,{children:"管道导向while循环中的隐式子shell使得追踪bug变得很困难。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"last_line='NULL'\nyour_command | while read line; do\nlast_line=\"${line}\"\ndone\n\n# This will output 'NULL'\necho \"${last_line}\"\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果你确定输入中不包含空格或者特殊符号（通常意味着不是用户输入的），那么可以使用一个for循环。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'total=0\n# Only do this if there are no spaces in return values.\nfor value in $(command); do\ntotal+="${value}"\ndone\n'})}),"\n",(0,r.jsx)(n.p,{children:"使用过程替换允许重定向输出，但是请将命令放入一个显式的子shell中，而不是bash为while循环创建的隐式子shell。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'total=0\nlast_file=\nwhile read count filename; do\n    total+="${count}"\n    last_file="${filename}"\ndone <  <(your_command | uniq -c)\n# This will output the second field of the last line of output from\n# the command.\necho "Total = ${total}"\necho "Last one = ${last_file}"\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"76-与的使用",children:["7.6. ",(0,r.jsx)(n.strong,{children:"$@与$的使用"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#76-与的使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"【建议】请使用 $@ 除非你有特殊原因需要使用 $* 。"}),"\n",(0,r.jsx)(n.p,{children:'当变量引用加上双引号时，使用 "$*" ， 会将所有参数组合一个字符串参数， 而 "$@" 保留参数状态，如果某个参数中包含空格，该空格是以字符的形态作为参数的一部分。'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'set -- 1 "2 two" "3 three tres"; echo $# ; set -- "$*"; echo "$#, $@"\nset -- 1 "2 two" "3 three tres"; echo $# ; set -- "$@"; echo "$#, $@"\n'})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,h.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["program%2FShell%2FShell%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97.md"]={toc:[{text:"**1.** *引言*",id:"1-引言",depth:2},{text:"**1.1.** **目的**",id:"11-目的",depth:3},{text:"**1.2.** **说明**",id:"12-说明",depth:3},{text:"2. **环境**",id:"2-环境",depth:2},{text:"2.1. **STDOUT** **vs STDERR**",id:"21-stdout-vs-stderr",depth:3},{text:"3. **注释**",id:"3-注释",depth:2},{text:"3.1. **文件头注释**",id:"31-文件头注释",depth:3},{text:"3.2. **函数定义注释**",id:"32-函数定义注释",depth:3},{text:"3.3. **代码体注释**",id:"33-代码体注释",depth:3},{text:"3.4. **TODO注释**",id:"34-todo注释",depth:3},{text:"4. **格式**",id:"4-格式",depth:2},{text:"4.1. **缩进**",id:"41-缩进",depth:3},{text:"4.2. **行的长度**",id:"42-行的长度",depth:3},{text:"4.3. **管道**",id:"43-管道",depth:3},{text:"4.4. **循环**",id:"44-循环",depth:3},{text:"4.5. **case语句**",id:"45-case语句",depth:3},{text:"4.6. **变量扩展**",id:"46-变量扩展",depth:3},{text:"5. **命名约定**",id:"5-命名约定",depth:2},{text:"5.1. **文件名**",id:"51-文件名",depth:3},{text:"5.2. **变量名**",id:"52-变量名",depth:3},{text:"5.2.1. **常量和环境变量**",id:"521-常量和环境变量",depth:4},{text:"5.2.2. **只读变量**",id:"522-只读变量",depth:4},{text:"5.2.3. **本地变量**",id:"523-本地变量",depth:4},{text:"5.3. **函数名**",id:"53-函数名",depth:3},{text:"5.4. **函数使用**",id:"54-函数使用",depth:3},{text:"6. **命令调用**",id:"6-命令调用",depth:2},{text:"6.1. **内建命令和外部命令**",id:"61-内建命令和外部命令",depth:3},{text:"6.2. **检查返回值**",id:"62-检查返回值",depth:3},{text:"7. **语句**",id:"7-语句",depth:2},{text:"7.1. **命令替换**",id:"71-命令替换",depth:3},{text:"7.2. **文件名的通配符扩展**",id:"72-文件名的通配符扩展",depth:3},{text:"7.3. **test,[和[[**",id:"73-test和",depth:3},{text:"7.4. **测试字符串**",id:"74-测试字符串",depth:3},{text:"7.5. **管道导向while循环**",id:"75-管道导向while循环",depth:3},{text:"7.6. **$@与$的使用**",id:"76-与的使用",depth:3}],title:"Shell风格指南",headingTitle:"Shell风格指南",frontmatter:{Author:"海针 - 搬运 Google开源项目风格指南之《Shell风格指南》"}}}}]);