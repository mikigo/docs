"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3917"],{6569:function(n,h,e){e.r(h),e.d(h,{default:()=>i});var t=e(2676),r=e(453);function d(n){let h=Object.assign({h2:"h2",strong:"strong",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",p:"p",h3:"h3",h4:"h4",img:"img",em:"em"},(0,r.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(h.h2,{id:"0缩略语和关键术语定义",children:[(0,t.jsx)(h.strong,{children:"0、缩略语和关键术语定义"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#0缩略语和关键术语定义",children:"#"})]}),"\n",(0,t.jsxs)(h.table,{children:["\n",(0,t.jsxs)(h.thead,{children:["\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.th,{children:(0,t.jsx)(h.strong,{children:"术语"})}),"\n",(0,t.jsx)(h.th,{children:(0,t.jsx)(h.strong,{children:"全称"})}),"\n",(0,t.jsx)(h.th,{children:(0,t.jsx)(h.strong,{children:"解释"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(h.tbody,{children:["\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"PyPI"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"Python官方的三方包存储平台，在公网上打包发布的Python三方包都是发布到此平台；"}),"\n"]}),"\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"pip"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"Python官方默认的包管理工具，提供了对Python包的安装、卸载等功能；"}),"\n"]}),"\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"Virtualenv"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"常用的Python虚拟环境管理工具，它可以创建一个或多个独立的Python虚拟化环境；"}),"\n"]}),"\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"Python环境虚拟化"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"在一个用户自定义的目录空间，创建一个全新的、完整的Python环境（包含Python解释器、包管理器等）， 此Python环境完全与外界Python环境完全隔离（包括系统本身的Python环境、其他Python虚拟环境），因此我们在此虚拟环境中安装的任何三方包不会影响到系统本身的Python环境，反之亦然。用于解决多个项目使用Python包版本冲突的问题。"}),"\n"]}),"\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"deb"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"一种软件包格式，deb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，是一种在 Linux 下非常流行的一种安装包。"}),"\n"]}),"\n",(0,t.jsxs)(h.tr,{children:["\n",(0,t.jsx)(h.td,{children:"rpm"}),"\n",(0,t.jsx)(h.td,{}),"\n",(0,t.jsx)(h.td,{children:"和deb一样，是Centos系统的安装包格式，也是一种非常流行的安装包。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(h.h2,{id:"1相关技术背景背景技术与本发明最相近似的现有实现方案现有技术",children:[(0,t.jsx)(h.strong,{children:"1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#1相关技术背景背景技术与本发明最相近似的现有实现方案现有技术",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"在许多Linux操作系统上通常默认安装了Python环境，系统自带的Python环境是指的安装在系统目录（/usr/bin/）下的Python环境，在系统Python环境下使用pip安装的Python三方包也都是安装到系统目录下（/usr/local/lib/python3.7/site-packages）。"}),"\n",(0,t.jsx)(h.p,{children:"如果我们所有的Python三方包都安装到系统目录下，就会出现多个项目使用不同Python包版本冲突的问题，比如，有两个Python项目A和B，项目A依赖包：abc，版本为1.0，项目B也依赖包：abc，版本为2.0，若两个项目都在系统环境下安装abc这个依赖包，其中一个的依赖环境就会被覆盖，运行时就会因为依赖问题报错，这就是版本冲突。"}),"\n",(0,t.jsx)(h.p,{children:"为了解决版本冲突的问题，前辈们就提出了“Python环境虚拟化”概念，在Linux上Python环境虚拟化方案有很多，比如：Virtualenv、Venv、Canda等，这些环境虚拟化方案（工具）逻辑上都是在某个目录下创建一个全新的Python环境，所有的三方包安装、卸载等操作都在此目录下进行，以此来达到于其他Python环境隔离的目的。"}),"\n",(0,t.jsxs)(h.h3,{id:"11与本发明相关的现有技术",children:[(0,t.jsx)(h.strong,{children:"1.1、与本发明相关的现有技术"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#11与本发明相关的现有技术",children:"#"})]}),"\n",(0,t.jsxs)(h.h4,{id:"111现有技术的技术方案",children:[(0,t.jsx)(h.strong,{children:"1.1.1、现有技术的技术方案"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#111现有技术的技术方案",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"以Virtualenv举例，Virtualenv是Python非常常用的环境虚拟化方案，它在初始化时会创建一个全新的虚拟环境的时候，会将Python的解释器以及pip都同时创建好，后续用户可以使用虚拟环境里面的pip工具，对虚拟环境里面包进行管理（安装、卸载、升级等），这样就能实现虚拟环境里面的Python环境与外界Python环境完全隔离（包括系统本身的Python环境以及其他Python虚拟环境），从而解决了多个项目使用Python包版本冲突的问题。"}),"\n",(0,t.jsxs)(h.h4,{id:"112现有技术的缺点",children:[(0,t.jsx)(h.strong,{children:"1.1.2、现有技术的缺点"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#112现有技术的缺点",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"在Python世界里，大部分的三方包发布都是通过PyPI来发布的，包格式为：whl和tar.gz，因此使用者下载三方包采用pip安装，根据前面的描述可知，这部分包是可以直接使用常规Python虚拟化方案进行管理的；"}),"\n",(0,t.jsx)(h.p,{children:"而还有一部分三方包发布的包格式为：deb包（Debian系）、rpm包（Centos系）（下面就统一用deb包来描述），这类主要存在于Linux系统中，其对应包管理器是apt、yum，这些Python的deb包使用apt或yum安装后只能安装到系统环境中，无法安装到Python的虚拟环境中。"}),"\n",(0,t.jsx)(h.p,{children:"也就是说，同样是Python三方包，使用来自PyPI的Python包能使用Virtualenv等工具进行虚拟化进行管理（安装、卸载、升级等），而使用apt或yum安装的Python包不能被虚拟化环境管理。"}),"\n",(0,t.jsxs)(h.h2,{id:"2本发明技术方案的详细阐述",children:[(0,t.jsx)(h.strong,{children:"2、本发明技术方案的详细阐述"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#2本发明技术方案的详细阐述",children:"#"})]}),"\n",(0,t.jsxs)(h.h3,{id:"21本发明所要解决的技术问题",children:[(0,t.jsx)(h.strong,{children:"2.1、本发明所要解决的技术问题"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#21本发明所要解决的技术问题",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"在对Linux操作系统自动化测试实践过程中，自动化测试项目所需要的依赖既包含了pip安装的Python三方包（如：Pytest、PyAutoGUI等），也存在apt安装的Python三方包（如：python3-pyatspi、python3-opencv等），这些包都是必须的。"}),"\n",(0,t.jsx)(h.p,{children:"如果所有的依赖都安装在操作系统环境中，就会出现多个自动化项目使用Python三方包版本冲突的问题，如果为了解决这个问题采用常规的Python环境虚拟化方案又会出现apt安装的Python包无法安装到Python虚拟环境的问题。"}),"\n",(0,t.jsx)(h.p,{children:"因此，我们要解决的技术问题是，如何在Python虚拟环境中，既能对pip安装的Python包进行管理（安装、卸载、升级等），同时也能对apt安装的Python包进行管理。从而能让Linux上依赖不同来源三方包的Python项目也能实现虚拟化，彻底解决多个Python项目间版本冲突问题。"}),"\n",(0,t.jsxs)(h.h3,{id:"22本发明提供的完整技术方案",children:[(0,t.jsx)(h.strong,{children:"2.2、本发明提供的完整技术方案"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#22本发明提供的完整技术方案",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"本技术方案通过对使用apt安装的Python deb包安装过程进行拦截，将deb包安装位置动态加载到Python虚拟环境中，从而实现在Python虚拟环境中安装deb包的功能，卸载时只需要将虚拟环境中的deb包删除即可。"}),"\n",(0,t.jsx)(h.p,{children:(0,t.jsx)(h.img,{src:"/%E4%B8%80%E7%A7%8D%E5%AF%B9%E4%BD%BF%E7%94%A8Linux%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%89%E8%A3%85%E7%9A%84Python%E5%8C%85%E8%BF%9B%E8%A1%8C%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6.assets/%E5%9B%BE%E7%89%872.png",alt:""})}),"\n",(0,t.jsx)(h.p,{children:"图（1）不同来源Python包的安装流程"}),"\n",(0,t.jsxs)(h.h4,{id:"221创建并激活python虚拟环境",children:[(0,t.jsx)(h.strong,{children:"2.2.1、创建并激活Python虚拟环境"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#221创建并激活python虚拟环境",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"基于操作系统中默认的Python环境，在用户指定目录下拷贝生成一个全新的、完全干净的Python环境，此Python环境仅包含Python解释器、Python标准库、pip相关模块，不存在任何Python三方包。"}),"\n",(0,t.jsx)(h.p,{children:"创建并激活Python虚拟环境后，记录好此Python虚拟环境的路径，以便后续安装Python deb包时使用。"}),"\n",(0,t.jsxs)(h.h4,{id:"222判断python包的来源",children:[(0,t.jsx)(h.strong,{children:"2.2.2、判断Python包的来源"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#222判断python包的来源",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"根据包的格式进行判断，whl包用于pip安装，deb包用于apt安装；"}),"\n",(0,t.jsxs)(h.h4,{id:"223动态拦截apt安装过程",children:[(0,t.jsx)(h.strong,{children:"2.2.3、动态拦截apt安装过程"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#223动态拦截apt安装过程",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"若为whl包，直接调用Python默认的包管理器pip进行安装，会自动安装到虚拟环境中，由于是常规操作，这里不做过多解释。"}),"\n",(0,t.jsx)(h.p,{children:"若为deb包，调用动态拦截模块进行安装到虚拟环境中，动态拦截安装的过程具体为：调用apt对deb包进行下载，但不进行安装，因为如果安装必然会安装到操作系统环境中，因此下载deb之后，将其进行拆包，得到此三方包的源代码，最后将所有源代码移动到虚拟环境路径中，从而实现了将deb包安装到Python虚拟环境的功能。"}),"\n",(0,t.jsx)(h.p,{children:(0,t.jsx)(h.img,{src:"/%E4%B8%80%E7%A7%8D%E5%AF%B9%E4%BD%BF%E7%94%A8Linux%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%89%E8%A3%85%E7%9A%84Python%E5%8C%85%E8%BF%9B%E8%A1%8C%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6.assets/%E5%9B%BE%E7%89%873.png",alt:""})}),"\n",(0,t.jsx)(h.p,{children:"图（2）deb包安装到Python虚拟环境过程"}),"\n",(0,t.jsxs)(h.h4,{id:"224python包卸载",children:[(0,t.jsx)(h.strong,{children:"2.2.4、Python包卸载"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#224python包卸载",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"在Python虚拟环境中卸载包时，由于所有的三方包都是以源代码的形式存在于虚拟环境中，因此，只需将三方包的源代码删除即可，无需区分包的来源。"}),"\n",(0,t.jsxs)(h.h3,{id:"23本发明技术方案带来的有益效果",children:[(0,t.jsx)(h.strong,{children:"2.3、本发明技术方案带来的有益效果"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#23本发明技术方案带来的有益效果",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"（1）解决了传统Python虚拟化方案（工具）无法管理Python的deb或rpm包的问题，真正意义上实现了对所有Python三方包的虚拟化管理。"}),"\n",(0,t.jsx)(h.p,{children:"（2）让基于Linux系统的Python项目完全实现虚拟化环境部署，彻底解决不同自动化测试项目环境依赖之间的版本冲突问题。"}),"\n",(0,t.jsx)(h.p,{children:"（3）基于虚拟化环境部署，有效提升不同自动化项目环境部署的灵活性和自主性；"}),"\n",(0,t.jsxs)(h.h3,{id:"24针对上述技术方案是否还有替代方案同样能完成发明目的",children:[(0,t.jsx)(h.strong,{children:"2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#24针对上述技术方案是否还有替代方案同样能完成发明目的",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"无"}),"\n",(0,t.jsxs)(h.h2,{id:"3本发明的技术关键点和欲保护点是什么",children:[(0,t.jsx)(h.strong,{children:"3、本发明的技术关键点和欲保护点是什么"}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#3本发明的技术关键点和欲保护点是什么",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"（1）通过拦截deb包安装过程，将其动态的安装Python虚拟环境中；"}),"\n",(0,t.jsx)(h.p,{children:"（2）提供一种技术方案，使得基于Linux包管理器发布的Python包，也能在Python虚拟环境中进行管理；"}),"\n",(0,t.jsxs)(h.h2,{id:"4附件",children:[(0,t.jsx)(h.strong,{children:"4、附件："}),(0,t.jsx)(h.a,{className:"header-anchor","aria-hidden":"true",href:"#4附件",children:"#"})]}),"\n",(0,t.jsx)(h.p,{children:"参考文献（如专利/论文/标准等）"}),"\n",(0,t.jsx)(h.p,{children:"Python虚拟环境："}),"\n",(0,t.jsx)(h.p,{children:(0,t.jsx)(h.a,{href:"https://blog.csdn.net/qq_45261963/article/details/114324148",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(h.em,{children:(0,t.jsx)(h.a,{href:"https://blog.csdn.net/qq%5C_45261963/article/details/114324148",target:"_blank",rel:"noopener noreferrer",children:"https://blog.csdn.net/qq\\_45261963/article/details/114324148"})})})}),"\n",(0,t.jsx)(h.p,{children:"使用 apt 进行 Linux 包管理："}),"\n",(0,t.jsx)(h.p,{children:(0,t.jsx)(h.a,{href:"https://zhuanlan.zhihu.com/p/510604386",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(h.em,{children:(0,t.jsx)(h.a,{href:"https://zhuanlan.zhihu.com/p/510604386",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/510604386"})})})})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:h}=Object.assign({},(0,r.ah)(),n.components);return h?(0,t.jsx)(h,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}let i=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["tech_doc%2F%E4%B8%93%E5%88%A9%E4%BA%A4%E5%BA%95%E4%B9%A6%2F%E4%B8%80%E7%A7%8D%E5%AF%B9%E4%BD%BF%E7%94%A8Linux%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E5%AE%89%E8%A3%85%E7%9A%84Python%E5%8C%85%E8%BF%9B%E8%A1%8C%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%A4%E5%BA%95%E4%B9%A6.md"]={toc:[{text:"**0、缩略语和关键术语定义**",id:"0缩略语和关键术语定义",depth:2},{text:"**1、相关技术背景（背景技术），与本发明最相近似的现有实现方案（现有技术）**",id:"1相关技术背景背景技术与本发明最相近似的现有实现方案现有技术",depth:2},{text:"**1.1、与本发明相关的现有技术**",id:"11与本发明相关的现有技术",depth:3},{text:"**1.1.1、现有技术的技术方案**",id:"111现有技术的技术方案",depth:4},{text:"**1.1.2、现有技术的缺点**",id:"112现有技术的缺点",depth:4},{text:"**2、本发明技术方案的详细阐述**",id:"2本发明技术方案的详细阐述",depth:2},{text:"**2.1、本发明所要解决的技术问题**",id:"21本发明所要解决的技术问题",depth:3},{text:"**2.2、本发明提供的完整技术方案**",id:"22本发明提供的完整技术方案",depth:3},{text:"**2.2.1、创建并激活Python虚拟环境**",id:"221创建并激活python虚拟环境",depth:4},{text:"**2.2.2、判断Python包的来源**",id:"222判断python包的来源",depth:4},{text:"**2.2.3、动态拦截apt安装过程**",id:"223动态拦截apt安装过程",depth:4},{text:"**2.2.4、Python包卸载**",id:"224python包卸载",depth:4},{text:"**2.3、本发明技术方案带来的有益效果**",id:"23本发明技术方案带来的有益效果",depth:3},{text:"**2.4、针对上述技术方案，是否还有替代方案同样能完成发明目的**",id:"24针对上述技术方案是否还有替代方案同样能完成发明目的",depth:3},{text:"**3、本发明的技术关键点和欲保护点是什么**",id:"3本发明的技术关键点和欲保护点是什么",depth:2},{text:"**4、附件：**",id:"4附件",depth:2}],title:"",headingTitle:"",frontmatter:{Author:"mikigo"}}}}]);