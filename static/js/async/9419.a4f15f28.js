"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9419"],{1950:function(e,n,s){s.r(n),s.d(n,{default:()=>r});var t=s(2676),a=s(453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",code:"code",ul:"ul",li:"li",img:"img",h3:"h3",h4:"h4",pre:"pre",h5:"h5"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"youqu3中断任务续跑功能调研",children:["youqu3中断任务续跑功能调研",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#youqu3中断任务续跑功能调研",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"1-问题",children:["1 问题",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-问题",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"背景现象："})}),"\n",(0,t.jsxs)(n.p,{children:["目前 ",(0,t.jsx)(n.code,{children:"youqu3"})," 在进行测试过程当中会因为一些外在因素中断测试，例如："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"异常中断："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"系统 Bug 导致随机出现系统待机、断电"}),"\n",(0,t.jsxs)(n.li,{children:["强制手动中断，例如连续触发 ",(0,t.jsx)(n.code,{children:"ctrl+c"}),"，框架未进行收尾动作"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"正常中断："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"流水线超时中断"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"手动中断，等待框架进行收尾"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"面临问题："})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"继续测试：如果后续需要继续执行未执行的用例，要么全量重跑，要么则筛选未执行的用例继续执行。但当用例数量较大时，筛选用例显得 较为麻烦。"}),"\n",(0,t.jsxs)(n.li,{children:["测试报告：","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"异常中断：无法触发钩子生成测试汇总结果，需要手动统计较为麻烦。"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"正常中断：有测试报告，但是第二次继续测试完成之后，需要手动收集两次测试结果并进行汇总。"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"2-现状",children:["2 现状",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-现状",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"基于目前梳理出的问题，处理思路："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["增加一个日志文件，实时记录用例执行过程，并在测试结束后汇总，独立于其他日志体系：","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"当中断时能触发续跑，基于最后一条用例位置继续执行"}),"\n",(0,t.jsx)(n.li,{children:"续跑完成后，统计测试结果汇总数据：总数/通过数/失败数/跳过数"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"youqu3 run"})," 命令后增加子参数，用于触发执行动作，目前计划实现3个子参数：","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"参数1：开关参数，触发中断后续跑动作"}),"\n",(0,t.jsxs)(n.li,{children:["参数2：需传入",(0,t.jsx)(n.code,{children:"用例函数名"}),"作为参数值，在该位置开始执行测试（与参数1互斥）"]}),"\n",(0,t.jsxs)(n.li,{children:['参数3：需传入"',(0,t.jsx)(n.code,{children:"asc/desc"}),'" 作为参数值，修改用例执行顺序，基于',(0,t.jsx)(n.code,{children:"用例编号"}),"：升序/逆序执行"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"备注：参数2、参数3 作为实现参数1过程中的衍生参数，参数3 升序执行用例可使执行顺序与用例 py 文件顺序一致，调试时更为顺滑。"}),"\n",(0,t.jsx)(n.p,{children:"实现以上想法实现方案："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["方案1：开发 ",(0,t.jsx)(n.code,{children:"pytest"})," 插件，在 ",(0,t.jsx)(n.code,{children:"youqu3"})," 环境依赖中增加，部署时自动安装，在关键位置进行调用。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["方案2：基于 ",(0,t.jsx)(n.code,{children:"pytest"})," 钩子函数，在",(0,t.jsx)(n.code,{children:"youqu3"})," 中各钩子内部直接实现功能。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["以上均能达到目的，但从维护成本和实现效率的角度来说，现阶段直接在 ",(0,t.jsx)(n.code,{children:"youqu3"})," 内部快速实现更为合理，而且以上功能可以归纳为用例执行控制相关功能，在框架内部实现也更合适。"]}),"\n",(0,t.jsx)(n.p,{children:"退一步说，如果后续继续扩展的更丰富后，需要抽离成插件也可以，综合考虑所以最终决定采用方案2。"}),"\n",(0,t.jsxs)(n.h2,{id:"3-技术方案",children:["3 技术方案",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-技术方案",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["方案在 ",(0,t.jsx)(n.code,{children:"youqu3"})," 的执行流程如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"/public/youqu3%E4%B8%AD%E6%96%AD%E4%BB%BB%E5%8A%A1%E7%BB%AD%E8%B7%91%E5%8A%9F%E6%8A%80%E6%9C%AF%E8%83%BD%E8%B0%83%E7%A0%94_assets/image1.png",alt:"image1"})}),"\n",(0,t.jsxs)(n.h3,{id:"31-整体设计",children:["3.1 整体设计",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-整体设计",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["基于 ",(0,t.jsx)(n.code,{children:"youqu3"})," 目前结构进行功能开发，主要涉及以下部分的修改："]}),"\n",(0,t.jsxs)(n.p,{children:["1、命令行参数新增：基于新增功能，增加对应参数，涉及文件",(0,t.jsx)(n.code,{children:"cli.py"})]}),"\n",(0,t.jsxs)(n.p,{children:["2、参数异常校验：基于参数传递的值做异常判断，涉及文件",(0,t.jsx)(n.code,{children:"run.py"})]}),"\n",(0,t.jsxs)(n.p,{children:["3、钩子功能开发：在不同的钩子内部实现日志输出、用例列表重组、用例执行控制，涉及文件",(0,t.jsx)(n.code,{children:"plugin.py"})]}),"\n",(0,t.jsxs)(n.h4,{id:"311-命令行参数新增",children:["3.1.1 命令行参数新增",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#311-命令行参数新增",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在",(0,t.jsx)(n.code,{children:"cli.py"})," 增加3个参数，用于触发章节2中提到的对应功能，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'\n......\n\n@click.option("--start-case", default=None, type=click.STRING, help="从{用例函数名称}开始执行测试")\n@click.option("--interrupt-continue", is_flag=True, default=False, type=click.BOOL, help="基于上一次中断的测试继续执行")\n@click.option("--order-execution", default=None, type=click.STRING, help="基于测试用例编号位置执行测试 asc/desc")\ndef run(\n        workdir,\n        path,\n        keywords,\n        tags,\n        setup_plan,\n        slaves,\n        txt,\n        reruns,\n        job_start,\n        job_end,\n        pytest_opt,\n        record_failed_num,\n        start_point,\n        interrupt_continue,\n        order_execution,\n):\n    """本地执行"""\n    args = {\n        "workdir": workdir,\n        "path": path,\n        "keywords": keywords,\n        "tags": tags,\n        "setup_plan": setup_plan,\n        "slaves": slaves,\n        "txt": txt,\n        "reruns": reruns,\n        "job_start": job_start,\n        "job_end": job_end,\n        "pytest_opt": pytest_opt,\n        "record_failed_num": record_failed_num,\n        "start_point": start_point,\n        "interrupt_continue": interrupt_continue,\n        "order_execution": order_execution,\n    }\n    from youqu3.driver.run import Run\n    Run(**args).run()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["以上代码实现增加 ",(0,t.jsx)(n.code,{children:"youqu3"})," 命令行参数并增加 ",(0,t.jsx)(n.code,{children:"help"})," 提示信息："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"执行用例开始位置：--start-case {用例函数名称}"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"中断续跑：--interrupt-continue"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"执行用例顺序：--order_execution {升序/降序}"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"312-参数异常校验",children:["3.1.2 参数异常校验",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#312-参数异常校验",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在",(0,t.jsx)(n.code,{children:"run.py"}),"文件中在构造函数",(0,t.jsx)(n.code,{children:"__init__"}),"中新增对象属性，同时在方法 ",(0,t.jsx)(n.code,{children:"generate_cmd"})," 中进行命令组装，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    def generate_cmd(self):\n        cmd = ["pytest"]\n        \n        ......\n       \n        if self.start_point:\n            cmd.extend(["--start-case", f"{self.start_point}"])\n        if self.interrupt_continue:\n            cmd.extend(["--interrupt-continue"])\n        if self.order_execution:\n            cmd.extend(["--order-execution", f"{self.order_execution}"])\n            \n        ......\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"run"})," 方法中增加参数值的异常校验，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    def run(self):\n        \n        ......\n        \n        if self.start_point is not None and self.interrupt_continue:\n            raise FileNotFoundError("parameter mutual exclusion: --etsgo-start-point/--interrupt-continue")\n\n        if self.order_execution is not None and self.interrupt_continue:\n            raise FileNotFoundError("parameter mutual exclusion: --order-execution/--interrupt-continue")\n\n        if self.order_execution is not None and self.order_execution not in ("asc", "desc"):\n            raise ValueError("order-execution must be \'asc\' or \'desc\'")\n\n\n        pytest.main(\n            [i.strip("\'") for i in self.generate_cmd()[1:]]\n        )\n        \n        ......\n'})}),"\n",(0,t.jsx)(n.p,{children:"以上便完成了参数相关的所有开发。"}),"\n",(0,t.jsxs)(n.h4,{id:"313-钩子功能开发",children:["3.1.3 钩子功能开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#313-钩子功能开发",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"youqu3"})," 中钩子函数主要集中在文件",(0,t.jsx)(n.code,{children:"plugin.py"})," 中，所以后续的功能实现主要在这里完成。"]}),"\n",(0,t.jsxs)(n.h5,{id:"3131-执行日志",children:["3.1.3.1 执行日志",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3131-执行日志",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["该功能主要用于实时记录用例的执行结果，分别包括",(0,t.jsx)(n.code,{children:"setup"}),"、",(0,t.jsx)(n.code,{children:"call"}),"、",(0,t.jsx)(n.code,{children:"teardown"})," 三个阶段的结果，最小颗粒为函数。"]}),"\n",(0,t.jsxs)(n.p,{children:["也就是说在用例 ",(0,t.jsx)(n.code,{children:"test_music_123456.py"})," 中存在多条用例：",(0,t.jsx)(n.code,{children:"test_music_123456_1"}),"、 ",(0,t.jsx)(n.code,{children:"test_music_123456_2"}),"，在执行时都会被记录。"]}),"\n",(0,t.jsx)(n.p,{children:"主要作用包括："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"在测试中断后，能基于日志确定中断位置"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"基于日志能解析出最后一条执行的用例，并在续跑中当做标记，在执行前删除掉用例列表已经执行的部分"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"在续跑完成后，能整合之前中断的一次、多次续跑的测试结果，并给出汇总数据"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"完成以上功能开发，主要运用了以下钩子："}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pytest_addoption："})," 定义新增的三个自定义参数"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def pytest_addoption(parser):\n    parser.addoption("--noskip", action="store", default="", help="skip-xxx标签不生效")\n    parser.addoption("--ifixed", action="store", default="", help="fixed-xxx标签不生效")\n    parser.addoption("--start-case", action="store", default="", help="指定执行用例开始位置")\n    parser.addoption("--interrupt-continue", action="store_true", default="", help="执行中断续跑")\n    parser.addoption("--order-execution", action="store", default="", help="指定用例编号执行顺序")\n'})}),"\n",(0,t.jsx)(n.p,{children:"**pytest_sessionstart：**日志文件初始化"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def pytest_sessionstart(session):\n    logger("DEBUG")\n    session.config.option.last_json_report_path = f"{session.fspath}/report/json/last_result.json"\n    last_json_report = session.config.option.last_json_report_path\n    case_order = session.config.getoption("--order-execution") or "pytest"\n    start_case = session.config.getoption("--start-case") if session.config.getoption("--start-case") else "None"\n    has_interrupt_continue = bool(session.config.getoption("--interrupt-continue"))\n\n    start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n\n    log_data = {\n        "user": getpass.getuser(),\n        "ip": setting.HOST_IP ,\n        "execution_order": case_order,\n        "interrupt_continue": has_interrupt_continue,\n        "start_case": start_case,\n        "py_total_passed_failed_skipped": "",\n        "fun_total_passed_failed_skipped": "",\n        "start_time": start_time,\n        "end_time": "",\n        "test_cases": {}\n    }\n\n    os.makedirs(os.path.dirname(last_json_report), exist_ok=True)\n    if has_interrupt_continue:\n        if not exists(last_json_report):\n            raise ValueError("中断续跑模式下，未找到上次执行结果日志文件，请检查！")\n    else:\n        with open(last_json_report, \'w\', encoding="utf-8") as f:\n            json.dump(log_data, f, indent=4)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pytest_report_teststatus:"})," 实时记录用例执行结果"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def pytest_report_teststatus(report, config):\n    last_json_report = config.option.last_json_report_path\n    case_py_path = report.nodeid.split(\'::\')[0]\n    case_py = os.path.basename(case_py_path)\n\n    case_fun = report.nodeid.split(\'::\')[-1]\n    case_when = report.when\n    case_outcome = report.outcome\n\n    with open(last_json_report, "r", encoding="utf-8") as f:\n        data = json.load(f)\n\n    py_case_log_text = {\n        "py_path": case_py_path,\n        "py_outcome": "",\n        "case_fun_set": {}\n    }\n\n    if case_py not in data["test_cases"]:\n        data["test_cases"][case_py] = py_case_log_text\n\n    if case_fun not in data["test_cases"][case_py]["case_fun_set"]:\n        data["test_cases"][case_py]["case_fun_set"][case_fun] = {}\n\n    data["test_cases"][case_py]["case_fun_set"][case_fun][case_when] = case_outcome\n    if case_when == "setup" and case_outcome == "skipped":\n        data["test_cases"][case_py]["case_fun_set"][case_fun]["call"] = "skipped"\n    elif case_when == "setup" and case_outcome == "failed":\n        data["test_cases"][case_py]["case_fun_set"][case_fun]["call"] = "failed"\n\n    if case_when == "teardown":\n        setup_result = data["test_cases"][case_py]["case_fun_set"][case_fun]["setup"]\n        call_result = data["test_cases"][case_py]["case_fun_set"][case_fun]["call"]\n        teardown_result = data["test_cases"][case_py]["case_fun_set"][case_fun]["teardown"]\n\n        fun_outcome = "failed"\n        if setup_result == "skipped":\n            fun_outcome = "skipped"\n        if setup_result == "passed" and call_result == "passed" and teardown_result == "passed":\n            fun_outcome = "passed"\n        if teardown_result == "failed":\n            if call_result == "passed":\n                fun_outcome = "passed"\n        data["test_cases"][case_py]["case_fun_set"][case_fun]["fun_outcome"] = fun_outcome\n\n    with open(last_json_report, \'w\', encoding="utf-8") as f:\n        json.dump(data, f, indent=4)\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pytest_sessionfinish："})," 测试完成基于日志，输出汇总数据：total、passed、failed、skipped"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def pytest_sessionfinish(session):\n    last_json_report = session.config.option.last_json_report_path\n    with open(last_json_report, "r", encoding="utf-8") as f:\n        data = json.load(f)\n\n    end_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n    data["end_time"] = end_time\n\n    for _, case_py in data["test_cases"].items():\n        outcomes = [fun_outcome for fun_results in case_py["case_fun_set"].values() for fun_outcome in fun_results.values()]\n        if "failed" in outcomes:\n            case_py["py_outcome"] = "failed"\n        elif "failed" not in outcomes and "skipped" in outcomes:\n            case_py["py_outcome"] = "skipped"\n        elif len(set(outcomes)) == 1 and "passed" in set(outcomes):\n            case_py["py_outcome"] = "passed"\n\n    py_test_results = [py_result["py_outcome"] for py_result in data["test_cases"].values()]\n    fun_test_results = [fun_result["fun_outcome"] for py in data["test_cases"].values() for fun_result in\n                        py["case_fun_set"].values()]\n\n    py_total_num = len(py_test_results)\n    py_passed_num = py_test_results.count("passed")\n    py_failed_num = py_test_results.count("failed")\n    py_skipped_num = py_test_results.count("skipped")\n\n    fun_total_num = len(fun_test_results)\n    fun_passed_num = fun_test_results.count("passed")\n    fun_failed_num = fun_test_results.count("failed")\n    fun_skipped_num = fun_test_results.count("skipped")\n\n    data["py_total_passed_failed_skipped"] = f"{py_total_num}/{py_passed_num}/{py_failed_num}/{py_skipped_num}"\n    data["fun_total_passed_failed_skipped"] = f"{fun_total_num}/{fun_passed_num}/{fun_failed_num}/{fun_skipped_num}"\n\n    with open(last_json_report, "w", encoding="utf-8") as f:\n        json.dump(data, f, indent=4)\n\n    shutil.copy(last_json_report, f\'{os.path.dirname(last_json_report)}/report_{setting.TIME_STRING}.json\')\n'})}),"\n",(0,t.jsxs)(n.h5,{id:"3132-中断续跑",children:["3.1.3.2 中断续跑",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3132-中断续跑",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"该功能主要实现，测试中断之后的下一次测试会话，能继续执行未执行的用例，同时不会重复执行已执行的用例。"}),"\n",(0,t.jsxs)(n.p,{children:["这里对",(0,t.jsx)(n.code,{children:"已执行"}),"的定义是：完整执行了 ",(0,t.jsx)(n.code,{children:"call"}),"、",(0,t.jsx)(n.code,{children:"setup"}),"、",(0,t.jsx)(n.code,{children:"teardown"})," 三个阶段的用例。"]}),"\n",(0,t.jsxs)(n.p,{children:["实现该功能的主要阶段是在",(0,t.jsx)(n.code,{children:"youqu3"})," 收集到所有需执行用例之后，对用例列表进行改写，基于 3.1.3.1 章节中实现的执行日志解析出最后一条执行的用例，以",(0,t.jsx)(n.code,{children:"下一条"}),"用例作为起始点开始进行测试，主要在钩子",(0,t.jsx)(n.code,{children:"pytest_collection_modifyitems"})," 中实现。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    has_interrupt_continue = config.getoption("--interrupt-continue")\n    if has_interrupt_continue:\n        with open(last_json_report, "r", encoding="utf-8") as f:\n            data = json.load(f)\n        order = data["execution_order"]\n        if order == "desc" or order == "asc":\n            sort_items_by_key(items, f"{order}")\n        try:\n            tmp_data = copy.deepcopy(data)\n            last_case = tmp_data["test_cases"].popitem()[1][\'case_fun_set\'].popitem()[0]\n        except KeyError:\n            last_case = None\n        if last_case:\n            if f"<Function {last_case}>" == str(items[-1]):\n                raise TypeError("最后一次测试未中断，无法进行续跑")\n            else:\n                section_items_by_case_function(items, last_case, 1)\n        with open(last_json_report, "w", encoding="utf-8") as f:\n            data["interrupt_continue"] = has_interrupt_continue\n            json.dump(data, f, indent=4)\n'})}),"\n",(0,t.jsx)(n.p,{children:"其中用例执行顺序是继承于最后一次测试，若解析出的用例与执行列表最后一条用例一致，则说明上一次的任务并未中断，则终止续跑。"}),"\n",(0,t.jsxs)(n.h5,{id:"3133-指定用例起始位置",children:["3.1.3.3 指定用例起始位置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3133-指定用例起始位置",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["该功能主要用于指定测试会话起始位置，基于传入的测试用例",(0,t.jsx)(n.code,{children:"函数名称"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["应介入阶段与",(0,t.jsx)(n.code,{children:"中断续跑"}),"一致，所以同样在钩子",(0,t.jsx)(n.code,{children:"pytest_collection_modifyitems"})," 中实现。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    start_case = config.getoption("--start-case")\n    if start_case:\n        section_items_by_case_function(items, start_case)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["本章节与3.1.3.2章节在实现逻辑上相同，底层逻辑都是指定用例开始位置，只是不同功能开始的位置有所差异，所以均使用函数 ",(0,t.jsx)(n.code,{children:"section_items_by_letsgo"})," 进行实现："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def section_items_by_case_function(items, case_function, index_offset=None):\n    """\n    指定用例开始位置\n    :param items: 用例列表\n    :param case_function: 用例函数名称\n    :param index_offset: id 偏移量\n    :return: 修改后用例列表\n    """\n    index_to_remove = None\n    index_offset = index_offset if index_offset is not None else 0\n    for index, item in enumerate(items):\n        if f"{case_function}>" in str(item):\n            index_to_remove = index + index_offset\n            break\n\n    if index_to_remove is not None:\n        items[:index_to_remove] = []\n    else:\n        raise ValueError(f"用例列表中未发现：{case_function}")\n'})}),"\n",(0,t.jsx)(n.p,{children:"在指定开始位置后，若标记用例不存在与执行列表则会抛异常，终止测试。"}),"\n",(0,t.jsxs)(n.p,{children:["需注意的是：用例 ",(0,t.jsx)(n.code,{children:"test_music_123456.py"})," 中存在多条用例：",(0,t.jsx)(n.code,{children:"test_music_123456_1"}),"、 ",(0,t.jsx)(n.code,{children:"test_music_123456_2"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["传值",(0,t.jsx)(n.code,{children:"test_music_123456_2"})," ：则只会执行",(0,t.jsx)(n.code,{children:"test_music_123456_2"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["传值",(0,t.jsx)(n.code,{children:"test_music_123456"}),"：报错，因为它并非函数名称，可替换为",(0,t.jsx)(n.code,{children:"test_music_123456_1"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h5,{id:"3134-测试用例排序执行",children:["3.1.3.4 测试用例排序执行",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3134-测试用例排序执行",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["该功能主要实现，将测试用例基于",(0,t.jsx)(n.code,{children:"用例编号"})," 为标记，升序 or 逆序执行，主要在钩子",(0,t.jsx)(n.code,{children:"pytest_collection_modifyitems"})," 中实现。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    order_execution = config.getoption("--order-execution")\n    if order_execution == "asc":\n        sort_items_by_key(items, "asc")\n    elif order_execution == "desc":\n        sort_items_by_key(items, "desc")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["函数",(0,t.jsx)(n.code,{children:"sort_items_by_letsgo"})," 用于接收",(0,t.jsx)(n.code,{children:"--order-execution"}),"的值，对用例列表进行排序改写，函数代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def sort_items_by_key(items, order="asc"):\n    """\n    对用例列表进行升序排列\n    :param items: 用例列表\n    :param order: asc/desc用例执行顺序\n    :return: 排序后用例列表\n    """\n\n    def __get_case_id_and_count(item, _order=order):\n        match = re.finditer(r\'(\\d+)\', item.name)\n        num = 0\n        if match:\n            num_list = []\n            for i in match:\n                num_list.append(i.group())\n                num_str = \'\'.join(map(str, num_list))\n                num = int(num_str)\n\n        if match:\n            if _order == "asc":\n                return int(num)\n            if _order == "desc":\n                return -int(num)\n\n    items.sort(key=__get_case_id_and_count)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["该功能是其实只需要升序功能，因为升序之后测试结果与",(0,t.jsx)(n.code,{children:"pycharm"})," 中用例文件顺序一致，还可搭配指定位置进行批跑，在用例批量适配阶段定位和调试都非常顺滑。"]}),"\n",(0,t.jsxs)(n.h2,{id:"4-实验验证",children:["4 实验验证",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-实验验证",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["本章节将创建一个简易的 ",(0,t.jsx)(n.code,{children:"youqu3"})," 工程，对新增参数进行实际效果验证，看是否满足预期。"]}),"\n",(0,t.jsxs)(n.h3,{id:"41-创建工程与用例",children:["4.1 创建工程与用例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-创建工程与用例",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"用例目录结构如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"......\n├── mars\n│\xa0\xa0 ├── case\n│\xa0\xa0 │\xa0\xa0 ├── assert_res\n│\xa0\xa0 │\xa0\xa0 │\xa0\xa0 └── README.md\n│\xa0\xa0 │\xa0\xa0 ├── base_case.py\n│\xa0\xa0 │\xa0\xa0 ├── __init__.py\n│\xa0\xa0 │\xa0\xa0 ├── test_a.py             # setup通过、call通过、teardown通过\n│\xa0\xa0 │\xa0\xa0 ├── test_b.py             # setup通过、call通过、teardown通过\n│\xa0\xa0 │\xa0\xa0 ├── test_mycase_111.py    # setup失败、call失败、teardown通过\n│\xa0\xa0 │\xa0\xa0 ├── test_mycase_11652.py  # setup通过、call通过、teardown失败\n│\xa0\xa0 │\xa0\xa0 ├── test_mycase_11.py     # setup通过、call通过、teardown通过\n│\xa0\xa0 │\xa0\xa0 ├── test_mycase_123.py    # setup跳过、call跳过、teardown通过\n│\xa0\xa0 │\xa0\xa0 └── test_mycase_222.py    # 其中包含：\n│\xa0\xa0 │									   # test_mycase_222_1 # setup跳过、call跳过、teardown通过\n│\xa0\xa0 │									   # test_mycase_222_2 # setup通过、call失败、teardown通过\n│\xa0\xa0 │									   # test_mycase_222_3 # setup通过、call通过、teardown通过\n│\xa0\xa0 ├── __init__.py\n│\xa0\xa0 └── method\n......\n"})}),"\n",(0,t.jsx)(n.p,{children:"该结构仅作为验证作用，覆盖了不同阶段的测试结果与顺序关系。"}),"\n",(0,t.jsxs)(n.h3,{id:"42-执行日志",children:["4.2 执行日志",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-执行日志",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["执行命令：",(0,t.jsx)(n.code,{children:"youqu3 run -w mars"})]}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last_result.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "pytest",\n    "interrupt_continue": false,\n    "start_case": "None",\n    "py_total_passed_failed_skipped": "7/3/3/1",\n    "fun_total_passed_failed_skipped": "9/5/2/2",\n    "start_time": "2024-09-19 08:50:34",\n    "end_time": "2024-09-19 08:51:24",\n    "test_cases": {\n        "test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_b.py": {\n            "py_path": "mars/case/test_b.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_b": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11.py": {\n            "py_path": "mars/case/test_mycase_11.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_mycase_11": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_111.py": {\n            "py_path": "mars/case/test_mycase_111.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_111": {\n                    "setup": "failed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                }\n            }\n        },\n        "test_mycase_11652.py": {\n            "py_path": "mars/case/test_mycase_11652.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_11652": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "failed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_123.py": {\n            "py_path": "mars/case/test_mycase_123.py",\n            "py_outcome": "skipped",\n            "case_fun_set": {\n                "test_mycase_123": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                }\n            }\n        },\n        "test_mycase_222.py": {\n            "py_path": "mars/case/test_mycase_222.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_222_1": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                },\n                "test_mycase_222_2": {\n                    "setup": "passed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                },\n                "test_mycase_222_3": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["**行首：**标注了用例执行顺序， ",(0,t.jsx)(n.code,{children:"pytest"})," 表示是默认执行顺序"]}),"\n",(0,t.jsxs)(n.p,{children:["**夹层：**用例执行结果：",(0,t.jsx)(n.code,{children:"passed/failed/sikpped"})]}),"\n",(0,t.jsx)(n.p,{children:"**行尾：**用例汇总数据：总数/通过数/失败数/跳过数"}),"\n",(0,t.jsx)(n.p,{children:"其中用例执行结果和汇总数据都包含："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"函数维度"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"py"})," 文件维度"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'    "py_total_passed_failed_skipped": "7/3/3/1",   # py维度 \n    "fun_total_passed_failed_skipped": "9/5/2/2",  # 函数维度\n    \n    \n	"test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "passed",               # py维度 \n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"       # 函数维度\n                }\n            }\n        }\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"特殊情况"})}),"\n",(0,t.jsxs)(n.p,{children:["其中存在一些用例，",(0,t.jsx)(n.code,{children:"call"})," 阶段通过，但是在 ",(0,t.jsx)(n.code,{children:"teardown"})," 阶段失败，这类用例定位很明确，理论上是通过的，所以需要快速处理 ",(0,t.jsx)(n.code,{children:"teardown"})," 部分的问题。"]}),"\n",(0,t.jsxs)(n.p,{children:["所以在",(0,t.jsx)(n.code,{children:"函数维度"}),"结果后方是",(0,t.jsx)(n.code,{children:"passed"}),"，快速定位这类用例可搜索："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'                    "teardown": "failed",\n                    "fun_outcome": "passed"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"留底追溯"})}),"\n",(0,t.jsxs)(n.p,{children:["在本地测试环境下可能需要追溯之前测试的内容，所以在会话结束阶段 ",(0,t.jsx)(n.code,{children:"last_result.log"})," 会以时间戳命名，在同级 ",(0,t.jsx)(n.code,{children:"json"})," 目录进行留底："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"...\n\n│\xa0\xa0 ├── json\n│\xa0\xa0 │\xa0\xa0 ├── last_result.json\n│\xa0\xa0 │\xa0\xa0 ├── report_20240918214809.json\n│\xa0\xa0 │\xa0\xa0 ├── report_20240918214826.json\n│\xa0\xa0 │\xa0\xa0 ├── report_20240918215115.json\n\n...\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"43-修改用例执行顺序",children:["4.3 修改用例执行顺序",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-修改用例执行顺序",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["通过 4.2 章节可看出 ",(0,t.jsx)(n.code,{children:"pytest"})," 默认执行顺序："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_a>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_b>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_mycase_11>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_mycase_111>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_mycase_11652>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_mycase_123>"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"<Function test_mycase_222>"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["现在我们基于用例编号，对用例执行列表的排序进行修改，执行命令加入参数 ",(0,t.jsx)(n.code,{children:"--order-execution"})," ，再查看用例执行顺序的变化"]}),"\n",(0,t.jsxs)(n.p,{children:["执行命令：",(0,t.jsx)(n.code,{children:'youqu3 run -w mars --order-execution "asc"'})]}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last_result.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "asc",\n    "interrupt_continue": false,\n    "start_case": "None",\n    "py_total_passed_failed_skipped": "",\n    "fun_total_passed_failed_skipped": "",\n    "start_time": "2024-09-19 09:01:12",\n    "end_time": "",\n    "test_cases": {\n        "test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_b.py": {\n            "py_path": "mars/case/test_b.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_b": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11.py": {\n            "py_path": "mars/case/test_mycase_11.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_11": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_111.py": {\n            "py_path": "mars/case/test_mycase_111.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_111": {\n                    "setup": "failed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                }\n            }\n        },\n        "test_mycase_123.py": {\n            "py_path": "mars/case/test_mycase_123.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_123": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                }\n            }\n        },\n        "test_mycase_222.py": {\n            "py_path": "mars/case/test_mycase_222.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_222_1": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                },\n                "test_mycase_222_2": {\n                    "setup": "passed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                },\n                "test_mycase_222_3": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11652.py": {\n            "py_path": "mars/case/test_mycase_11652.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_11652": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "rerun",\n                    "fun_outcome": "failed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["执行命令：",(0,t.jsx)(n.code,{children:'youqu3 run -w mars --order-execution "desc"'})]}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last_result.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "desc",\n    "interrupt_continue": false,\n    "start_case": "None",\n    "py_total_passed_failed_skipped": "7/3/3/1",\n    "fun_total_passed_failed_skipped": "9/5/2/2",\n    "start_time": "2024-09-19 09:02:22",\n    "end_time": "2024-09-19 09:03:13",\n    "test_cases": {\n        "test_mycase_11652.py": {\n            "py_path": "mars/case/test_mycase_11652.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_11652": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "failed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_222.py": {\n            "py_path": "mars/case/test_mycase_222.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_222_3": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                },\n                "test_mycase_222_2": {\n                    "setup": "passed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                },\n                "test_mycase_222_1": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                }\n            }\n        },\n        "test_mycase_123.py": {\n            "py_path": "mars/case/test_mycase_123.py",\n            "py_outcome": "skipped",\n            "case_fun_set": {\n                "test_mycase_123": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                }\n            }\n        },\n        "test_mycase_111.py": {\n            "py_path": "mars/case/test_mycase_111.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_111": {\n                    "setup": "failed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                }\n            }\n        },\n        "test_mycase_11.py": {\n            "py_path": "mars/case/test_mycase_11.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_mycase_11": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_b.py": {\n            "py_path": "mars/case/test_b.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_b": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"44-指定用例开始位置",children:["4.4 指定用例开始位置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-指定用例开始位置",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["为了更直观，这里结合参数 ",(0,t.jsx)(n.code,{children:'--order-execution "asc"'})," 进行用例指定."]}),"\n",(0,t.jsxs)(n.p,{children:["执行命令：",(0,t.jsx)(n.code,{children:'youqu3 run -w mars --order-execution "asc" --start-case "test_mycase_222_2"'})]}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last_result.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "asc",\n    "interrupt_continue": false,\n    "start_case": "test_mycase_222_2",\n    "py_total_passed_failed_skipped": "",\n    "fun_total_passed_failed_skipped": "",\n    "start_time": "2024-09-19 09:03:36",\n    "end_time": "",\n    "test_cases": {\n        "test_mycase_222.py": {\n            "py_path": "mars/case/test_mycase_222.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_222_2": {\n                    "setup": "passed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                },\n                "test_mycase_222_3": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11652.py": {\n            "py_path": "mars/case/test_mycase_11652.py",\n            "py_outcome": "",\n            "case_fun_set": {\n                "test_mycase_11652": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "rerun",\n                    "fun_outcome": "failed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"??"}),"\n",(0,t.jsxs)(n.h3,{id:"45-中断续跑",children:["4.5 中断续跑",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#45-中断续跑",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["这里手动模拟中断场景，再使用开关参数 ",(0,t.jsx)(n.code,{children:"--interrupt-continue"})," 进行续跑。"]}),"\n",(0,t.jsxs)(n.p,{children:["执行命令：",(0,t.jsx)(n.code,{children:'youqu3 run -w mars --order-execution "asc"'}),"，在执行用例时使用 ",(0,t.jsx)(n.code,{children:"ctrl + c"})," 中断测试，终端输出："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"====================================== test session starts =======================================\ncollected 9 items                                                                                \n用例收集数量:   9 (剔除跳过: 7)\n用例文件数量:   7 (剔除跳过: 6)\n\ncase/test_a.py::TestMyCase::test_a \nx86_64-202: 09/19 09:04:21 | INFO  | [pytest_runtest_setup]: \n========== test_a | None ========== [1/9]  11%\nx86_64-202: 09/19 09:04:21 | INFO  | [pytest_runtest_call]: ========== case body ==========\nx86_64-202: 09/19 09:04:21 | INFO  | [pytest_runtest_teardown]: ========== teardown ==========\nPASSED\ncase/test_b.py::TestMyCase::test_b \nx86_64-202: 09/19 09:04:24 | INFO  | [pytest_runtest_setup]: \n========== test_b | None ========== [2/9]  22%\nx86_64-202: 09/19 09:04:24 | INFO  | [pytest_runtest_call]: ========== case body ==========\nx86_64-202: 09/19 09:04:24 | INFO  | [pytest_runtest_teardown]: ========== teardown ==========\n^C\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "asc",\n    "interrupt_continue": false,\n    "start_case": "None",\n    "py_total_passed_failed_skipped": "1/1/0/0",\n    "fun_total_passed_failed_skipped": "1/1/0/0",\n    "start_time": "2024-09-19 09:04:21",\n    "end_time": "2024-09-19 09:04:24",\n    "test_cases": {\n        "test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["执行中断续跑命令：",(0,t.jsx)(n.code,{children:"youqu3 run -w mars --interrupt-continue"})]}),"\n",(0,t.jsx)(n.p,{children:"在对用例列表前后增加了打印信息，终端输出："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"====================================== test session starts =======================================\ncollecting ...\n\n收集用例：\n[<Function test_a>,<Function test_b>,<Function test_mycase_11>, <Function test_mycase_111>, <Function test_mycase_123>, <Function test_mycase_222_1>, <Function test_mycase_222_2>, <Function test_mycase_222_3>, <Function test_mycase_11652>]\n\n执行用例：\n[<Function test_b>,<Function test_mycase_11>, <Function test_mycase_111>, <Function test_mycase_123>, <Function test_mycase_222_1>, <Function test_mycase_222_2>, <Function test_mycase_222_3>, <Function test_mycase_11652>]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["查看日志 ",(0,t.jsx)(n.code,{children:"report/logs/last_result.log"})," 内容:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'{\n    "user": "mars",\n    "ip": "10.8.11.202",\n    "execution_order": "asc",\n    "interrupt_continue": true,\n    "start_case": "None",\n    "py_total_passed_failed_skipped": "7/3/3/1",\n    "fun_total_passed_failed_skipped": "9/5/2/2",\n    "start_time": "2024-09-19 09:04:21",\n    "end_time": "2024-09-19 09:05:48",\n    "test_cases": {\n        "test_a.py": {\n            "py_path": "mars/case/test_a.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_a": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_b.py": {\n            "py_path": "mars/case/test_b.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_b": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11.py": {\n            "py_path": "mars/case/test_mycase_11.py",\n            "py_outcome": "passed",\n            "case_fun_set": {\n                "test_mycase_11": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_111.py": {\n            "py_path": "mars/case/test_mycase_111.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_111": {\n                    "setup": "failed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                }\n            }\n        },\n        "test_mycase_123.py": {\n            "py_path": "mars/case/test_mycase_123.py",\n            "py_outcome": "skipped",\n            "case_fun_set": {\n                "test_mycase_123": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                }\n            }\n        },\n        "test_mycase_222.py": {\n            "py_path": "mars/case/test_mycase_222.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_222_1": {\n                    "setup": "skipped",\n                    "call": "skipped",\n                    "teardown": "passed",\n                    "fun_outcome": "skipped"\n                },\n                "test_mycase_222_2": {\n                    "setup": "passed",\n                    "call": "failed",\n                    "teardown": "passed",\n                    "fun_outcome": "failed"\n                },\n                "test_mycase_222_3": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "passed",\n                    "fun_outcome": "passed"\n                }\n            }\n        },\n        "test_mycase_11652.py": {\n            "py_path": "mars/case/test_mycase_11652.py",\n            "py_outcome": "failed",\n            "case_fun_set": {\n                "test_mycase_11652": {\n                    "setup": "passed",\n                    "call": "passed",\n                    "teardown": "failed",\n                    "fun_outcome": "passed"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"通过终端输出与日志输出可看到，中断续跑实际效果，完全满足特性："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"仅续跑未执行过的用例"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"汇总多次测试结果"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"5-小结",children:["5 小结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-小结",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["通过章节4的验证，可看出目前已解决当前面临的问题，后续遇到测试中断的情况，可以基于",(0,t.jsx)(n.code,{children:"中断续跑"}),"功能进行补测，并快速获取汇总的测试结果。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"日志汇总"}),"虽然是作为",(0,t.jsx)(n.code,{children:"中断续跑"}),"的支持功能，但标准的 ",(0,t.jsx)(n.code,{children:"json"})," 格式输出可被其他功能或平台读取数据。"]}),"\n",(0,t.jsxs)(n.p,{children:["而在开发",(0,t.jsx)(n.code,{children:"中断续跑"}),"与",(0,t.jsx)(n.code,{children:"日志汇总"}),"两个功能过程当中，基于日常使用场景，顺势实现了",(0,t.jsx)(n.code,{children:"用例排序"}),"、",(0,t.jsx)(n.code,{children:"指定测试起始位置"}),"，后续基于顺序控制用例执行范围，还可以有更多的扩展，例如："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"指定用例执行结束位置"}),"\n",(0,t.jsx)(n.li,{children:"指定用例执行顺序中特定范围"}),"\n",(0,t.jsx)(n.li,{children:"......"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["如果用例控制这一块 内容后续足够丰富后，也可以抽离出来做成 ",(0,t.jsx)(n.code,{children:"pytest"})," 公共插件与框架解耦，在需要的时候进行安装调用。"]}),"\n",(0,t.jsxs)(n.h2,{id:"6-参考资料",children:["6 参考资料",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-参考资料",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.pytest.org/en/stable/",target:"_blank",rel:"noopener noreferrer",children:"pytest 官方文档"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}let r=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["tech_doc%2F%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%2Fyouqu3%E4%B8%AD%E6%96%AD%E4%BB%BB%E5%8A%A1%E7%BB%AD%E8%B7%91%E5%8A%9F%E6%8A%80%E6%9C%AF%E8%83%BD%E8%B0%83%E7%A0%94.md"]={toc:[{text:"1 问题",id:"1-问题",depth:2},{text:"2 现状",id:"2-现状",depth:2},{text:"3 技术方案",id:"3-技术方案",depth:2},{text:"3.1 整体设计",id:"31-整体设计",depth:3},{text:"3.1.1 命令行参数新增",id:"311-命令行参数新增",depth:4},{text:"3.1.2 参数异常校验",id:"312-参数异常校验",depth:4},{text:"3.1.3 钩子功能开发",id:"313-钩子功能开发",depth:4},{text:"4 实验验证",id:"4-实验验证",depth:2},{text:"4.1 创建工程与用例",id:"41-创建工程与用例",depth:3},{text:"4.2 执行日志",id:"42-执行日志",depth:3},{text:"4.3 修改用例执行顺序",id:"43-修改用例执行顺序",depth:3},{text:"4.4 指定用例开始位置",id:"44-指定用例开始位置",depth:3},{text:"4.5 中断续跑",id:"45-中断续跑",depth:3},{text:"5 小结",id:"5-小结",depth:2},{text:"6 参考资料",id:"6-参考资料",depth:2}],title:"youqu3中断任务续跑功能调研",headingTitle:"youqu3中断任务续跑功能调研",frontmatter:{Author:"海针"}}}}]);