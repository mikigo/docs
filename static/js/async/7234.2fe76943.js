"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["7234"],{1587:function(n,e,i){i.r(e),i.d(e,{default:()=>t});var d=i(2676),r=i(453);function a(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",h3:"h3",img:"img",pre:"pre",code:"code"},(0,r.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"wayland键鼠模拟工具技术调研",children:["Wayland键鼠模拟工具技术调研",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#wayland键鼠模拟工具技术调研",children:"#"})]}),"\n",(0,d.jsxs)(e.h2,{id:"1问题",children:["1、问题",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1问题",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"目前Wayland环境下没有一个相对完美的键鼠模拟工具，我们希望实现一个键鼠模拟工具，需要具备以下功能点。"}),"\n",(0,d.jsxs)(e.ol,{children:["\n",(0,d.jsx)(e.li,{children:"模拟键盘鼠标的动作"}),"\n",(0,d.jsx)(e.li,{children:"获取光标位置"}),"\n",(0,d.jsx)(e.li,{children:"需要能便捷输入中文文字"}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"2术语定义",children:["2、术语定义",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2术语定义",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{align:"center",children:(0,d.jsx)(e.strong,{children:"序号"})}),"\n",(0,d.jsx)(e.th,{align:"center",children:(0,d.jsx)(e.strong,{children:"术语"})}),"\n",(0,d.jsx)(e.th,{align:"left",children:(0,d.jsx)(e.strong,{children:"定义"})}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"center",children:"1"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"uinput"}),"\n",(0,d.jsx)(e.td,{align:"left",children:"在内核中模拟一个输入设备，模拟输入操作"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"center",children:"2"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"KWayland"}),"\n",(0,d.jsx)(e.td,{align:"left",children:"一个 Wayland 下支持操控键鼠的库"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"X11"}),"\n",(0,d.jsx)(e.td,{align:"left",children:"一种显示服务器协议，linux 系统上广泛使用。"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{align:"center",children:"4"}),"\n",(0,d.jsx)(e.td,{align:"center",children:"Wayland"}),"\n",(0,d.jsx)(e.td,{align:"left",children:"一种显示服务器协议，旨在替代 X11。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"3键鼠模拟操控现状",children:["3、键鼠模拟操控现状",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3键鼠模拟操控现状",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"31uinput",children:["3.1、uinput",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#31uinput",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"uinput（User Input）是 Linux 内核提供的一个框架，用于模拟用户输入设备，例如键盘、鼠标和游戏手柄等。通过 uinput，用户空间程序可以创建虚拟输入设备，并模拟各种输入事件，从而实现对键鼠操控的模拟。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"优点"})}),"\n",(0,d.jsx)(e.p,{children:"原生支持： uinput 是 Linux 内核的一部分，原生支持在 Linux 系统上模拟用户输入设备，不需要额外安装软件包。"}),"\n",(0,d.jsx)(e.p,{children:"灵活性： 用户空间程序可以根据需要创建不同类型的虚拟输入设备，并模拟各种输入事件，包括按键、鼠标移动、点击等，灵活性很高。"}),"\n",(0,d.jsx)(e.p,{children:"与系统集成： uinput 可以很好地与系统集成，可以与 X11、Wayland 等窗口系统无缝配合，实现对图形界面的模拟操控。"}),"\n",(0,d.jsx)(e.p,{children:"适用性广泛： 由于 uinput 是 Linux 内核的一部分，因此适用于各种基于 Linux 内核的操作系统和嵌入式设备。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"缺点"})}),"\n",(0,d.jsx)(e.p,{children:"权限管理： 使用 uinput 需要对设备文件 /dev/uinput 具有适当的权限，通常需要 root 或者具有相应权限的用户才能够操作。"}),"\n",(0,d.jsx)(e.p,{children:"编程复杂性： 虽然 uinput 提供了丰富的功能，但是使用起来相对复杂，需要深入理解 Linux 输入系统和相关接口的工作原理。"}),"\n",(0,d.jsx)(e.p,{children:"依赖性： uinput 依赖于 Linux 内核和相应的驱动程序，因此在某些嵌入式系统或者特定配置下可能无法使用。"}),"\n",(0,d.jsxs)(e.h3,{id:"32kwayland",children:["3.2、KWayland",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#32kwayland",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"KWayland 是 KDE 社区开发的一个库，用于在 Wayland 显示服务器和客户端之间进行通信。它提供了用于构建 Wayland 协议的 C++ API，使开发者能够轻松地创建 Wayland 客户端和服务器端应用程序。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"优点"})}),"\n",(0,d.jsx)(e.p,{children:"原生支持 Wayland 协议： KWayland 提供了原生的 Wayland 协议支持，允许您在 Wayland 显示服务器和客户端之间进行通信，从而实现对键盘和鼠标的模拟操控。"}),"\n",(0,d.jsx)(e.p,{children:"功能丰富： KWayland 提供了丰富的功能，包括处理输入设备事件、管理窗口、渲染和图形处理等，使得模拟键鼠操控变得更加容易和灵活。"}),"\n",(0,d.jsx)(e.p,{children:"跨平台性： KWayland 是基于 Qt 框架的，因此具有良好的跨平台性，能够在各种支持 Qt 的操作系统上运行。"}),"\n",(0,d.jsx)(e.p,{children:"社区支持： 作为 KDE 社区的一部分，KWayland 受到了活跃的社区支持和持续的更新，可以获得及时的修复和改进。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"缺点"})}),"\n",(0,d.jsx)(e.p,{children:"依赖性： 使用 KWayland 需要依赖于 Qt 和 KF5（KDE Frameworks 5），因此需要确保系统中安装了这些依赖项。"}),"\n",(0,d.jsx)(e.p,{children:"性能开销： 在某些情况下，使用 KWayland 进行模拟键鼠操控可能会带来一定的性能开销，特别是在处理大量事件时可能会影响系统性能。"}),"\n",(0,d.jsxs)(e.h2,{id:"4获取光标位置现状",children:["4、获取光标位置现状",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4获取光标位置现状",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"41uinput",children:["4.1、uinput",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#41uinput",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"虽然 uinput 允许创建和注入输入事件，但它不直接提供获取光标位置的功能。获取光标位置通常需要访问系统中的显示服务器的状态。"}),"\n",(0,d.jsxs)(e.h3,{id:"42kwayland",children:["4.2、KWayland",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#42kwayland",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"在使用 KWayland 时，无法通过编译后的库直接获取光标位置，Wayland 与 X11 不同，在设计上更加注重安全和简洁，因此直接获取全局光标位置的能力被限制了。为了实现这个功能，需要在 KWayland 的源代码中进行自定义修改，这个很考验对 KWayland 源代码和Wayland协议熟悉与理解。"}),"\n",(0,d.jsxs)(e.h2,{id:"5模拟文字输入现状",children:["5、模拟文字输入现状",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5模拟文字输入现状",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"51自定义实现输入法",children:["5.1、自定义实现输入法",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#51自定义实现输入法",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"自定义实现一个输入法，这样就可以达到输入各种文字的目的，但这涉及多个方面，包括输入法引擎的设计、用户界面的实现、系统集成。linux 有 3 大输入法框架，工作量大，有难度，通过选择适当的输入法框架、合理的设计和优化，可以实现一个功能丰富、性能优良的输入法。"}),"\n",(0,d.jsxs)(e.h3,{id:"52通过剪贴板输入文字",children:["5.2、通过剪贴板输入文字",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#52通过剪贴板输入文字",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"在 Wayland 下，由于其设计初衷是更加注重安全性和隐私，限制了应用程序直接访问全局剪贴板的能力。这与 X11 不同，后者允许应用程序直接访问和操作剪贴板。在 Wayland 中，剪贴板的访问和操作通常由合成器（compositor）管理，这使得直接写入剪贴板变得更为困难。然而，通过正确的 API 和协议，仍然可以实现这一功能。"}),"\n",(0,d.jsx)(e.p,{children:"在 Wayland 下，剪贴板操作主要通过 wl_data_device_manager 和 wl_data_source 接口来实现。应用程序不能直接访问全局剪贴板，但可以在合成器允许的情况下进行剪贴板内容的设置和读取。并且由于正常 Wayland 系统为兼用 X11 显示协议，通常存在 XWayland 服务，这使得直接使用 X11 剪贴版写入工具也可完成剪贴板写入操作。"}),"\n",(0,d.jsxs)(e.h2,{id:"6整体方案",children:["6、整体方案",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6整体方案",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"61工具设计",children:["6.1、工具设计",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#61工具设计",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"使用 uinput 模拟键鼠输入 + 光标获取"})}),"\n",(0,d.jsx)(e.p,{children:"优点: 直接访问内核输入子系统，提供较低延迟和高精度的输入模拟。"}),"\n",(0,d.jsx)(e.p,{children:"适用场景: 需要精确模拟键鼠操作的应用，适用于所有支持 uinput 的 Linux 系统。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"通过剪贴板实现中文输入"})}),"\n",(0,d.jsx)(e.p,{children:"优点: 简单实现，通过剪贴板操作进行文本输入。"}),"\n",(0,d.jsx)(e.p,{children:"难点: Wayland 环境下实现困难，由于安全性限制，可能影响用户体验。"}),"\n",(0,d.jsx)(e.p,{children:"适用场景: 较低频率的文本输入，或者需要快速实现的原型系统。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.img,{src:"/wayland%E9%94%AE%E9%BC%A0%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94_assets/%E5%BD%93%E5%89%8D%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88.png",alt:"架构",title:"架构"})}),"\n",(0,d.jsx)(e.p,{children:"​                                                                                                                图1"}),"\n",(0,d.jsx)(e.p,{children:"具体工具结构，采用经典 CS 结构，Python 包负责封装调用接口，Wdotoold 负责实现具体各个功能单元。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.img,{src:"/wayland%E9%94%AE%E9%BC%A0%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94_assets/%E5%B7%A5%E5%85%B7%E7%BB%93%E6%9E%84.png",alt:""})}),"\n",(0,d.jsx)(e.p,{children:"​                                                                                                                 图2"}),"\n",(0,d.jsxs)(e.h3,{id:"62工具实现",children:["6.2、工具实现",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#62工具实现",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"uinput 初始化实现"})}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-c++",children:'//创建并设置设备\nint setup\\_uinput\\_device(Info info) {\nstruct uinput\\_setup usetup;\nfd = open("/dev/uinput", O\\_WRONLY | O\\_NONBLOCK);\nif (fd < 0) {\nperror("Unable to open /dev/uinput");\nreturn fd;\n}\n//激活同步事件\ncheck(ioctl(fd, UI\\_SET\\_EVBIT, EV\\_SYN), "UI\\_SET\\_EVBIT EV\\_SYN");\n//设置支持鼠标左右中键\ncheck(ioctl(fd, UI\\_SET\\_EVBIT, EV\\_KEY), "UI\\_SET\\_EVBIT, EV\\_KEY");\nstatic const int key\\_list[] = {KEY\\_ESC};\nfor (int i=0; i<sizeof(key\\_list)/sizeof(int); i++) {\ncheck(ioctl(fd, UI\\_SET\\_KEYBIT, key\\_list[i]), "UI\\_SET\\_KEYBIT LIST");\n}\n//设置支持滚轮事件\ncheck(ioctl(fd, UI\\_SET\\_EVBIT, EV\\_REL), "UI\\_SET\\_EVBIT, EV\\_REL");\ncheck(ioctl(fd, UI\\_SET\\_RELBIT, REL\\_WHEEL), "UI\\_SET\\_RELBIT, REL\\_WHEEL");\n//设置支持绝对坐标事件\ncheck(ioctl(fd, UI\\_SET\\_EVBIT, EV\\_ABS), "UI\\_SET\\_EVBIT EV\\_ABS");\ncheck(ioctl(fd, UI\\_SET\\_ABSBIT, ABS\\_X), "UI\\_SETEVBIT ABS\\_X");\ncheck(ioctl(fd, UI\\_SET\\_ABSBIT, ABS\\_Y), "UI\\_SETEVBIT ABS\\_Y");\n//设置虚拟设备版本信息\nstruct uinput\\_setup uidev;\nmemset(&uidev, 0, sizeof(uidev));\nsnprintf(uidev.name, UINPUT\\_MAX\\_NAME\\_SIZE, "wdotool");\nuidev.id.bustype = BUS\\_I2C;\nuidev.id.vendor = 0x04f3; // wacom\nuidev.id.product = 0x2841;\nuidev.id.version = 0x1;\nuidev.ff\\_effects\\_max = 0;\ncheck(ioctl(fd, UI\\_DEV\\_SETUP, &uidev), "UI\\_DEV\\_SETUP");\n//设置绝对坐标事件依赖的屏幕分辨率信息\nstruct uinput\\_abs\\_setup xabs;\nxabs.code = ABS\\_X;\nxabs.absinfo.minimum = 0;\nxabs.absinfo.maximum = info.screen\\_width;\nxabs.absinfo.fuzz = 0;\nxabs.absinfo.flat = 0;\nxabs.absinfo.resolution = info.resolution;\nxabs.absinfo.value = 0;\nstruct uinput\\_abs\\_setup yabs;\nyabs.code = ABS\\_Y;\nyabs.absinfo.minimum = 0;\nyabs.absinfo.maximum = info.screen\\_height;\nyabs.absinfo.fuzz = 0;\nyabs.absinfo.flat = 0;\nyabs.absinfo.resolution = info.resolution;\nyabs.absinfo.value = 0;\ncheck(ioctl(fd, UI\\_ABS\\_SETUP, &xabs), "ABS\\_X setup");\ncheck(ioctl(fd, UI\\_ABS\\_SETUP, &yabs), "ABS\\_Y setup");\n//创建设备\ncheck(ioctl(fd, UI\\_DEV\\_CREATE), "device creation");\nsleep(5);\n}\n'})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"剪贴板写入实现"})}),"\n",(0,d.jsx)(e.p,{children:"由于 uos 存在 Xwayland 服务，目前使用 wl-clipboard 实现剪贴板写入功能。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"代码孵化仓库"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.a,{href:"https://github.com/funny-dream/wdotool.git",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/funny-dream/wdotool.git"})}),"\n",(0,d.jsxs)(e.h2,{id:"7小结",children:["7、小结",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7小结",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"71现有方案总结",children:["7.1、现有方案总结",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#71现有方案总结",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"总体实现一个模拟键鼠操作的工具，主要功能包括键鼠操控、光标位置获取和中文输入。"}),"\n",(0,d.jsxs)(e.h3,{id:"72后续演进",children:["7.2、后续演进",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#72后续演进",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"考虑兼容各种系统，后续将使用配置文件依据实际系统是否支持，按下图中 Wdotool 服务端单元组件功能进行组合配置，使用 KWayland + uinput 实现键鼠模拟和光标获取，使用剪贴板 + 自定义输入法实现中文输入。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"KWayland 实现键鼠模拟和光标获取"})}),"\n",(0,d.jsx)(e.p,{children:"优点: 通过 Wayland 协议实现，适用于使用 Wayland 显示服务器的系统。"}),"\n",(0,d.jsx)(e.p,{children:"适用场景: 运行在 Wayland 环境下的应用，需要与 Wayland 合成器协作的场景。"}),"\n",(0,d.jsx)(e.p,{children:"工具提供多套配置方案，以适应不同的使用场景和平台需求。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"自定义输入法实现中文输入"})}),"\n",(0,d.jsx)(e.p,{children:"优点: 提供灵活性和可定制性，可以根据特定需求设计输入法逻辑。"}),"\n",(0,d.jsx)(e.p,{children:"适用场景: 需要特定功能或行为的输入法，适用于 IBus 或 Fcitx 框架。"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.img,{src:"/wayland%E9%94%AE%E9%BC%A0%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94_assets/%E6%BC%94%E8%BF%9B%E6%96%B9%E6%A1%88.png",alt:"图3",title:"图3"})}),"\n",(0,d.jsxs)(e.h2,{id:"8参考资料",children:["8、参考资料",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8参考资料",children:"#"})]}),"\n",(0,d.jsxs)(e.ol,{children:["\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"https://www.kernel.org/doc/html/latest/input/uinput.html",target:"_blank",rel:"noopener noreferrer",children:"https://www.kernel.org/doc/html/latest/input/uinput.html"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"https://github.com/KDE/kwayland",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/KDE/kwayland"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"https://github.com/fcitx/fcitx5",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/fcitx/fcitx5"})}),"\n",(0,d.jsx)(e.li,{children:(0,d.jsx)(e.a,{href:"https://github.com/phuang/ibus",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/phuang/ibus"})}),"\n"]})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(a,{...n})}):a(n)}let t=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%2F%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%2Fwayland%E9%94%AE%E9%BC%A0%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94.md"]={toc:[{text:"1、问题",id:"1问题",depth:2},{text:"2、术语定义",id:"2术语定义",depth:2},{text:"3、键鼠模拟操控现状",id:"3键鼠模拟操控现状",depth:2},{text:"3.1、uinput",id:"31uinput",depth:3},{text:"3.2、KWayland",id:"32kwayland",depth:3},{text:"4、获取光标位置现状",id:"4获取光标位置现状",depth:2},{text:"4.1、uinput",id:"41uinput",depth:3},{text:"4.2、KWayland",id:"42kwayland",depth:3},{text:"5、模拟文字输入现状",id:"5模拟文字输入现状",depth:2},{text:"5.1、自定义实现输入法",id:"51自定义实现输入法",depth:3},{text:"5.2、通过剪贴板输入文字",id:"52通过剪贴板输入文字",depth:3},{text:"6、整体方案",id:"6整体方案",depth:2},{text:"6.1、工具设计",id:"61工具设计",depth:3},{text:"6.2、工具实现",id:"62工具实现",depth:3},{text:"7、小结",id:"7小结",depth:2},{text:"7.1、现有方案总结",id:"71现有方案总结",depth:3},{text:"7.2、后续演进",id:"72后续演进",depth:3},{text:"8、参考资料",id:"8参考资料",depth:2}],title:"Wayland键鼠模拟工具技术调研",headingTitle:"Wayland键鼠模拟工具技术调研",frontmatter:{Author:"有志"}}}}]);