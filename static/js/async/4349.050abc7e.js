"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4349"],{6792:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(2676),l=s(453);function c(e){let n=Object.assign({p:"p",h1:"h1",a:"a",h2:"h2",h3:"h3",ul:"ul",li:"li",code:"code",pre:"pre",strong:"strong",img:"img"},(0,l.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"dom,请求方式,事件，浏览器开发工具介绍"}),"\n",(0,r.jsxs)(n.h1,{id:"web基础",children:["web基础",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web基础",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本教程旨在帮助初学者了解 Web 开发的基础知识，包括 DOM 操作、请求方式、事件处理以及如何使用浏览器开发工具。"}),"\n",(0,r.jsxs)(n.h2,{id:"dom",children:["DOM",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dom",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"DOM它提供了对文档的结构化的表述，并定义了一种方式可以使程序和脚本能够对文档的内容、结构和样式进行访问和操作。"}),"\n",(0,r.jsxs)(n.h3,{id:"dom-树结构",children:["DOM 树结构",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dom-树结构",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"文档：整个 HTML 页面"}),"\n",(0,r.jsxs)(n.li,{children:["元素：页面中的所有标签，如 ",(0,r.jsx)(n.code,{children:"<div>"}),", ",(0,r.jsx)(n.code,{children:"<a>"}),", ",(0,r.jsx)(n.code,{children:"<span>"})," 等"]}),"\n",(0,r.jsxs)(n.li,{children:["属性：元素的属性，如 ",(0,r.jsx)(n.code,{children:"class"}),", ",(0,r.jsx)(n.code,{children:"id"}),", ",(0,r.jsx)(n.code,{children:"href"})," 等"]}),"\n",(0,r.jsx)(n.li,{children:"文本：元素中的文本内容"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"操作-dom-元素简述",children:["操作 DOM 元素简述",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#操作-dom-元素简述",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"DOM 操作是指对页面标签进行操作。如：设置样式、设置文本、设置属性、删除标签、事件绑定等"}),"\n",(0,r.jsxs)(n.h3,{id:"获取标签",children:["获取标签",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取标签",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"document.getElementById()"})}),"\n",(0,r.jsxs)(n.p,{children:["返回对拥有指定 ",(0,r.jsx)(n.code,{children:"id"})," 的第一个元素的引用。ID 是唯一的，所以这个方法每次最多只返回一个元素。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<div id="myId"></div>\n<script>\nvar element = document.getElementById("myId");\n<\/script>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"document.getElementsByTagName()"})}),"\n",(0,r.jsx)(n.p,{children:"返回一个包含所有指定标签名称的元素的 HTML 集合（HTMLCollection）。这是一个动态的集合，意味着如果文档中的元素发生变化，它也会随之更新。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'var elements = document.getElementsByTagName("p"); // 获取所有 <p> 标签元素\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"document.getElementsByClassName()"})}),"\n",(0,r.jsx)(n.p,{children:"此方法返回一个包含了所有拥有指定类名的元素的 HTML 集合（HTMLCollection）。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<div class="myClass">111</div>\n<h1 class="myClass">Hello</h1>\n\n<script>\nvar elements = document.getElementsByClassName("myClass"); // 获取所有类名为 "myClass" 的元素\n<\/script>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"document.querySelector()"})}),"\n",(0,r.jsx)(n.p,{children:"此方法返回文档中第一个匹配指定选择器的元素。选择器可以是 CSS 选择器。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'var element = document.querySelector("#myId"); // 使用ID选择器\nvar element = document.querySelector(".myClass"); // 使用类选择器\nvar element = document.querySelector("p"); // 使用标签选择器\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"document.querySelectorAll()"})}),"\n",(0,r.jsxs)(n.p,{children:["此方法返回一个包含了所有匹配指定选择器的元素的 节点 集合。与",(0,r.jsx)(n.code,{children:"querySelector()"}),"不同，它返回所有匹配的元素而不仅是第一个。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'var elements = document.querySelectorAll(".myClass"); // 获取所有类名为 "myClass" 的元素\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"element.querySelector()"}),"&",(0,r.jsx)(n.code,{children:"element.querySelectorAll()"})]}),"\n",(0,r.jsxs)(n.p,{children:["与 ",(0,r.jsx)(n.code,{children:"document.querySelector()"})," 和 ",(0,r.jsx)(n.code,{children:"document.querySelectorAll()"})," 类似，但它们是在已存在的 DOM 元素上调用，用于查找该元素的后代元素。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'var container = document.getElementById("myContainer");\nvar element = container.querySelector(".myClass"); // 在#myContainer内部查找类名为"myClass"的第一个元素\nvar elements = container.querySelectorAll(".myClass"); // 在#myContainer内部查找所有类名为"myClass"的元素\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"element.children"})," & ",(0,r.jsx)(n.code,{children:"element.childNodes"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"element.children"})," 是一个 HTMLCollection，包含了元素的所有子元素（不包含文本节点和注释）。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"element.childNodes"})," 是一个 NodeList，包含了元素的所有子节点，包括元素节点、文本节点和注释节点。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"var children = element.children; // 获取子元素\nvar childNodes = element.childNodes; // 获取所有子节点\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"element.parentNode"})," 和 ",(0,r.jsx)(n.code,{children:"element.parentElement"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"element.parentNode"})," 返回元素的父节点，可能是元素节点，也可能是文本节点或其他类型的节点。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"element.parentElement"})," 返回元素的父元素节点（不包括文本节点和注释节点）。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"var parentNode = element.parentNode; // 获取父节点\nvar parentElement = element.parentElement; // 获取父元素节点\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"修改内容",children:["修改内容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改内容",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"innerHTML"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"innerHTML"})," 属性设置或获取 HTML 元素的内容。当用来设置时，它会解析字符串中的 HTML 标签，并将其插入到元素中。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 获取元素的内容\nvar content = element.innerHTML;\n\n// 设置元素的内容，并解析HTML标签\nelement.innerHTML = "Some <strong>text</strong>";\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"textContent"})," 或 ",(0,r.jsx)(n.code,{children:"innerText"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"textContent"})," 属性设置或获取元素及其后代的文本内容。与",(0,r.jsx)(n.code,{children:"innerHTML"}),"不同，",(0,r.jsx)(n.code,{children:"textContent"}),"不会解析 HTML 标签。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"innerText"})," 是一个类似的属性，但它在处理空白符时与",(0,r.jsx)(n.code,{children:"textContent"}),"有所不同，并且不是标准的 DOM 属性。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 获取元素的文本内容\nvar text = element.textContent;\n\n// 设置元素的文本内容\nelement.textContent = "Some text";\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"value"})}),"\n",(0,r.jsxs)(n.p,{children:["对于表单元素（如",(0,r.jsx)(n.code,{children:"<input>"}),", ",(0,r.jsx)(n.code,{children:"<textarea>"}),"），可以使用",(0,r.jsx)(n.code,{children:"value"}),"属性来获取或设置其值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 获取input元素的值\nvar inputValue = inputElement.value;\n\n// 设置input元素的值\ninputElement.value = "New Value";\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"setAttribute()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setAttribute()"})," 方法用于设置元素属性的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 设置元素的属性\nelement.setAttribute("class", "newClass");\nelement.setAttribute("href", "http://www.example.com");\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"创建标签",children:["创建标签",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建标签",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:'document.createElement("标签名") '}),"创建标签。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'var lis = document.createElement("li")\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"插入和删除",children:["插入和删除",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插入和删除",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在元素内部的末尾插入内容"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var newElement = document.createElement("div")\nelement.appendChild(newElement);\n'})}),"\n",(0,r.jsx)(n.p,{children:"在元素内部的开头插入内容"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"element.insertBefore(newElement, element.firstChild);\n"})}),"\n",(0,r.jsx)(n.p,{children:"移除元素"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"element.removeChild(oldElement);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["替换元素内容，使用",(0,r.jsx)(n.code,{children:"replaceChild()"}),"替换子元素"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"element.replaceChild(newElement, oldElement);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"事件",children:["事件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"事件是指某种程序的驱动行为。事件就是行为，行为发生了，代码块被执行了 ，触发了事件。用户或浏览器自身执行的某种动作，如点击按钮、加载页面或按下键盘按键等事件。"}),"\n",(0,r.jsxs)(n.p,{children:["通常通过 ",(0,r.jsx)(n.code,{children:"dom. 事件行为 = function(){函数内容} "}),"绑定事件。"]}),"\n",(0,r.jsxs)(n.h3,{id:"事件的基本概念",children:["事件的基本概念",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件的基本概念",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"事件（Event）"}),"：是文档或浏览器窗口中发生的特定交互瞬间。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"事件监听器（Event Listener）"}),"：也称为事件处理器，是等待事件发生并触发响应代码的函数。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"事件目标（Event Target）"}),"：是发生事件的对象，例如按钮、输入框等。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"事件类型",children:["事件类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"鼠标事件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"click"}),"：鼠标点击"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dblclick"}),"：鼠标双击"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mousedown"}),"：鼠标按钮被按下"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mouseup"}),"：鼠标按钮被释放"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mousemove"}),"：鼠标移动"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mouseover"}),"：鼠标移入元素"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mouseout"}),"：鼠标移出元素"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"contextmenu"}),"：右键点击"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"键盘事件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"keydown"}),"：键盘按键被按下"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"keyup"}),"：键盘按键被释放"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"keypress"}),"：键盘按键被按下并释放"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"表单事件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"submit"}),"：表单提交"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"change"}),"：表单元素值改变"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"focus"}),"：元素获得焦点"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"blur"}),"：元素失去焦点"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"文档事件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"DOMContentLoaded"}),"：文档加载完成"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"load"}),"：整个页面及所有依赖资源加载完成"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"unload"}),"：页面正在卸载"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"窗口事件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"resize"}),"：窗口大小改变"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scroll"}),"：页面滚动"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"事件处理",children:["事件处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件处理",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["行内事件处理：直接在 HTML 标签内添加事件处理属性，例如 ",(0,r.jsx)(n.code,{children:"onclick"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<button onclick=\"alert('Clicked!')\">Click me</button>\n"})}),"\n",(0,r.jsx)(n.p,{children:"属性添加事件处理：在 JavaScript 中获取 DOM 元素，然后为其事件属性赋值一个函数。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"document.getElementById('myButton').onclick = function() { alert('Clicked!'); };\n"})}),"\n",(0,r.jsxs)(n.p,{children:["添加事件监听器：使用",(0,r.jsx)(n.code,{children:"addEventListener"}),"方法为元素添加事件监听器。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"document.getElementById('myButton').addEventListener('click', function() { alert('Clicked!'); });\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"事件对象",children:["事件对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件对象",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当一个事件被触发时，浏览器会自动生成一个事件对象并将其作为参数传递给事件处理函数。这个事件对象包含了有关该事件的各种信息可以用来获取和操作事件的相关属性和方法。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"event.type"}),"：事件的类型"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"event.target"}),"：触发事件的目标元素"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"event.clientX / event.clientY"}),"：鼠标事件发生时的窗口坐标"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"event.key"}),"：键盘事件中按下的键的值"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"请求方式",children:["请求方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#请求方式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 Web 开发中，HTTP 请求方式定义了客户端与服务器之间的不同类型的交互，以下是常见请求方式的详解："}),"\n",(0,r.jsxs)(n.h3,{id:"get",children:["GET",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#get",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于请求服务器发送资源或数据。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"数据在 URL 中传递，通过查询字符串的形式附加在请求地址后。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"没有请求体（body）。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"安全性较低，因为数据在 URL 中暴露。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"幂等操作，意味着多次执行同一请求，资源的状态不会改变。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：获取资源，如检索页面、查询数据。"}),"\n",(0,r.jsxs)(n.h3,{id:"post",children:["POST",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#post",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于向服务器提交数据。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"数据在请求体中传递。"}),"\n",(0,r.jsx)(n.li,{children:"可以发送大量数据。"}),"\n",(0,r.jsx)(n.li,{children:"不是幂等操作，多次执行同一请求可能会产生不同的结果。"}),"\n",(0,r.jsx)(n.li,{children:"更安全，因为数据不会在 URL 中暴露。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：表单提交、上传文件、创建资源。"}),"\n",(0,r.jsxs)(n.h3,{id:"put",children:["PUT",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#put",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于更新服务器上的资源。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"数据在请求体中传递。"}),"\n",(0,r.jsx)(n.li,{children:"通常用于完整地替换资源或集合。"}),"\n",(0,r.jsx)(n.li,{children:"幂等操作，多次执行同一请求，资源的状态最终是相同的。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：更新资源，如更新用户信息。"}),"\n",(0,r.jsxs)(n.h3,{id:"delete",children:["DELETE",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#delete",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于删除服务器上的资源。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"通常没有请求体。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"幂等操作，多次执行同一请求，资源最终都会被删除。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：删除资源，如删除一条用户记录。"}),"\n",(0,r.jsxs)(n.h3,{id:"patch",children:["PATCH",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#patch",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于对资源进行部分更新。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"数据在请求体中传递。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"不是幂等操作，因为多次执行同一请求可能会得到不同的结果"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：对资源进行部分修改，如修改用户的部分信息。"}),"\n",(0,r.jsxs)(n.h3,{id:"head",children:["HEAD",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#head",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"类似于 GET 请求，但服务器不会返回请求的资源，只返回响应头。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"用于检查资源的元数据，如验证资源是否存在或获取资源的最后修改时间。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"适用场景：获取资源的元信息。"}),"\n",(0,r.jsxs)(n.h3,{id:"options",children:["OPTIONS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用于获取指定 URL 支持的方法列表。"}),"\n",(0,r.jsx)(n.p,{children:"允许客户端查看服务器支持哪些 HTTP 方法。"}),"\n",(0,r.jsx)(n.p,{children:"适用场景：CORS（跨源资源共享）中的 “预检” 请求。"}),"\n",(0,r.jsxs)(n.h2,{id:"ajax发送各种请求",children:["AJAX发送各种请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax发送各种请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"AJAX，全称“Asynchronous JavaScript and XML”（异步JavaScript和XML），是一种用于创建交互式网页应用的网页开发技术。"}),"\n",(0,r.jsx)(n.p,{children:"它允许浏览器与服务器之间进行异步数据交互，可以在不重新加载整个页面的情况下，更新页面的部分内容。"}),"\n",(0,r.jsxs)(n.h3,{id:"结合jquery发送ajax请求",children:["结合jQuery发送AJAX请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合jquery发送ajax请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"使用 jQuery 结合 AJAX 发送 HTTP 请求可以更加简洁和方便，因为 jQuery 提供了一套高层次的 AJAX 实现。以下是使用 jQuery 发送各种 HTTP 请求的示例。"}),"\n",(0,r.jsx)(n.p,{children:"引入 jQuery"}),"\n",(0,r.jsx)(n.p,{children:"首先，确保在 HTML 文件中引入了 jQuery 库。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"><\/script>\n'})}),"\n",(0,r.jsx)(n.p,{children:"GET 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"$.get('https://api.example.com/data', function(response) {\n  console.log('GET Response:', response);\n}).fail(function(xhr, status, error) {\n  console.error('GET Error:', error);\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"POST 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var data = { key: 'value' };\n\n$.post('https://api.example.com/data', data, function(response) {\n  console.log('POST Response:', response);\n}).fail(function(xhr, status, error) {\n  console.error('POST Error:', error);\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"PUT 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var data = { key: 'new-value' };\n\n$.ajax({\n  url: 'https://api.example.com/data/123',\n  type: 'PUT',\n  data: JSON.stringify(data),\n  contentType: 'application/json',\n  success: function(response) {\n    console.log('PUT Response:', response);\n  },\n  error: function(xhr, status, error) {\n    console.error('PUT Error:', error);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"DELETE 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"$.ajax({\n  url: 'https://api.example.com/data/123',\n  type: 'DELETE',\n  success: function() {\n    console.log('DELETE Request was successful.');\n  },\n  error: function(xhr, status, error) {\n    console.error('DELETE Error:', error);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"PATCH 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var data = { key: 'partial-value' };\n\n$.ajax({\n  url: 'https://api.example.com/data/123',\n  type: 'PATCH',\n  data: JSON.stringify(data),\n  contentType: 'application/json',\n  success: function(response) {\n    console.log('PATCH Response:', response);\n  },\n  error: function(xhr, status, error) {\n    console.error('PATCH Error:', error);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"HEAD 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"$.ajax({\n  url: 'https://api.example.com/data',\n  type: 'HEAD',\n  success: function(xhr, status) {\n    console.log('HEAD Headers:', xhr.getAllResponseHeaders());\n  },\n  error: function(xhr, status, error) {\n    console.error('HEAD Error:', error);\n  }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"OPTIONS 请求"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"$.ajax({\n  url: 'https://api.example.com/data',\n  type: 'OPTIONS',\n  success: function(response) {\n    console.log('OPTIONS Response:', response);\n  },\n  error: function(xhr, status, error) {\n    console.error('OPTIONS Error:', error);\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"结合html发送",children:["结合HTML发送",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合html发送",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n    \x3c!-- 1.引入 jquery --\x3e\n    <script src="https://code.jquery.com/jquery-3.6.0.min.js"><\/script>\n</head>\n<body>\n  <button onclick="ajaxTestGet()">get请求示例</button>\n  <button onclick="ajaxTestPost()">post请求示例</button>\n</body>\n</html>\n<script>\n  function ajaxTestGet(){\n    $.ajax({\n      // 请求地址\n      url: \'./static/json/test.json\',\n      // 请求方式\n      type: \'get\',\n      // 请求头\n      headers:{\n        \'loginToken\': "null"\n      },\n      // 请求参数\n      data: {\n        "username": "username",\n        "password": "password"\n      },\n      //请求数据类型\n      contentType: \'application/json\',\n      // 请求成功回调函数\n      success: function (result) {\n        console.log("result---\x3e", result);\n      },\n      // 请求失败回调函数\n      error: function () {\n        console.error("result---\x3e", result);\n      },\n      // 请求超时时间\n      timeout: 180000,\n    });\n  }\n\n  function ajaxTestPost(){\n    $.ajax({\n      // 请求地址\n      url: \'./static/json/test.json\',\n      // 请求方式\n      type: \'post\',\n      // 请求头\n      headers:{\n        \'loginToken\': "null"\n      },\n      // 请求参数\n      data: {\n        "username": "username",\n        "password": "password"\n      },\n      //请求数据类型\n      contentType: \'application/json\',\n      // 请求成功回调函数\n      success: function (result) {\n        console.log("result---\x3e", result);\n      },\n      // 请求失败回调函数\n      error: function () {\n        console.error("result---\x3e", result);\n      },\n      // 请求超时时间\n      timeout: 180000,\n    });\n  }\n<\/script>\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"浏览器开发工具",children:["浏览器开发工具",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器开发工具",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"浏览器开发者工具是一套内置于浏览器中的工具集，用于帮助开发者调试网页、查看源代码、检查网络请求等。"}),"\n",(0,r.jsxs)(n.h3,{id:"初识开发者工具",children:["初识开发者工具",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初识开发者工具",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["打开浏览器开发者工具。你可以通过右键点击页面，选择“检查”，会打开浏览器开发者工具。或者使用快捷键",(0,r.jsx)(n.code,{children:"Ctrl + Shift + I"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023151922907.png",alt:"image-20241023151922907"})}),"\n",(0,r.jsx)(n.p,{children:"重要面板简介"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Elements（元素）面板：用于查看和编辑HTML结构。你可以通过这个面板直接修改页面元素的HTML代码，实时预览修改效果。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Console（控制台）面板：用于输出调试信息、执行JavaScript代码等。这个面板在开发过程中非常有用，可以快速测试代码片段和查看错误信息。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sources（源代码）面板：用于查看和管理网页的JavaScript、CSS等资源文件。你可以在这里查看文件内容、设置断点以及单步执行代码。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Network（网络）面板：用于监控网页加载过程中发送和接收的所有网络请求。你可以查看请求的详细信息、请求/响应头和内容等。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Performance（性能）面板：用于分析网页性能瓶颈，通过记录和分析页面加载过程中的事件，找出影响性能的因素。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Memory（内存）面板：用于分析内存使用情况，帮助查找内存泄漏和优化内存使用。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"elements-元素面板",children:["Elements 元素面板",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#elements-元素面板",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"主要用于查看和编辑网页的HTML结构。通过Elements面板，开发者可以方便地导航和修改HTML代码，实时预览修改后的效果。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023152746303.png",alt:"image-20241023152746303"})}),"\n",(0,r.jsx)(n.p,{children:"以下是Elements面板的详细作用："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"查看和编辑HTML：在Elements面板中，你可以直接查看网页的HTML源代码，并且可以即时地编辑这些代码。这种交互式编辑的特点使得开发者可以快速尝试不同的代码修改，实时查看修改后的效果。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"定位和选择元素：通过使用鼠标或键盘快捷键，你可以在Elements面板中定位和选择特定的HTML元素。这对于精确地定位和修改页面中的特定部分非常有用。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"查找和替换文本：在Elements面板中，你可以在整个HTML文档中查找和替换特定的文本或标记，这在需要批量修改页面内容时非常方便。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"检查元素属性：每个HTML元素都有一系列的属性和方法。在Elements面板中，你可以查看和编辑这些属性，进一步了解元素的特性和行为。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"DOM树形视图：Elements面板以树形结构展示了整个HTML文档的结构，这有助于开发者更好地理解页面布局和结构。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"样式编辑器：除了可以查看和编辑HTML外，Elements面板还提供了样式编辑器，允许你直接编辑元素的CSS样式。这使得开发者可以更快地调整样式，而无"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"需在HTML和CSS之间来回切换。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"实时预览：在编辑HTML或CSS时，Elements面板会实时预览所做的更改。这意味着你无需刷新页面就可以看到修改后的效果，大大提高了开发效率。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"查看和编辑HTML，直接在Elements中编辑元素页面即可立即呈现"}),"\n",(0,r.jsxs)(n.p,{children:["直接左键双击页面元素进行编辑，下面将",(0,r.jsx)(n.code,{children:"<a>"}),"标签中的内容修改，页面立即展示出修改的内容"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023153104029.png",alt:"image-20241023153104029"})}),"\n",(0,r.jsx)(n.p,{children:"根据页面内容定位元素位置，点击面板左上角的箭头，就可以选中页面中的内容直接定位到面板中的元素位置"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023153327013.png",alt:"image-20241023153327013"})}),"\n",(0,r.jsx)(n.p,{children:"点击后，图标颜色变为蓝色说明启动了该功能，鼠标在页面上滑动，右侧面板中实时展示到对应元素的位置"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023153538168.png",alt:"image-20241023153538168"})}),"\n",(0,r.jsxs)(n.h3,{id:"console-控制台面板",children:["Console 控制台面板",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#console-控制台面板",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"主要用于显示网页在加载过程中产生的各类信息，包括错误、警告、调试信息等，也可以直接在这个面板中编辑js代码"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023153817306.png",alt:"image-20241023153817306"})}),"\n",(0,r.jsx)(n.p,{children:"以下是Console面板的主要功能和使用方法："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"日志输出：Console面板可以显示由JavaScript代码输出的日志信息，包括普通信息（log）、警告（warning）、错误（error）等。这些信息对于调试和排查问题非常有用。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"命令行交互：Console面板提供了一个类似于命令行的界面，允许你直接输入和执行JavaScript代码。你可以在这里测试代码片段、查看变量值、调用函数等。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"自动完成和历史记录：Console提供了自动完成功能，根据你输入的内容提供代码补全建议。此外，还会保存你输入的历史记录，方便你快速复用之前的命令。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"格式化输出：Console面板支持格式化输出，允许你控制日志信息的显示格式，包括控制台输出的颜色、字体等。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"清除控制台：如果你在控制台中输出了很多日志信息，可以使用清除按钮来清空控制台的内容。你也可以使用快捷键（通常是Ctrl+L或Cmd+K）来快速清除控制台。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"使用Console面板是开发过程中排查问题、调试代码的重要手段之一。通过查看控制台中的日志信息，你可以快速定位和解决潜在的问题。同时，利用控制台的命令行交互功能，你可以方便地进行代码测试和调试。"}),"\n",(0,r.jsxs)(n.h3,{id:"sources-源代码面板",children:["Sources 源代码面板",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sources-源代码面板",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"主要用于浏览和管理网页的源代码，页面请求和加载的源代码都在这个面板中可见。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023154409008.png",alt:"image-20241023154409008"})}),"\n",(0,r.jsx)(n.p,{children:"以下是Sources面板的主要功能和使用方法："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"浏览源代码：在Sources面板中，你可以查看网页的HTML、CSS、JavaScript等源文件。这些文件通常保存在本地或在服务器上，Sources面板允许你方便地访问和查看它们。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"实时编辑：在Sources面板中，你可以实时编辑网页的源代码。对于JavaScript代码，你甚至可以设置断点，进行单步执行等操作。这种交互式的编辑方式使得开发者可以快速尝试不同的代码修改，实时查看修改后的效果。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"调试代码：在编辑器中打开JavaScript文件时，你可以在代码行号旁边单击来设置断点。当代码执行到断点处时，执行会暂停，允许你检查当前作用域中的变量值、调用栈等信息。你可以使用控制台来输出调试信息、执行特定命令等。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"控制台输出：在Sources面板中，你可以使用控制台来输出调试信息、执行JavaScript代码等。控制台提供了一个交互式的环境，方便你进行代码测试和调试。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"资源管理：除了浏览和编辑源代码，Sources面板还提供了资源管理功能。你可以查看和管理网页加载的所有资源文件，包括脚本、样式表、图片等。这些资源文件可以在面板中直接编辑或删除。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"network-网络面板",children:["Network 网络面板",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#network-网络面板",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"主要用于监控和记录网页加载过程中发生的所有网络请求"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"/html_css_js_asset/image-20241023154944753.png",alt:"image-20241023154944753"})}),"\n",(0,r.jsx)(n.p,{children:"以下是Network面板的主要功能和使用方法："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"请求监控：Network面板以表格形式列出了所有网络请求的详细信息，包括请求的URL、方法、状态码、响应大小等。你可以实时查看每个请求的详细信息，了解请求的流程和状态。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"时间轴视图：除了表格视图外，Network面板还提供了时间轴视图，以更直观的方式展示网络请求的顺序和加载时间。你可以查看每个请求的发起时间、完成时间以及在时间轴上的位置。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"筛选和排序：Network面板提供了筛选和排序功能，你可以根据请求的类型、状态码、资源类型等对请求进行筛选，或者按照时间、大小等对请求进行排序。这有助于你快速找到特定的请求或分析请求的性能瓶颈。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"查看请求/响应详情：对于每个网络请求，Network面板提供了详细的请求和响应头信息，以及响应的内容。你可以查看HTTP请求和响应的完整内容，以便更好地理解网络请求的过程和结果。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"性能分析：通过Network面板，你可以分析网页加载的性能瓶颈。你可以查看每个请求的加载时间、大小以及在时间轴上的位置，找出导致性能问题的原因。"}),"\n"]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["program%2F%E5%89%8D%E5%90%8E%E7%AB%AF%2FWeb%E5%9F%BA%E7%A1%80.md"]={toc:[{text:"DOM",id:"dom",depth:2},{text:"DOM 树结构",id:"dom-树结构",depth:3},{text:"操作 DOM 元素简述",id:"操作-dom-元素简述",depth:3},{text:"获取标签",id:"获取标签",depth:3},{text:"修改内容",id:"修改内容",depth:3},{text:"创建标签",id:"创建标签",depth:3},{text:"插入和删除",id:"插入和删除",depth:3},{text:"事件",id:"事件",depth:2},{text:"事件的基本概念",id:"事件的基本概念",depth:3},{text:"事件类型",id:"事件类型",depth:3},{text:"事件处理",id:"事件处理",depth:3},{text:"事件对象",id:"事件对象",depth:3},{text:"请求方式",id:"请求方式",depth:2},{text:"GET",id:"get",depth:3},{text:"POST",id:"post",depth:3},{text:"PUT",id:"put",depth:3},{text:"DELETE",id:"delete",depth:3},{text:"PATCH",id:"patch",depth:3},{text:"HEAD",id:"head",depth:3},{text:"OPTIONS",id:"options",depth:3},{text:"AJAX发送各种请求",id:"ajax发送各种请求",depth:2},{text:"结合jQuery发送AJAX请求",id:"结合jquery发送ajax请求",depth:3},{text:"结合HTML发送",id:"结合html发送",depth:3},{text:"浏览器开发工具",id:"浏览器开发工具",depth:2},{text:"初识开发者工具",id:"初识开发者工具",depth:3},{text:"Elements 元素面板",id:"elements-元素面板",depth:3},{text:"Console 控制台面板",id:"console-控制台面板",depth:3},{text:"Sources 源代码面板",id:"sources-源代码面板",depth:3},{text:"Network 网络面板",id:"network-网络面板",depth:3}],title:"web基础",headingTitle:"web基础",frontmatter:{}}}}]);