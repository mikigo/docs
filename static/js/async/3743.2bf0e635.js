"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3743"],{5648:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var h=s(2676),t=s(453);function r(e){let n=Object.assign({h2:"h2",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",h3:"h3",ul:"ul",li:"li",ol:"ol",p:"p",br:"br",pre:"pre",strong:"strong"},(0,t.ah)(),e.components);return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(n.h2,{id:"shell数学运算",children:["Shell数学运算",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#shell数学运算",children:"#"})]}),"\n",(0,h.jsxs)(n.h2,{id:"1-常用的数学运算工具及表达式",children:["1. 常用的数学运算工具及表达式",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-常用的数学运算工具及表达式",children:"#"})]}),"\n",(0,h.jsxs)(n.table,{children:["\n",(0,h.jsxs)(n.thead,{children:["\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.th,{children:"工具/表达式"}),"\n",(0,h.jsx)(n.th,{children:"案例说明"}),"\n"]}),"\n"]}),"\n",(0,h.jsxs)(n.tbody,{children:["\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"$[ expressions ]"})}),"\n",(0,h.jsxs)(n.td,{children:["支持整数运算， 如 ",(0,h.jsx)(n.code,{children:"var = $[ 3 + 2 ]"}),",   ",(0,h.jsx)(n.code,{children:"var = $[ var * 10 ]"}),"。"]}),"\n"]}),"\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"$((  expressions  ))"})}),"\n",(0,h.jsxs)(n.td,{children:["支持整数运算，功能更为强大灵活，类C语言表达式风格，支持三元运算，支持自增自减，如",(0,h.jsx)(n.code,{children:"$((1+2+3))"}),"， ",(0,h.jsx)(n.code,{children:"$(($i++)) "})]}),"\n"]}),"\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"expr"})}),"\n",(0,h.jsxs)(n.td,{children:["支持整数运算，如 ",(0,h.jsx)(n.code,{children:"expr $i + 2"}),", 注意表达式中每个参数之间要有空格，并且有类似*这样的通配符还要转义。 如",(0,h.jsx)(n.code,{children:"expr 2 + 3"})," ,   ",(0,h.jsx)(n.code,{children:"expr 5 \\* 6  "})]}),"\n"]}),"\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"let "})}),"\n",(0,h.jsxs)(n.td,{children:["用于整数计算，支持自增自减运算， 注意表达式中每个参数之间不能有空格， 如",(0,h.jsx)(n.code,{children:"let i++;let i++1;  "})]}),"\n"]}),"\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"bc "})}),"\n",(0,h.jsxs)(n.td,{children:["计算器，支持浮点运算, 如 ",(0,h.jsx)(n.code,{children:"echo “2+3” | bc"})," ,  ",(0,h.jsx)(n.code,{children:"echo “scale=2;5/2” | bc "})]}),"\n"]}),"\n",(0,h.jsxs)(n.tr,{children:["\n",(0,h.jsx)(n.td,{children:(0,h.jsx)(n.code,{children:"awk/gawk  "})}),"\n",(0,h.jsxs)(n.td,{children:["强大的文本和字符串处理工具，类C语言表达式风格，如 ",(0,h.jsx)(n.code,{children:"echo | awk '{ printf(\"%d\\n\",2+3) }' "})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,h.jsxs)(n.h3,{id:"11--expression-表达式",children:["1.1 ",(0,h.jsx)(n.code,{children:"$[ expression ]"}),"表达式",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11--expression-表达式",children:"#"})]}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.ol,{children:["\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.code,{children:"$[...]"}),"表达式中变量符号$可有可无，表达式各参数之间空格可有可无。支持",(0,h.jsx)(n.code,{children:"+,-,*,/,%, ++,--,>,<,==,**,&&,||"}),"等运算符。"]}),"\n",(0,h.jsxs)(n.p,{children:["如",(0,h.jsx)(n.code,{children:"a=8;"})," ",(0,h.jsx)(n.code,{children:"echo $[$a+8]"}),"等同于",(0,h.jsx)(n.code,{children:"echo $[ a + 8 ]"}),", ",(0,h.jsx)(n.code,{children:"$"}),"和",(0,h.jsx)(n.code,{children:"空格"}),"可有可无。",(0,h.jsx)(n.br,{}),"\n","更多示例如下："]}),"\n"]}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"test@test-PC:~$  a=8; echo $[ ($a+2)*3/2-3 ]\n12\ntest@test-PC:~$  a=8; a=8; a=$[$a%2];echo $a      \n0\ntest@test-PC:~$  a=8; a=$[$a**2];echo $a \n64\ntest@test-PC:~$  a=8; b=$[ a > 5 ];echo $b\n1\ntest@test-PC:~$  a=8; b=$[ a <= 5 ];echo $b \n0\ntest@test-PC:~$ a=8;echo $[ a<<2 ] \n32\ntest@test-PC:~$ a=8;echo $[ --a ],$a\n7,7\ntest@test-PC:~$ a=8;echo $[ a++ ],$a\n8,9\ntest@test-PC:~$ a=8;b=0;echo $[ a>5 && b>5 ] \n0\n"})}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.ol,{start:"2",children:["\n",(0,h.jsxs)(n.li,{children:["注意和",(0,h.jsx)(n.code,{children:"[ expressions ]"}),"表达式做区分,",(0,h.jsx)(n.code,{children:"[]"}),"是test的用法变体，在",(0,h.jsx)(n.code,{children:"[]"}),"表达式中变量必须带",(0,h.jsx)(n.code,{children:"$"}),"，各参数之间必须有空格，数值比较必须用",(0,h.jsx)(n.code,{children:"lt,le,gt,ge,eq,ne"}),"参数，如用",(0,h.jsx)(n.code,{children:"<>="}),"符号，则视为字符串比较。"]}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'test@test-PC:~$ if [ $a -gt 5 ];then echo "a>5";fi\na>5\ntest@test-PC:~$ [ $a \\> 5 ] && echo "a>5"      # 注意< > 前要转义，不然会被认为是重定向\na>5\ntest@test-PC:~$ [ $a \\< 5 ] && echo "a>5" \ntest@test-PC:~$ [ $a -lt 5 ] && echo "a>5"  \n'})}),"\n"]}),"\n"]}),"\n",(0,h.jsxs)(n.h3,{id:"12--expressions--表达式",children:["1.2 ",(0,h.jsx)(n.code,{children:"$(( expressions )) "}),"表达式",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12--expressions--表达式",children:"#"})]}),"\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.code,{children:"$(( expressions ))"}),"除了具备 ",(0,h.jsx)(n.code,{children:"$[ expression ]"}),"的运算符支持的能力外，还支持多个表达式运算，进制转换。"]}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"支持多个表达式运算， 表达式之间用“,”分隔。"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"# 返回最后一个表达式的执行结果\ntest@test-PC:~$ echo $((a=8,b=10,c=a+b))   \n18\n\n#每个表达式都依次进行了计算，可以打印出结果\ntest@test-PC:~$ echo $((a=8,b=10,c=a+b));echo $a,$b,$c    \n18\n8,10,18\n"})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"转换成10进制输出"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"test@test-PC:~$ echo $((2#11110000))    \n240\ntest@test-PC:~$ echo $((8#7))             \n7\ntest@test-PC:~$ echo $((16#2B))      \n43\ntest@test-PC:~$ echo $((0xF0000000))   \n4026531840\ntest@test-PC:~$ echo $((0264))  \n180\n"})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"类C语言风格的for循环"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'for (( i=1; i<5; i++ )) \ndo \n    echo -n "$i"\ndone\n'})}),"\n",(0,h.jsxs)(n.h3,{id:"13-expr",children:["1.3 ",(0,h.jsx)(n.code,{children:"expr"}),(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-expr",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"expr工具可以用来进行整数数值运算和数值比较，需注意以下几点："}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsx)(n.p,{children:"只能对整数参数进行运算和比较"}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsx)(n.p,{children:"参数之间必须有空格"}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsx)(n.p,{children:"对于通配符如*，必须要转义"}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsx)(n.p,{children:"变量必须使用$来引用"}),"\n"]}),"\n"]}),"\n",(0,h.jsx)(n.p,{children:"用法如下："}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"整数数学运算和逻辑判断"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"test@test-PC:~$ a=8;expr $a + 10\n18\ntest@test-PC:~$ a=8;expr $a \\* 10\n80\ntest@test-PC:~$ a=8;expr \\( $a \\* 10 \\) / 4\n20\ntest@test-PC:~$ a=8;expr $a % 5  \n3\ntest@test-PC:~$ a=8;expr $a \\> 5\n1 \ntest@test-PC:~$ a=8; result=$(expr $a + 10);echo ${result}    #将expr的计算结果赋值给变量result\n18\n"})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsxs)(n.li,{children:["判断变量是否为整数",(0,h.jsx)(n.br,{}),"\n","由于expr只能对整数进行数学运算，所以可以通过expr命令的退出码来判断是变量是否为整数"]}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"test@test-PC:~$ a='x';expr $a + 5 \nexpr: 非整数参数\ntest@test-PC:~$ echo $?     # 捕捉expr退出码非0, 说明变量a非整数\n2\n"})}),"\n",(0,h.jsxs)(n.h3,{id:"14-let",children:["1.4 ",(0,h.jsx)(n.code,{children:"let"}),(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14-let",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"let是shell内置命令，常用于整数的整值运算，使用时需要注意"}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.code,{children:"let"})," 只接受整数数值运算，传入变量为字符串会默认变量值为0. （实际测试还会出现未知的异常错误）"]}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.code,{children:"let"})," 运算=号左右两边不能有空格， 除非let 的表达式用双引号引起来（建议）"]}),"\n"]}),"\n",(0,h.jsxs)(n.li,{children:["\n",(0,h.jsxs)(n.p,{children:[(0,h.jsx)(n.code,{children:"let"})," 等式中的变量可以不用带",(0,h.jsx)(n.code,{children:"$"}),"， 对于",(0,h.jsx)(n.code,{children:"*"}),",",(0,h.jsx)(n.code,{children:"()"}),"符号可以不用转义。"]}),"\n"]}),"\n"]}),"\n",(0,h.jsx)(n.p,{children:"用法："}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'test@test-PC:~$ a=8; let a=3+a+4; echo $a\n15\ntest@test-PC:~$ a=8; let a=(3+a)*2; echo $a      \n22\ntest@test-PC:~$ a="string"; let a=3+a; echo $a \n3 \ntest@test-PC:~$ a=8; let a++; echo $a \n9\ntest@test-PC:~$ a=8; let --a; echo $a   \n7\ntest@test-PC:~$ a=1;b=2;let a+=7 b+=3;echo $a,$b     # 多个表达式计算，表达式之间用空格分隔 \n8,5\ntest@test-PC:~$ a=1;b=2; let d=$((c=a*2+b*3)); echo $d        # let可以和$(( expressions )) 结合使用\n8\n'})}),"\n",(0,h.jsx)(n.p,{children:"在循环中使用let计数:"}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'i=0\nwhile [ $i -lt 10 ]\ndo\n    echo "Do something here!"\n    let i++\ndone\n'})}),"\n",(0,h.jsxs)(n.h3,{id:"15-bc",children:["1.5 ",(0,h.jsx)(n.code,{children:"bc"}),(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15-bc",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"bc计算器，不仅可以进行整数计算，还支持对浮点数的运算，进制转换，幂运算。"}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"整数计算，逻辑判断"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'test@test-PC:~$ echo "8+2*5/(4-2)" | bc   \n13\ntest@test-PC:~$ echo "8%5" | bc \n3\ntest@test-PC:~$ a=8; echo "$a>5"|bc\n1\n'})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"浮点数计算"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'test@test-PC:~$ a=8;echo "scale=2;$a/3" |bc    #scale用来设置精度，即小数点的位数\n2.66\ntest@test-PC:~$ a=\'0.3\'; echo "$a*2"|bc     # .6 是个什么鬼，bc不完美的地方可以用printf进行修复	\n.6\ntest@test-PC:~$ a=\'0.3\'; printf "%.2f\\n" $(echo "$a*2"|bc) \n0.60\n'})}),"\n",(0,h.jsx)(n.p,{children:(0,h.jsxs)(n.strong,{children:["注意：",(0,h.jsx)(n.code,{children:"bc"}),"变量",(0,h.jsx)(n.code,{children:"scale"}),"设置的小数位只对除法有效，加减乘法还是输出最高精度，想要保留具体小数点位数建议还是使用",(0,h.jsx)(n.code,{children:"printf"}),"格式化打印"]})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"进制转换"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'test@test-PC:~$ echo "ibase=16;A"|bc         # ibase 设置输入为16进制。 obase不设置默认输出为10进制\n10\ntest@test-PC:~$ echo "ibase=16;obase=2;A"|bc    # 将obase设置为2进制\n1010\n'})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"科学计算，利用bc -l 使用数学库来实现求幂运算，正弦，余弦，正切等"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'ftest@test-PC:~$ echo "2^3"|bc    \n8\ntest@test-PC:~$ echo "sqrt(8)"|bc\n2\ntest@test-PC:~$ a=8;echo "scale=6;e($a)"|bc -l      \n2980.957987\ntest@test-PC:~$ a=8;echo "scale=6;s($a)"|bc -l  \n.989358\ntest@test-PC:~$ \n'})}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsx)(n.li,{children:"批量运算"}),"\n"]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"length=12\nwidth=12\nheight=8\nbc << EOF\ncycle=2*($length+$width)\narea=$length*$width\nvolume=area*$height\nobase=16\nvolume\nEOF\n"})}),"\n",(0,h.jsxs)(n.h3,{id:"16-awkgawk",children:["1.6 ",(0,h.jsx)(n.code,{children:"awk/gawk"}),(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16-awkgawk",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"awk是一款非常强大的文本处理工作，涉及大量的文本处理工作时选择awk无疑是高效的，awk使用方法网上有大量的介绍。本章节重点使用awk来进行数学运算。"}),"\n",(0,h.jsx)(n.p,{children:"awk/gawk已经可以作为一门编程语言，在数学运算上参照C语言编程规范， 支持"}),"\n",(0,h.jsxs)(n.ul,{children:["\n",(0,h.jsxs)(n.li,{children:["算术运算: ",(0,h.jsx)(n.code,{children:"+,-,*,/,%,++,--"})]}),"\n",(0,h.jsxs)(n.li,{children:["关系运算: ",(0,h.jsx)(n.code,{children:"> ,<,==,<=,>=,!="})]}),"\n",(0,h.jsxs)(n.li,{children:["逻辑运算：",(0,h.jsx)(n.code,{children:" &&,||,!"})]}),"\n",(0,h.jsxs)(n.li,{children:["赋值运算: ",(0,h.jsx)(n.code,{children:"=,+=,-=,*=,/=,%=, &=,^=,|="})]}),"\n",(0,h.jsxs)(n.li,{children:["三元运算: ",(0,h.jsx)(n.code,{children:"?:"})]}),"\n",(0,h.jsxs)(n.li,{children:["位运算函数：",(0,h.jsx)(n.code,{children:"lshift(var,count)，rshift(var,count), or(var1,var2), xor(var1,var2), and(var1,var2),compl(var)"})]}),"\n",(0,h.jsxs)(n.li,{children:["内置数学函数：",(0,h.jsx)(n.code,{children:"sin(var),cos(var),exp(var),sqrt(var),log(var)"})," ,等等\n更为关键的是，awk/awk还可以自定义算法函数， 可以处理更为复杂的逻辑运算。"]}),"\n"]}),"\n",(0,h.jsx)(n.p,{children:"用法"}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:"test@test-PC:~$ echo | awk '{printf(\"%d\\n\",3+4)}'\n7\ntest@test-PC:~$ echo | awk '{printf(\"%d\\n\",8*4)}'  \n32\ntest@test-PC:~$ echo | awk -v a=8 '{printf(\"%d,%d\\n\",a>=5,a)}'\n1,8\ntest@test-PC:~$ echo | awk -v a=8 '{printf(\"%d,%d\\n\",a&&0,a)}'\n0,8\ntest@test-PC:~$ echo | awk -v a=8 '{printf(\"%d,%d\\n\",a>5?1:0,a)}'\n1,8\ntest@test-PC:~$ echo | awk -v a=8 '{printf(\"%d\\n\",rshift(a,2))}'\n2\ntest@test-PC:~$ echo | awk -v a=24 '{printf(\"%.2f\\n\",cos(a))}'\n0.42\ntest@test-PC:~$ echo | awk -v a=8 '{printf(\"%.2f\\n\",sqrt(a))}'\n2.83\n"})}),"\n",(0,h.jsxs)(n.h2,{id:"2-shell数学运算实践",children:["2. Shell数学运算实践",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-shell数学运算实践",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:"本节参考一段C语言代码，获取字符串的hash值，把C语言代码转换成Bash语言和awk，来练习之前章节所学习的一些技能。"}),"\n",(0,h.jsxs)(n.h3,{id:"21-c语言hash算法",children:["2.1 C语言Hash算法",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-c语言hash算法",children:"#"})]}),"\n",(0,h.jsxs)(n.p,{children:["以下C语言代码中",(0,h.jsx)(n.code,{children:"ELFHash"}),"函数来源于",(0,h.jsx)(n.a,{href:"http://www.partow.net/programming/hashfunctions",target:"_blank",rel:"noopener noreferrer",children:"http://www.partow.net/programming/hashfunctions"}),(0,h.jsx)(n.br,{}),"\n",(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ vi hash.c "})]}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nunsigned int ELFHash(const char* str, unsigned int length)\n{\n        unsigned int hash = 0;\n        unsigned int x    = 0;\n        unsigned int i    = 0;\n        for (i = 0; i < length; ++str, ++i)\n        {\n                hash = (hash << 4) + (*str);\n                if ((x = hash & 0xF0000000L) != 0)\n                {\n                        hash ^= (x >> 24);\n                }\n                hash &= ~x;\n        }\n\n        return hash;\n}\n\nint main(char *argv[], int argc)\n{\n        const char str[] = "UOS is the best Opeartion System!";\n        const char *ptr  = str;\n        unsigned int hash;\n\n        hash = ELFHash(ptr,strlen(str));\n\n        printf("Hash value is :[%d]\\n",hash);\n        return 0;\n}\n'})}),"\n",(0,h.jsx)(n.p,{children:"编译执行，结果如下："}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ gcc -o ELFHash hash.c\ntest@test-PC:~/work/study/cplus$ ./ELFHash \nHash value is :[680273]\n"})}),"\n",(0,h.jsxs)(n.h3,{id:"22-bash语言hash算法",children:["2.2 Bash语言Hash算法",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-bash语言hash算法",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ vi hash.sh "})}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n  \nfunction ELFHash()\n{\n    declare -i hash=0;\n    declare -i x=0;\n    declare -i i=0;\n\n    charr=$1\n    length=$2\n\n    for ((i = 0; i < length; ++i))\n    do\n        ch=$(printf "%d" "\'${charr:$i:1}")   #将字母转换为ASC码值\n\n        hash=$(( (hash << 4) + ch ))\n        x=$(( hash & 0xF0000000 ))\n\n        if [ $x -ne 0 ]; then\n            hash=$(( hash ^ (x >> 24) ))\n        fi\n\n        hash=$(( hash & (~x) ))\n     done\n\n     echo ${hash}                         #将结果打印\n     return 0\n}\n\nfunction main()\n{\n    declare -r str="UOS is the best Opeartion System!"\n    declare -i retval\n\n    retval=$(ELFHash "${str}" "${#str}") \n    printf "Hash value is :[%d]\\n" "${retval}"\n\n    return 0;\n}\n\nmain\n'})}),"\n",(0,h.jsx)(n.p,{children:"执行结果如下："}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ bash hash.sh \nHash value is :[680273]\n"})}),"\n",(0,h.jsxs)(n.h3,{id:"23-awk语言hash算法",children:["2.3 awk语言Hash算法",(0,h.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-awk语言hash算法",children:"#"})]}),"\n",(0,h.jsx)(n.p,{children:(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ vi hash.awk "})}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{className:"language-awk",children:'#!/bin/awk -f\n  \nfunction ELFHash(str,len)\n{\n    x = 0\n    hash = 0\n    split(str, charr, "")              #将字符串转换为数组，方便遍历\n    for ( i = 1; i <= len; ++i ) {\n        ch = ascii[charr[i]]\n        hash=lshift(hash,4) + ch\n        x= and(hash, 0xF0000000L)\n\n        if( x != 0 ) {\n            hash= xor(hash, rshift(x,24) )\n        }\n\n        hash = and( hash, compl(x) )\n    }\n    return hash\n}\n\nBEGIN {\n    str="UOS is the best Opeartion System!"\n\n    # 将字母和ASCII码值建立映射关系，便于后面函数取ASCII值\n    for (i = 0; i < 256; ++i) { ascii[sprintf("%c", i)] = i; }\n\n    retval = ELFHash(str,length(str))\n   \n    printf("Hash value is :[%d]\\n",retval);\n}\n'})}),"\n",(0,h.jsx)(n.p,{children:"执行结果如下："}),"\n",(0,h.jsx)(n.pre,{children:(0,h.jsx)(n.code,{children:"test@test-PC:~/work/study/cplus$ awk -f hash.awk \nHash value is :[680273]\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,h.jsx)(n,{...e,children:(0,h.jsx)(r,{...e})}):r(e)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2FShell%2FShell%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97.md"]={toc:[{text:"Shell数学运算",id:"shell数学运算",depth:2},{text:"1. 常用的数学运算工具及表达式",id:"1-常用的数学运算工具及表达式",depth:2},{text:"1.1 `$[ expression ]`表达式",id:"11--expression-表达式",depth:3},{text:"1.2 `$(( expressions )) `表达式",id:"12--expressions--表达式",depth:3},{text:"1.3 `expr`",id:"13-expr",depth:3},{text:"1.4 `let`",id:"14-let",depth:3},{text:"1.5 `bc`",id:"15-bc",depth:3},{text:"1.6 `awk/gawk`",id:"16-awkgawk",depth:3},{text:"2. Shell数学运算实践",id:"2-shell数学运算实践",depth:2},{text:"2.1 C语言Hash算法",id:"21-c语言hash算法",depth:3},{text:"2.2 Bash语言Hash算法",id:"22-bash语言hash算法",depth:3},{text:"2.3 awk语言Hash算法",id:"23-awk语言hash算法",depth:3}],title:"",headingTitle:"",frontmatter:{Author:"海针 - 搬运"}}}}]);