"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8118"],{8180:function(e,n,s){s.r(n),s.d(n,{default:()=>t});var i=s(2676),r=s(453);function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"python最强代码检查格式化工具ruff",children:["Python最强代码检查&格式化工具Ruff",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#python最强代码检查格式化工具ruff",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"概述",children:["概述",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Rust 正在重构一切，已经杀到 Python 了。"}),"\n",(0,i.jsx)(n.p,{children:"Ruff 是基于 Rust 编写的 Python 代码检查&格式化工具，就一个特点，快。"}),"\n",(0,i.jsx)(n.p,{children:"有多快，来看看数据："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/ruff_assets/1.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"过去 Python 的项目通常使用 Pylint 进行代码检查，然后使用 Black 进行代码格式化。"}),"\n",(0,i.jsx)(n.p,{children:"正所谓人生苦短，现在有了 Ruff 这一个工具就够了。"}),"\n",(0,i.jsxs)(n.h2,{id:"安装",children:["安装",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"pip install ruff\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"代码检查",children:["代码检查",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码检查",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"代码检查是扫描代码中存在的问题。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"ruff check .\n"})}),"\n",(0,i.jsx)(n.p,{children:"表示扫描当前目录下所有的代码，当然你可以指定一个具体的目录或文件。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/ruff_assets/2.png",alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["在扫描日志最后可以看到一个 ",(0,i.jsx)(n.code,{children:"fixable"}),"，意思是可以通过 ",(0,i.jsx)(n.code,{children:"--fix"})," 参数直接给你修复掉。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"ruff check setting/ --fix\n"})}),"\n",(0,i.jsx)(n.p,{children:"对比下文件前后："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/ruff_assets/3.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"你看，直接修复了对吧。"}),"\n",(0,i.jsxs)(n.h2,{id:"代码格式化",children:["代码格式化",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码格式化",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"经过前面代码检查并修复之后，说明我们代码中没有“问题”了，接下来就可以进行代码格式化。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"ruff format setting/\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/ruff_assets/4.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"效果很不错对吧。"}),"\n",(0,i.jsx)(n.p,{children:"格式化这块 Ruff 官方表示是可以直接替代 Black 的。"}),"\n",(0,i.jsxs)(n.h2,{id:"配置",children:["配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["前面代码检查的时候报了一个问题，是说在 ",(0,i.jsx)(n.code,{children:"__init__.py"})," 文件里面写了一个导入，但没有被使用。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是这是我特意这样写的，是一种名称空间的设计，可以在 ",(0,i.jsx)(n.code,{children:"setting"})," 名称空间下直接导入，不需要 Ruff 处理这个问题，这也不是个问题。"]}),"\n",(0,i.jsx)(n.p,{children:"因此，我们需要对 Ruff 进行配置。"}),"\n",(0,i.jsxs)(n.p,{children:["在根目录下创建一个 ",(0,i.jsx)(n.code,{children:"ruff.toml"})," 的文件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# Exclude a variety of commonly ignored directories.\nexclude = [\n    ".bzr",\n    ".direnv",\n    ".eggs",\n    ".git",\n    ".git-rewrite",\n    ".hg",\n    ".ipynb_checkpoints",\n    ".mypy_cache",\n    ".nox",\n    ".pants.d",\n    ".pyenv",\n    ".pytest_cache",\n    ".pytype",\n    ".ruff_cache",\n    ".svn",\n    ".tox",\n    ".venv",\n    ".vscode",\n    "__pypackages__",\n    "_build",\n    "buck-out",\n    "build",\n    "dist",\n    "node_modules",\n    "site-packages",\n    "venv",\n]\n\n# Same as Black.\nline-length = 100\nindent-width = 4\n\n# Assume Python 3.7\ntarget-version = "py37"\n\n[lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\n# Unlike Flake8, Ruff doesn\'t enable pycodestyle warnings (`W`) or\n# McCabe complexity (`C901`) by default.\nselect = ["E4", "E7", "E9", "F"]\nignore = []\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = ["ALL"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"\n\n[format]\n# Like Black, use double quotes for strings.\nquote-style = "double"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = "space"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = "auto"\n\n# Enable auto-formatting of code examples in docstrings. Markdown,\n# reStructuredText code/literal blocks and doctests are all supported.\n#\n# This is currently disabled by default, but it is planned for this\n# to be opt-out in the future.\ndocstring-code-format = false\n\n# Set the line length limit used when formatting code snippets in\n# docstrings.\n#\n# This only has an effect when the `docstring-code-format` setting is\n# enabled.\ndocstring-code-line-length = "dynamic"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在上面配置文件中 ",(0,i.jsx)(n.code,{children:"ignore = []"})," 写入错误代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'ignore = ["F401"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"再次扫描就不会再报之前的问题。"}),"\n",(0,i.jsx)(n.p,{children:"其他的一些配置也可以根据自己的一些需要进行配置。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["program%2FPython%2FPython%E6%9C%80%E5%BC%BA%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%26%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7Ruff.md"]={toc:[{text:"概述",id:"概述",depth:2},{text:"安装",id:"安装",depth:2},{text:"代码检查",id:"代码检查",depth:2},{text:"代码格式化",id:"代码格式化",depth:2},{text:"配置",id:"配置",depth:2}],title:"Python最强代码检查&格式化工具Ruff",headingTitle:"Python最强代码检查&格式化工具Ruff",frontmatter:{Author:"mikigo"}}}}]);