"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6251"],{1805:function(e,n,r){r.r(n),r.d(n,{default:()=>t});var s=r(2676),l=r(453);function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",code:"code",pre:"pre",img:"img",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"playwright8小时入门版",children:["Playwright—8小时入门版",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#playwright8小时入门版",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"一简介",children:["一、简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一简介",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Playwright 是一个 Web UI 自动化测试的框架，其各方面功能和使用体验全面碾压 Selenium。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"一入 Playwright 深似海，从此 Selenium 是路人。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"曾经，在 Web UI 自动化测试领域，Selenium  如日中天，几乎只要提到 UI 自动化就会想到 Selenium，Selenium 就是 Web UI自动化的代名词；"}),"\n",(0,s.jsx)(n.p,{children:"后来，Playwright 出现了，慢慢的大家对 Selenium 开始冷落了；为啥呢？"}),"\n",(0,s.jsx)(n.p,{children:"简单讲，因为在 Selenium 时代，其实大家遇到很多问题，但一直得不到解决；Selenium 2.0 版本是一个巨大的飞跃，因为引入了 WebDriver，后面 3.0、到现在 4.0 功能上没有什么亮点，而且以前的问题还在，大家对这个玩意儿就提不起兴趣去研究了。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Selenium 之后不是没有其他 UI 框架，确实也出现过几个小有名气的框架，比如：cypress、puppeteer、testcafe，这些个玩意儿缺点就是不支持 Python，太拉胯，而且像 puppeteer 只支持谷歌浏览器，因为它就是谷歌家的它不需要支持其他浏览器，就这，广大的 Firefox 和尊贵的 Safari 用户能忍你吗，给老子滚。于是，Playwright 集各家之所长，补各家之缩短，“天空一声巨响，老子闪亮登场”。"}),"\n",(0,s.jsx)(n.p,{children:"坊间传言，Playwright 有几个核心开发者就是从 puppeteer 过来的，不得不说，老外是真会整活。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"第一次尝试使用 Playwright，我仅仅只写了一个小脚本，但有两个点印象深刻："}),"\n",(0,s.jsx)(n.p,{children:"1、环境安装好简单；"}),"\n",(0,s.jsx)(n.p,{children:"要知道 Selenium 的环境安装是很烦人的，要单独装 WebDriver 的驱动，而且驱动版本要和浏览器版本一致，不然会报一些莫名其妙的错，多少人在 Selenium 的环境上卡住而无法入门；"}),"\n",(0,s.jsx)(n.p,{children:"2、执行速度好快；"}),"\n",(0,s.jsx)(n.p,{children:"用过 Selenium 应该知道，跑起来挺慢的，Playwright 的执行速度真的“起飞”。"}),"\n",(0,s.jsx)(n.p,{children:"在后面对 Playwright 使用和了解越来越多之后发现，它确实全面碾压 Selenium。微软出品，必属精品。"}),"\n",(0,s.jsxs)(n.h2,{id:"二安装",children:["二、安装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二安装",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["系统环境：",(0,s.jsx)(n.code,{children:"deepin-20.8"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"pip3 install playwright\n# 安装浏览器\nplaywright install\n"})}),"\n",(0,s.jsxs)(n.p,{children:["完事儿了，这样环境就装好了，是不是很简单，不用去关心用什么浏览器，用什么 WebDriver 驱动，你的电脑上甚至不用装浏览器，",(0,s.jsx)(n.code,{children:"playwright install"})," 已经把测试用的浏览器都装好。"]}),"\n",(0,s.jsxs)(n.h2,{id:"三脚本生成器",children:["三、脚本生成器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三脚本生成器",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Selenium IDE 是用来录制脚本的，好多刚开始入门的同学应该都用过，就是在浏览器里面装个插件，然后监控浏览器的事件，生成脚本；我个人倒是极少用，因为会写代码用那玩意儿干啥。（成功装到）"}),"\n",(0,s.jsx)(n.p,{children:"Playwright 当然也有录制的功能，在终端执行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"playwright codegen\n"})}),"\n",(0,s.jsx)(n.p,{children:"会启动一个“浏览器”窗口和一个“脚本生成器”窗口"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/playwright/1.png",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"脚本生成器初始状态会有模板代码，你通过浏览器操作的时候，每一步的操作，都会对应在脚本生成器自动生成一行代码，比如，我输入百度的网址："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/playwright/2.png",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在百度首页，点击输入框，输入一个内容，点击“百度一下”，一顿操作下来，代码自动生成如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from playwright.sync_api import Playwright, sync_playwright, expect\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto("https://www.baidu.com/")\n    page.locator("#kw").click()\n    page.locator("#kw").fill("youqu")\n    page.get_by_role("button", name="百度一下").click()\n\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n'})}),"\n",(0,s.jsx)(n.p,{children:"这样就自动生成了一段完整的代码，简直不要太轻松。"}),"\n",(0,s.jsxs)(n.p,{children:["有同学说，能不能直接生成测试用例的代码，当然是可以的，在脚本生成器右上角 Target 选择 ",(0,s.jsx)(n.code,{children:"pytest"}),"，一顿操作下来，生成代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from playwright.sync_api import Page, expect\n\ndef test_example(page: Page) -> None:\n    page.goto("https://www.baidu.com/")\n    page.locator("#kw").click()\n    page.locator("#kw").fill("youqu")\n    page.get_by_role("button", name="百度一下").click()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这个脚本是可以直接用 ",(0,s.jsx)(n.code,{children:"pytest"})," 来执行的，你需要安装 ",(0,s.jsx)(n.code,{children:"pytest-playwright"})," 插件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"pip3 install pytest-playwright\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pytest-playwright"}),"  插件是由 Playwright 官方维护的。"]}),"\n",(0,s.jsxs)(n.p,{children:["相信有上面 ",(0,s.jsx)(n.code,{children:"pytest"})," 这个例子，对于测试同学来讲，写一些简单的用例是没什么问题了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"四元素定位方法",children:["四、元素定位方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四元素定位方法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于所有的 UI 自动化来讲，无非就是元素定位和元素操作，Playwright 最常用的元素的定位方法就是 XPath 和 CSS，其次就是它特有的定位方法；"}),"\n",(0,s.jsxs)(n.h3,{id:"1xpath",children:["1、XPath",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1xpath",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"XPath 是一种通用、标准的元素定位方案，它的语法也是标准的，在很多框架里面都有使用到，基本能满足 90% 的元素定位需求；"}),"\n",(0,s.jsx)(n.p,{children:"经常有同学说 XPath 定位不稳定，页面上一点点变化就找不到元素了，说这话的一般是喜欢使用浏览器自带的复制 XPath 的功能，因为复制出来的 XPath 路径是绝对路径，当然不稳定，我们通过观察，自己写相对路径的XPath 表达式；"}),"\n",(0,s.jsx)(n.p,{children:"简单介绍下 XPath 语法："}),"\n",(0,s.jsx)(n.p,{children:"（1）节点选取"}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"表达式"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"nodename"}),"\n",(0,s.jsx)(n.td,{children:"选取此节点的所有子节点"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/"}),"\n",(0,s.jsx)(n.td,{children:"从根节点选取"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"//"}),"\n",(0,s.jsx)(n.td,{children:"从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"."}),"\n",(0,s.jsx)(n.td,{children:"选取当前节点"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:".."}),"\n",(0,s.jsx)(n.td,{children:"选取当前节点的父节点"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"@"}),"\n",(0,s.jsx)(n.td,{children:"选取属性"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"（2）属性选取"}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"路径表达式"}),"\n",(0,s.jsx)(n.th,{children:"结果"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[1]"}),"\n",(0,s.jsx)(n.td,{children:"选取属于 bookstore 子元素的第一个 book 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[last()]"}),"\n",(0,s.jsx)(n.td,{children:"选取属于 bookstore 子元素的最后一个 book 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[last()-1]"}),"\n",(0,s.jsx)(n.td,{children:"选取属于 bookstore 子元素的倒数第二个 book 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[position()<3]"}),"\n",(0,s.jsx)(n.td,{children:"选取最前面的两个属于 bookstore 元素的子元素的 book 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"//title[@lang]"}),"\n",(0,s.jsx)(n.td,{children:"选取所有拥有名为 lang 的属性的 title 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"//title[@lang='eng']"}),"\n",(0,s.jsx)(n.td,{children:"选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[price>35.00]"}),"\n",(0,s.jsx)(n.td,{children:"选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/bookstore/book[price>35.00]/title"}),"\n",(0,s.jsx)(n.td,{children:"选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在浏览器中调试 XPath："}),"\n",(0,s.jsx)(n.p,{children:"按 F12 打开调试页面—>选择 console，XPath 定位的语法是 ：$x()"}),"\n",(0,s.jsx)(n.p,{children:"举例："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/playwright/3.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"$x(\"//input[@type='submit']\")\n"})}),"\n",(0,s.jsx)(n.p,{children:"说明通过这个 XPath 表达式可以定位到【百度一下】按钮；"}),"\n",(0,s.jsx)(n.p,{children:"在 Playwright 里面是通过 page 对象提供的 locator 方法实现 CSS 或 XPath 定位的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"page.locater(\"//input[@type='submit']\").click()\n"})}),"\n",(0,s.jsx)(n.p,{children:"Playwright 会自动检测输入的是 CSS 或 XPath。"}),"\n",(0,s.jsxs)(n.h3,{id:"2css",children:["2、CSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2css",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"了解前端的应该都知道 CSS，这里不多介绍；"}),"\n",(0,s.jsx)(n.p,{children:"在浏览器中调试 CSS 定位："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/playwright/4.png",alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'$("#su")\n'})}),"\n",(0,s.jsx)(n.p,{children:"说明通过此 CSS 表达式可以定位到【百度一下】按钮；"}),"\n",(0,s.jsx)(n.p,{children:"在 Playwright 里面："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.locater("#su").click()\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"3特有的",children:["3、特有的",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3特有的",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Playwright 内置几个定位器："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"get_by_role 通过角色定位"}),"\n",(0,s.jsx)(n.p,{children:"还是上面的例子【百度一下】："}),"\n",(0,s.jsx)(n.p,{children:"html 是这样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="submit" id="su" value="百度一下" class="bg s_btn">\n'})}),"\n",(0,s.jsx)(n.p,{children:"定位可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.get_by_role("button", name="百度一下")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"get_by_text 通过文本定位"}),"\n",(0,s.jsx)(n.p,{children:"还是在百度首页找个文本 html ："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<span class="hot-refresh-text">换一换</span>\n'})}),"\n",(0,s.jsx)(n.p,{children:"定位可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.get_by_text("换一换")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"get_by_label 通过标签定位"}),"\n",(0,s.jsx)(n.p,{children:"html 是这样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<label>Password <input type="password" /></label>\n'})}),"\n",(0,s.jsx)(n.p,{children:"定位可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.get_by_label("Password")\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"还有其他的内置定位方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"get_by_placeholder 占位符定位\nget_by_alt_text 替换文本定位\nget_by_title 标题定位\nget_by_test_id 测试ID定位\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"五其他",children:["五、其他",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五其他",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1截图",children:["1、截图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1截图",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"捕获屏幕截图并将其保存到文件中："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.screenshot(path="screenshot.png")\n'})}),"\n",(0,s.jsx)(n.p,{children:"完整页面截图是一个完整的可滚动页面的截图："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.screenshot(path="screenshot.png", full_page=True)\n'})}),"\n",(0,s.jsx)(n.p,{children:"单个元素进行屏幕截图："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.locator(".header").screenshot(path="screenshot.png")\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"2录屏",children:["2、录屏",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2录屏",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"测试过程录屏，保存的视频文件将出现在指定的文件夹中，生成了唯一的名称，视频保存在浏览器上下文在测试结束时关闭："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'context = browser.new_context(record_video_dir="videos/")\ncontext.close()\n'})}),"\n",(0,s.jsx)(n.p,{children:"还可以指定视频大小"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'context = browser.new_context(\n    record_video_dir="videos/",\n    record_video_size={"width": 800, "height": 800}\n)\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"3po",children:["3、PO",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3po",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"PO（Page Object） 是一种分层设计的思想，最早是 Selenium 提出来的，但它本身和使用什么框架没有关系，我们在自动化测试实践过程中，应该始终使用 PO 的设计；"}),"\n",(0,s.jsxs)(n.h3,{id:"4自动等待",children:["4、自动等待",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4自动等待",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Playwright 在元素定位的时候是自动等待的，不用再像使用 Selenium 一样设置各种类型的等待（隐式等待、显示等待、强制等待），这才是框架该有的样子。"}),"\n",(0,s.jsxs)(n.h3,{id:"5断言",children:["5、断言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5断言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Playwright 有自己的断言语句："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'locator = page.locator("input[type=number]")\nexpect(locator).to_have_value(re.compile(r"[0-9]"))\n'})}),"\n",(0,s.jsx)(n.p,{children:"使用 expect 语句，后面跟断言的类型，断言的类型就有点多了，大概看了下有好几十个，列几个常用的："}),"\n",(0,s.jsx)(n.p,{children:"to_have_value"}),"\n",(0,s.jsx)(n.p,{children:"to_contain_text"}),"\n",(0,s.jsx)(n.p,{children:"to_be_empty"}),"\n",(0,s.jsx)(n.p,{children:"反向断言，前面加 not，如：not_to_contain_text"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let t=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["autotest%2FUI%E8%87%AA%E5%8A%A8%E5%8C%96%2FPlaywright%E2%80%948%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8%E7%89%88.md"]={toc:[{text:"一、简介",id:"一简介",depth:2},{text:"二、安装",id:"二安装",depth:2},{text:"三、脚本生成器",id:"三脚本生成器",depth:2},{text:"四、元素定位方法",id:"四元素定位方法",depth:2},{text:"1、XPath",id:"1xpath",depth:3},{text:"2、CSS",id:"2css",depth:3},{text:"3、特有的",id:"3特有的",depth:3},{text:"五、其他",id:"五其他",depth:2},{text:"1、截图",id:"1截图",depth:3},{text:"2、录屏",id:"2录屏",depth:3},{text:"3、PO",id:"3po",depth:3},{text:"4、自动等待",id:"4自动等待",depth:3},{text:"5、断言",id:"5断言",depth:3}],title:"Playwright—8小时入门版",headingTitle:"Playwright—8小时入门版",frontmatter:{Author:"mikigo"}}}}]);